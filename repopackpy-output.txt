================================================================
RepopackPy Output File
================================================================

This file was generated by RepopackPy on: 2024-09-10T16:53:23.734742

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and RepopackPy's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

For more information about RepopackPy, visit: https://github.com/abinthomasonline/repopack-py

================================================================
Repository Structure
================================================================
.wordpress-org/
  banner-1544x500.png
  banner-772x250.png
  icon-128x128.png
  icon-256x256.png
assets/
  built-with.png
  header.png
src/
  Admin/
    Settings/
      Settings.php
  Connection/
    .gitkeep
  Data/
    Connection/
      .gitkeep
    Loader/
      .gitkeep
    .gitkeep
  Extensions/
    WPGraphQLWooCommerce/
      Type/
        WPObject/
          SeoObjects.php
      WPGraphQLWooCommerce.php
    Extensions.php
  Fields/
    RootQuery.php
  Model/
    ContentNodeSeo.php
    ContentTypeSeo.php
    Seo.php
    Settings.php
    TermNodeSeo.php
    UserSeo.php
  Modules/
    Redirection/
      Connection/
        RedirectionConnection.php
      Data/
        Connection/
          RedirectionConnectionResolver.php
        Cursor/
          RedirectionCursor.php
        Loader/
          RedirectionsLoader.php
      Fields/
        GeneralSettings.php
        RootQuery.php
      Model/
        Redirection.php
      Type/
        Enum/
          RedirectionBehaviorEnum.php
          RedirectionComparisonTypeEnum.php
          RedirectionConnectionOrderByEnum.php
          RedirectionStatusEnum.php
          RedirectionTypeEnum.php
        Input/
          RedirectionConnectionOrderbyInput.php
        WPObject/
          Redirection.php
          RedirectionSettings.php
          RedirectionSource.php
      CoreSchemaFilters.php
      TypeRegistry.php
  Mutation/
    .gitkeep
  Type/
    Enum/
      ArticleTypeEnum.php
      BulkEditingTypeEnum.php
      ImagePreviewSizeEnum.php
      KnowledgeGraphTypeEnum.php
      OpenGraphLocaleEnum.php
      OpenGraphProductAvailabilityEnum.php
      RobotsMetaValueEnum.php
      SeoRatingEnum.php
      SeoScorePositionEnum.php
      SeoScoreTemplateTypeEnum.php
      SnippetTypeEnum.php
      TwitterCardTypeEnum.php
    WPInterface/
      ContentNodeSeo.php
      MetaSettingWithArchive.php
      MetaSettingWithRobots.php
      NodeWithSeo.php
      Seo.php
    WPObject/
      OpenGraph/
        Article.php
        Facebook.php
        Image.php
        Product.php
        SlackEnhancedData.php
        Twitter.php
        TwitterApp.php
        Video.php
      Settings/
        General/
          BreadcrumbsConfig.php
          FrontendSeoScore.php
          Links.php
          Webmaster.php
        Meta/
          AuthorArchiveMeta.php
          ContentTypeMeta.php
          DateArchiveMeta.php
          GlobalMeta.php
          HomepageMeta.php
          LocalMeta.php
          SocialMeta.php
          TaxonomyMeta.php
        Sitemap/
          Author.php
          ContentType.php
          General.php
          Taxonomy.php
        General.php
        Meta.php
        Sitemap.php
      AdvancedRobotsMeta.php
      Breadcrumbs.php
      JsonLd.php
      OpenGraphMeta.php
      SeoObjects.php
      SeoScore.php
      Settings.php
    .gitkeep
  Utils/
    .gitkeep
    RMUtils.php
    Utils.php
  Autoloader.php
  CoreSchemaFilters.php
  Main.php
  TypeRegistry.php
vendor/
  composer/
    ClassLoader.php
    InstalledVersions.php
    LICENSE
    autoload_classmap.php
    autoload_files.php
    autoload_namespaces.php
    autoload_psr4.php
    autoload_real.php
    autoload_static.php
    installed.json
    installed.php
    platform_check.php
  autoload.php
vendor-prefixed/
  axepress/
    wp-graphql-plugin-boilerplate/
      src/
        Abstracts/
          ConnectionType.php
          EnumType.php
          FieldsType.php
          InputType.php
          InterfaceType.php
          MutationType.php
          ObjectType.php
          Type.php
          UnionType.php
        Helper/
          Helper.php
        Interfaces/
          GraphQLType.php
          Registrable.php
          TypeWithConnections.php
          TypeWithFields.php
          TypeWithInputFields.php
          TypeWithInterfaces.php
        Traits/
          TypeNameTrait.php
          TypeResolverTrait.php
.coveralls.yml
CHANGELOG.md
LICENSE
README.md
access-functions.php
activation.php
codeception.dist.yml
composer.json
deactivation.php
docker-compose.yml
readme.txt
wp-graphql-rank-math.php

================================================================
Repository Files
================================================================

================
File: activation.php
================
<?php
/**
 * Activation Hook
 *
 * @package WPGraphql\RankMath
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath;

/**
 * Runs when the plugin is activated.
 */
function activation_callback(): callable {
	return static function (): void {
		do_action( 'graphql_seo_activate' );

		// store the current version of the plugin.
		update_option( 'wp_graphql_seo_version', WPGRAPHQL_SEO_VERSION );
	};
}

================
File: wp-graphql-rank-math.php
================
<?php
/**
 * Plugin Name: WPGraphQL for Rank Math SEO
 * Plugin URI: https://github.com/AxeWP/wp-graphql-rank-math
 * GitHub Plugin URI: https://github.com/AxeWP/wp-graphql-rank-math
 * Description: Adds RankMath support to WPGraphQL
 * Author: AxePress
 * Author URI: https://github.com/AxeWP
 * Update URI: https://github.com/AxeWP/wp-graphql-rank-math
 * Version: 0.3.2
 * Text Domain: wp-graphql-rank-math
 * Domain Path: /languages
 * Requires at least: 6.0
 * Tested up to: 6.6.1
 * Requires PHP: 7.4
 * Requires Plugins: wp-graphql, seo-by-rank-math
 * WPGraphQL requires at least: 1.26.0
 * License: GPL-3
 * License URI: https://www.gnu.org/licenses/gpl-3.0.html
 *
 * @package WPGraphQL\RankMath
 * @author axepress
 * @license GPL-3
 * @version 0.3.2
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath;

// Exit if accessed directly.
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

// If the codeception remote coverage file exists, require it.
// This file should only exist locally or when CI bootstraps the environment for testing.
if ( file_exists( __DIR__ . '/c3.php' ) ) {
	require_once __DIR__ . '/c3.php';
}

// Load the autoloader.
require_once __DIR__ . '/src/Autoloader.php';
if ( ! \WPGraphQL\RankMath\Autoloader::autoload() ) {
	return;
}

/**
 * Define plugin constants.
 */
function constants(): void {
	// Plugin version.
	if ( ! defined( 'WPGRAPHQL_SEO_VERSION' ) ) {
		define( 'WPGRAPHQL_SEO_VERSION', '0.3.2' );
	}

	// Plugin Folder Path.
	if ( ! defined( 'WPGRAPHQL_SEO_PLUGIN_DIR' ) ) {
		define( 'WPGRAPHQL_SEO_PLUGIN_DIR', plugin_dir_path( __FILE__ ) );
	}

	// Plugin Folder URL.
	if ( ! defined( 'WPGRAPHQL_SEO_PLUGIN_URL' ) ) {
		define( 'WPGRAPHQL_SEO_PLUGIN_URL', plugin_dir_url( __FILE__ ) );
	}

	// Plugin Root File.
	if ( ! defined( 'WPGRAPHQL_SEO_PLUGIN_FILE' ) ) {
		define( 'WPGRAPHQL_SEO_PLUGIN_FILE', __FILE__ );
	}

	// Whether to autoload the files or not.
	if ( ! defined( 'WPGRAPHQL_SEO_AUTOLOAD' ) ) {
		define( 'WPGRAPHQL_SEO_AUTOLOAD', true );
	}
}

// Run this function when the plugin is activated.
if ( file_exists( __DIR__ . '/activation.php' ) ) {
	require_once __DIR__ . '/activation.php';
	register_activation_hook(
		__FILE__,
		'WPGraphQL\RankMath\activation_callback'
	);
}

// Run this function when the plugin is deactivated.
if ( file_exists( __DIR__ . '/deactivation.php' ) ) {
	require_once __DIR__ . '/deactivation.php';
	register_activation_hook( __FILE__, 'WPGraphQL\RankMath\deactivation_callback' );
}

/**
 * Checks if all the the required plugins are installed and activated.
 *
 * @return array<string, string> List of dependencies that are not ready.
 */
function dependencies_not_ready(): array {
	$wpgraphql_version = '1.26.0';
	$rankmath_version  = '1.0.201';

	$deps = [];

	// WPGraphQL Check.
	if ( ! class_exists( '\WPGraphQL' ) || ( defined( 'WPGRAPHQL_VERSION' ) && version_compare( WPGRAPHQL_VERSION, $wpgraphql_version, '<' ) ) ) {
		$deps['WPGraphQL'] = $wpgraphql_version;
	}

	if ( ! class_exists( '\RankMath' ) || ( defined( 'RANK_MATH_VERSION' ) && version_compare( RANK_MATH_VERSION, $rankmath_version, '<' ) ) ) {
		$deps['RankMath SEO'] = $rankmath_version;
	}

	return $deps;
}

/**
 * Checks if any known plugin conflicts are present.
 *
 * @return array<string, string> List of conflicting plugins.
 *
 * @since 0.0.12
 */
function plugin_conflicts(): array {
	$conflicts = [];

	if ( function_exists( 'wp_gql_seo_build_content_type_data' ) ) {
		$conflicts['WPGraphQL Yoast SEO Addon'] = __( 'This plugin may appear as "Add WPGraphQL SEO" in the plugin list.', 'wp-graphql-rank-math' );
	}

	return $conflicts;
}

/**
 * Initializes plugin.
 */
function init(): void {
	constants();

	$not_ready = dependencies_not_ready();

	// Get the conflicting plugins.
	$conflicts = plugin_conflicts();

	if ( empty( $not_ready ) && empty( $conflicts ) && defined( 'WPGRAPHQL_SEO_PLUGIN_DIR' ) ) {
		require_once WPGRAPHQL_SEO_PLUGIN_DIR . 'src/Main.php';
		\WPGraphQL\RankMath\Main::instance();
		return;
	}

	// Output an error notice for the dependencies that are not ready.
	foreach ( $not_ready as $dep => $version ) {
		add_action(
			'admin_notices',
			static function () use ( $dep, $version ) {
				?>
				<div class="error notice">
					<p>
						<?php
							printf(
								/* translators: dependency not ready error message */
								esc_html__( '%1$s (v%2$s+) must be active for WPGraphQL for Rank Math to work.', 'wp-graphql-rank-math' ),
								esc_attr( $dep ),
								esc_attr( $version ),
							);
						?>
					</p>
				</div>
				<?php
			}
		);
	}

	// Output an error notice for the conflicting plugins.
	foreach ( $conflicts as $conflict => $note ) {
		add_action(
			'admin_notices',
			static function () use ( $conflict, $note ) {
				?>
			<div class="error notice">
				<p>
					<?php
					printf(
						/* translators: dependency not ready error message */
						esc_html__( '%1$s is not compatible with WPGraphQL for Rank Math SEO. Please deactivate it.', 'wp-graphql-rank-math' ),
						esc_attr( $conflict ),
					);

					if ( ! empty( $note ) ) {
						// translators: resolution message.
						printf(
							'<br /><em>%1$s</em> %2$s',
							esc_html__( 'Note: ', 'wp-graphql-rank-math' ),
							esc_html( $note ),
						);
					}
					?>
				</p>
			</div>
				<?php
			}
		);
	}
}

// Initialize the plugin.
add_action(
	'graphql_init',
	'WPGraphQL\RankMath\init'
);

================
File: LICENSE
================
GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.

================
File: CHANGELOG.md
================
# Changelog

## [Unreleased]

- dev: Add GraphQL Debug message to response when attempting to use `Page.seo` for the Posts Archive. H/t @amoyanoakqa
- chore: Update Composer dev-deps.

## [0.3.2]

This _minor_ release fixes a fatal error when trying to resolve SEO data from private `Post` models.

- fix: Use `Post::$databaseId` to prevent fatal errors on private `contentNode`s. H/t @MonPetitUd

## [0.3.1]

This _minor_ release fixes several bugs and improves compatibility with WPGraphQL for WooCommerce.

- fix: Fix interface conflicts `Product.` and `ProductVariation.seo` types with WPGraphQL for WooCommerce. H/t @robbiebel
- fix: Prevent fatal errors when resolving custom `seo.openGraph` schemas by improving type handling. H/t @juniorzenb
- fix: Expose `RankMathSeo.canonicalUrl` to unauthenticated users. H/t @marziolek
- fix: Check if classes are loaded by a different autoloader before attempting to autoload them.
- chore: Update Composer dev-deps.
- tests: fix namespaces for Codeception tests.
- ci: test plugin compatibility with WordPress 6.6.1.
- ci: Remove WP < 6.3 from GitHub Actions tests for RankMath 1.0.218+ compatibility.
- ci: add `INCLUDE_EXTENSIONS` to `.env` for installing external plugins (woocommerce, wp-graphql-woocommerce).
- ci: replace uses of deprecated `docker-compose` with `docker compose`.

## [0.3.0]

This _major_ release simplifies the GraphQL schema by narrowing the `seo` field types to their implementations. We've also bumped the minimum version of WPGraphQL to v1.26.0 and refactored the `RedirectionConnectionResolver` to use the improved lifecycle methods introduced in that release.

### Upgrade Notes

This release contains breaking changes to the schema. Instead of the `seo` field returning a generic `RankMathSeo` object, it now returns a more specific object based on the node type. For example, a `Post` node will return a `RankMathPostObjectSeo` object, while a `Category` node will return a `RankMathCategoryTermSeo` object.

In _most_ cases, you should not need to update your queries, as the schema should resolve the correct type based on the node type. However, if you are using inline fragments on the `seo` field inside your query that are not actually resolvable, you will need to remove them from your queries.

E.g.

```graphql
query GetContentNodeSeo {
  contentNodes {
    nodes {
      ... on Post {
        seo {
          # The old way will still work,
          # but is now redundant.
          ... on RankMathPostObjectSeo {
            ...MyPostSeoFragment
          }

          # This will now also work, and is the preferred way,
          # since `seo` is always a `RankMathPostObjectSeo` type.
          ...MyPostSeoFragment

          # This needs to be removed, since `Post` isnt a `User`
          ... on RankMathUserSeo {
            ...MyUserSeoFragment
          }
        }
      }
    }
  }
}
```

### Breaking Schema Changes
- Field `Category.seo` changed type from `RankMathSeo` to `RankMathCategoryTermSeo`
- Field `ContentNode.seo` changed type from `RankMathSeo` to `RankMathContentNodeSeo`
- Field `HierarchicalContentNode.seo` changed type from `RankMathSeo` to `RankMathContentNodeSeo`
- Field `MediaItem.seo` changed type from `RankMathSeo` to `RankMathMediaItemObjectSeo`
- Field `Page.seo` changed type from `RankMathSeo` to `RankMathPageObjectSeo`
- Field `Post.seo` changed type from `RankMathSeo` to `RankMathPostObjectSeo`
- Field `PostFormat.seo` changed type from `RankMathSeo` to `RankMathPostFormatTermSeo`
- Field `Tag.seo` changed type from `RankMathSeo` to `RankMathTagTermSeo`
- Field `User.seo` changed type from `RankMathSeo` to `RankMathUserSeo`

### What's Changed

- feat!: Narrow `seo` field types to their implementations.
- fix: Correctly resolve `rankMathSettings.homepage.description` field. Props @offminded üôå
- dev: Update `RedirectionConnectionResolver` for v1.26.0 compatibility.
- chore!: Bump minimum supported WPGraphQL version to v1.26.0.
- chore: Update Composer dev-dependencies to latest versions and address uncovered lints.
- chore: Update Strauss to v0.19.1
- tests: Update compatibility with `wp-graphql-test-case@3.0.1`.


## [0.2.0]

This _major_ release refactors the plugin's root files to use the `WPGraphQL/RankMath` namespace. We've also added explicit support for WordPress 6.5 (including the new Plugin Dependencies feature), squashed a few bugs, and more.

> **Note:* 

> Although this release technically contains breaking changes, these changes are limited to developers directly extending the wp-graphql-rank-math.php, activation.php, deactivation.php files, and the WPGraphQL\RankMath\Main class.
> If you are using the plugin as intended, you should not experience any issues when upgrading.

### What's changed

- feat: Add plugin dependencies header.
- fix: Improve handling of `ContentTypeSeo` and prevent fatal error when generating breadcrumbs. H/t @MonPetitUd
- fix: Plugin versions in dependency check logic is now in sync with the version requirements.
- fix: Update the return type of the `type` field in the `Redirection` model to correctly return a `?string`.
- chore!: Add `WPGraphQL/RankMath` namespace to root-level files ( `activation.php`, `deactivation.php`, `wp-graphql-rank-math.php` ).
- chore: Declare `strict_types` in all PHP files.
- chore: Refactor autoloader logic to `Autoloader` class.
- chore: Update Composer dev-deps and fix newly-surfaced PHPCS smells.
- chore: Implement PHPStan strict rules.
- chore: Update WPGraphQL Plugin Boilerplate to v0.1.0.
- ci: Update GitHub Actions to latest versions.
- ci: Test plugin compatibility with WordPress 6.5.0.
- ci: Update Strauss to v0.17.0

## v0.1.1

This _minor_ release adds support for more social fields in the `RankMathSocialMetaSettings` and `RankMathUserSeo` types. Additionally, it fixes a bug where the `seo.openGraph.image` field would fail to resolve if provided a string image.

There are **no breaking changes**.

### What's changed

- feat: Expose `additionalProfiles` field on `RankMathSocialMetaSettings`. props: @colis üôå
- feat: Expose `facebookProfileUrl`, `twitterUserName`, and `additionalProfiles` social fields on `RankMathUserSeo`. props: @colis üôå
- fix: Correctly resolve `seo.openGraph.image` field when parsed value is a string.

## v0.1.0

This _minor_ release bumps the plugin version to 0.1.0! However, there are **no breaking changes** in this release.

Additionally, we fixed a few bugs regarding `seo.openGraph` resolution, and deprecated a setting that was removed in RankMath v1.0.211.

The reason for the version bump is to make it easier to update future releases in accordance with our [versioning policy](README.md#updating-and-versioning). While the plugin version number is indicative of the (projected) schema maturity and not the underlying code (which has been used in enteprise production environments for almost two years), the new features and improvements that would warrant major changes to the schema are currently blocked upstream. By bumping to v0.1.0, we can continue to push patch releases in the meantime without users having to worry about breaking changes.

### What's changed

- fix: Deprecate `rankMathSettings.sitemaps.general.canPingSearchEngines`, as it was removed in RankMath v1.0.211.
- fix: Improve SEO `head` data fetching to load Rank Math modules more consistently.
- fix: Correctly parse OG product meta data when resolving `seo.OpenGraph`. H/t @joanpzen
- chore: Pin WPBrowser to v3.4.x to avoid breaking changes in v3.5+.
- ci: Test plugin compatibility against WordPress 6.4.2

This release was sponsored by [Red Rocks Web Development](https://redrockswebdevelopment.com/) üòç.

## v0.0.16

- fix: Correctly parse excluded Post/Term IDs when returning nodes for Sitemap. Props @marcinkrzeminski
- chore: Update Composer dev-dependencies.
- chore!: Bump minimum supported WPGraphQL version to v1.14.0.
- chore!: Bump minimum supported RankMath version to v1.0.201.
- chore!: Bump minimum supported WordPress version to v6.0.
- ci: Test Plugin Compatibility with WP 6.3.2 and PHP 8.2.

## v0.0.15

- chore: Update Composer dev-dependencies.
- chore: Update WPGraphQL Coding Standards to v2.0.0-beta and lint.
- chore: Fix minimum supported WordPress version to be 5.6, which is the minimum requirement for RankMath 1.0.90.
- ci: Test Plugin compatibility with WordPress 6.3.

## v0.0.14

- fix: Fetch the correct SEO data when resolving custom taxonomy terms. Props @lucguerraz
- dev!: Move `SEO::$global_authordata` property to the `UserSeo` model and make nullable.
- dev: Move `seo.breadcrumbs` resolution from the `RankMathSeo` interface to the `SEO` model.
- chore: Update Composer dev-dependencies.

## v0.0.13

- feat: Expose Redirections to the GraphQL schema.
- dev: Convert HTML entities for `breadcrumbTitle`, `description`, and `title` fields to their corresponding characters. H/t @sdegetaus
- chore: Implement `axepress/wp-graphql-cs` ruleset for PHP_CodeSniffer.
- chore: Update Composer dependencies.
- docs: Relocate query docs to `docs/reference/queries.md`, and add docs on querying redirections, and included WordPress actions and filters.

## v0.0.12

- fix: Use correct post type when querying for `ContentNodeSeo` on revisions. Props @idflood
- dev: Show admin notice when conflicting `wp-graphql-yoast-seo` is installed.
- chore: Update Strauss and Composer dev-dependencies to latest versions.
- ci: Test plugin compatibility with WordPress 6.2

## v0.0.11

- fix: Pass necessary data to resolve `OpenGraphMeta.image` field.
- chore: Update Composer dev-dependencies.

## v0.0.10

- dev: Check plugin dependency versions.
- dev: Namespace Composer dependencies with Strauss.
- dev: Wrap global functions in `function_exists()` checks.
- chore: Update WPGraphQL Plugin Boilerplate dependency to `v0.0.8`.
- ci: Add coverage reports to CodeClimate.
- tests: Regenerate `_support` classes.

## v0.0.9

- chore: update WPGraphQL Plugin Boilerplate dependency to v0.0.7.

## v0.0.8

- feat!: Rename `RankMathBaseSeoFields` interface to `RankMathSeo`.
- feat!: Change `seo` field type to `RankMathSeo` interface and implement with `NodeWithRankMathSeo` interface.
- feat!: Change `RankMathCommentNodeSeo` from GraphQL object to interface.
- fix!: Rename `playerStreamContentTypee` to `playerStreamContentType`.
- fix: Prevent duplicate OpenGraph meta tags by clearing `RankMath` hooks before fetching.
- fix: Allow `OpenGraphTwitter.appCountry` to resolve to `null`.
- fix: Set object globals for head in Model constructor.
- dev!: Rename `Seo::get_rest_url_param()` to `Seo::get_object_url()`
- dev: Add the following WordPress filters: `graphql_seo_model_class`, `graphql_seo_resolved_type_name`, `graphql_seo_types_with_seo`.
- dev: Locally generate `<head>` instead using RankMath's REST route.
- chore!: Bump minimum WPGraphQL version to v1.8.1.
- chore: Add explicit PHP 8.1 support.
- chore: Update composer dependencies.
- ci: Update GitHub Actions to latest versions.
- ci: Fix Xdebug version for PHP 7.4.
- ci: Update readme shields.
- tests: Set category when testing `ContentNodeSeoQueryCept` so `articleMeta.section` returns a value.

## v0.0.7

- fix: prevent type prefixes clashing with other AxeWP plugins.
- chore: Update composer dependencies.

## v0.0.6 - Better support for Head meta

- feat: setup WP globals in GraphQL models
- chore: update Composer deps.
- ci: use `STEP_DEBUG` flag on integration tests.
- tests: Use functional tests for `openGraph` and `fullHead` queries.
- docs: Add instructions for installing with Composer.

## v0.0.5 - Sitemap Support

- feat: Add support for `Sitemap` module.
- chore: Update Composer deps.

## v0.0.4 - OpenGraph Support

- feat: Add `openGraph` data to `BaseSeoFields`.
- chore: Update Composer deps.

## v0.0.3

- fix: Ensure `Model\Seo::focus_keywords` callback returns an array.
- fix: Keep `composer.lock` and production `vendor` deps in repository.
- dev!: Rename `Model\Seo::get_rest_url()` to `Model\Seo::get_rest_url_param()`
- dev!: Remove `Utils\Paper` class in favor of `RankMath\Paper::reset()`
- dev!: Bump minimum version of RankMath to `v1.0.90`
- dev: Replace `wp_remote_get()` call with `rest_do_request()` when querying `seo.fullHead`.
- dev: Update `composer.json` meta.
- ci: Update WP & PHP versions used for tests.
- chore: Update composer deps.
- chore: Remove unnecessary PHPStan `ignore` rule.
- chore: fix PHPCompatibilityWP `testVersion` when linting with `phpcs`.

## v0.0.2

- feat: Add `breadcrumbs` trail to `Seo`.

### Breaking schema changes

- dev: Field `RankMathGeneral.breadcrumbs` changed type from `RankMathBreadcrumbs` to `RankMathBreadcrumbsConfig`.

## v0.0.1

- Initial Release.

================
File: deactivation.php
================
<?php
/**
 * Deactivation Hook
 *
 * @package WPGraphql\RankMath
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath;

/**
 * Runs when WPGraphQL is de-activated.
 *
 * This cleans up data that WPGraphQL stores.
 */
function deactivation_callback(): callable {
	return static function (): void {

		// Fire an action when WPGraphQL is de-activating.
		do_action( 'graphql_seo_deactivate' );

		// Delete data during activation.
		delete_data();
	};
}

/**
 * Delete data on deactivation.
 */
function delete_data(): void {

	// Check if the plugin is set to delete data or not.
	$delete_data = graphql_seo_get_setting( 'delete_data_on_deactivate' );

	// Bail if not set to delete.
	if ( 'on' !== $delete_data ) {
		return;
	}

	// Delete plugin version.
	delete_option( 'wp_graphql_seo_version' );

	// Initialize the settings API.
	$settings = new \WPGraphQL\RankMath\Admin\Settings\Settings();
	$settings::register_settings();

	// Get all the registered settings fields.
	$fields = $settings::get_settings_api()->get_settings_fields();

	// Loop over the registered settings fields and delete the options.
	if ( ! empty( $fields ) && is_array( $fields ) ) {
		foreach ( $fields as $group => $fields ) {
			delete_option( $group );
		}
	}

	do_action( 'graphql_seo_delete_data' );
}

================
File: README.md
================
![WPGraphQL for Rank Math logo](./assets/header.png)

# WPGraphQL for Rank Math SEO

üö® NOTE: This is prerelease software. üö®

Adds WPGraphQL support for [Rank Math SEO](https://rankmath.com/). Built with [WPGraphQL Plugin Boilerplate](https://github.com/AxeWP/wp-graphql-boilerplate).

* [Join the WPGraphQL community on Slack.](https://join.slack.com/t/wp-graphql/shared_invite/zt-3vloo60z-PpJV2PFIwEathWDOxCTTLA)
* [Documentation](#usage)

-----

![Packagist License](https://img.shields.io/packagist/l/axepress/wp-graphql-rank-math?color=green) ![Packagist Version](https://img.shields.io/packagist/v/axepress/wp-graphql-rank-math?label=stable) ![GitHub commits since latest release (by SemVer)](https://img.shields.io/github/commits-since/AxeWP/wp-graphql-rank-math/0.3.2) ![GitHub forks](https://img.shields.io/github/forks/AxeWP/wp-graphql-rank-math?style=social) ![GitHub Repo stars](https://img.shields.io/github/stars/AxeWP/wp-graphql-rank-math?style=social)<br />
![CodeQuality](https://img.shields.io/github/actions/workflow/status/axewp/wp-graphql-rank-math/code-quality.yml?branch=develop&label=Code%20Quality)
![Integration Tests](https://img.shields.io/github/actions/workflow/status/axewp/wp-graphql-rank-math/integration-testing.yml?branch=develop&label=Integration%20Testing)
![Coding Standards](https://img.shields.io/github/actions/workflow/status/axewp/wp-graphql-rank-math/code-standard.yml?branch=develop&label=WordPress%20Coding%20Standards)
[![Coverage Status](https://coveralls.io/repos/github/AxeWP/wp-graphql-rank-math/badge.svg?branch=develop)](https://coveralls.io/github/AxeWP/wp-graphql-rank-math?branch=develop)
-----

## System Requirements

* PHP 7.4 - 8.2+
* WordPress 6.0+
* WPGraphQL 1.26.0+
* RankMath SEO 1.0.201+

## Quick Install

1. Install & activate [WPGraphQL](https://www.wpgraphql.com/).
2. Install & activate [Rank Math SEO](https://rankmath.com/).
3. Download the [latest release](https://github.com/AxeWP/wp-graphql-rank-math/releases) `.zip` file, upload it to your WordPress install, and activate the plugin.

### With Composer

```console
composer require axepress/wp-graphql-rank-math
```

## Updating and Versioning

As we work towards a 1.0 Release, we will need to introduce **numerous** breaking changes. We will do our best to group multiple breaking changes together in a single release, to make it easier on developers to keep their projects up-to-date.

Until we hit v1.0, we're using a modified version of [SemVer](https://semver.org/), where:

* v0.**x**: "Major" releases. These releases introduce new features, and _may_ contain breaking changes to either the PHP API or the GraphQL schema
* v0.x.**y**: "Minor" releases. These releases introduce new features and enhancements and address bugs. They _do not_ contain breaking changes.
* v0.x.y.**z**: "Patch" releases. These releases are reserved for addressing issue with the previous release only.

## Development and Support

Development of WPGraphQL for Rank Math SEO is provided by [AxePress Development](https://axepress.dev). Community contributions are _welcome_ and **encouraged**.

Basic support is provided for free, both in [this repo](https://github.com/axewp/wp-graphql-rank-math/issues) and at the #rank-math channel in [WPGraphQL Slack](https://join.slack.com/t/wp-graphql/shared_invite/zt-3vloo60z-PpJV2PFIwEathWDOxCTTLA).

Priority support and custom development is available to [our Sponsors](https://github.com/sponsors/AxeWP).

<a href="https://github.com/sponsors/AxeWP" alt="GitHub Sponsors"><img src="https://img.shields.io/static/v1?label=Sponsor%20Us%20%40%20AxeWP&message=%E2%9D%A4&logo=GitHub&color=%23fe8e86&style=for-the-badge" /></a>

## Supported Features

* [x] General Settings
* [x] Titles & Meta Settings
* [ ] üèó SEO data for
  * [x] Single posts, pages, attachments, and CPTs.
  * [x] Post Type archives.
  * [x] Categories, tags, and custom taxonomy terms.
  * [x] Authors (users)
  * [ ] Image attributes.
* [x] Sitemaps
* [x] Redirections
* [ ] 404 Monitor
* [ ] Local SEO and Knowledgegraph
* [ ] RSS Feeds

### Supported SEO data

* [x] Full head
* [x] RankMath SEO Score
* [x] Basic Meta Attributes: Title, Description, Robots, Focus Keywords, Canonical URL,
* [x] Breadcrumbs
* [ ] üèó JSON-LD
  * [x] Raw schema
  * [ ] Individual JSON-LD attributes
* [x] OpenGraph & Twitter

## Usage

### Getting Started ( üéØ You are here! )

* [System Requirements](#system-requirements)
* [Installation](#quick-install)

### Reference

* [GraphQL Queries](./docs/reference/queries.md)
* [WordPress Actions](./docs/reference/actions.md)
* [WordPress Filters](./docs/reference/filters.md)

## Testing

1. Update your `.env` file to your testing environment specifications.
2. Run `composer install-test-env` to create the test environment.
3. Run your test suite with [Codeception](https://codeception.com/docs/02-GettingStarted#Running-Tests).
E.g. `vendor/bin/codecept run wpunit` will run all WPUnit tests.

## Credits

<a href="https://github.com/AxeWP/wp-graphql-plugin-boilerplate">![Built with WPGraphQL Plugin Boilerplate](./assets/built-with.png)</a>

================
File: readme.txt
================
=== WPGraphQL for Rank Math ===
Contributors: axepress, justlevine
Tags: GraphQL, Gatsby, Headless, WPGraphQL, React, Rest, RankMath, Seo, Schema
Requires at least: 6.0
Tested up to: 6.6.1
Requires PHP: 7.4
Requires Plugins: wp-graphql, seo-by-rank-math
Requires WPGraphQL: 1.26.0
Stable tag: 0.3.2
License: GPL-3
License URI: https://www.gnu.org/licenses/gpl-3.0.html

== Description ==
== Upgrade Notice ==
== Frequently Asked Questions ==
== Screenshots ==
== Changelog ==
<a href="https://github.com/AxeWP/wp-graphql-rank-math/blob/main/CHANGELOG.md>Click here for full changelog.</a>

================
File: docker-compose.yml
================
version: '3.3'

services:
  app:
    depends_on:
      - app_db
    image: wp-graphql-rankmath:latest-wp${WP_VERSION-6.3}-php${PHP_VERSION-8.2}
    volumes:
      - '.:/var/www/html/wp-content/plugins/wp-graphql-rank-math'
      - './.log/app:/var/log/apache2'
    env_file:
      - .env
    environment:
      WP_URL: http://localhost:8091
      USING_XDEBUG: ${USING_XDEBUG:-}
    ports:
      - '8091:80'
    networks:
      local:

  app_db:
    image: mariadb:10
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE:      wordpress
      MYSQL_USER:          wordpress
      MYSQL_PASSWORD:      wordpress
    ports:
      - '3306'
    networks:
      testing:
      local:

  testing:
    depends_on:
      - app_db
    image: wp-graphql-rankmath-testing:latest-wp${WP_VERSION-6.3}-php${PHP_VERSION-8.2}
    volumes:
      - '.:/var/www/html/wp-content/plugins/wp-graphql-rank-math'
      - './.log/testing:/var/log/apache2'
    env_file:
      - .env
    environment:
      SUITES: ${SUITES:-}
    networks:
      testing:

networks:
  local:
  testing:

================
File: .coveralls.yml
================
service_name: php-coveralls
coverage_clover: tests/_output/coverage.xml
json_path: tests/_output/coveralls-upload.json

================
File: access-functions.php
================
<?php
/**
 * This file contains access functions for various class methods.
 *
 * @package WPGraphQL/RankMath
 */

declare( strict_types = 1 );

if ( ! function_exists( 'graphql_seo_get_setting' ) ) {
	/**
	 * Get an option value from the plugin settings.
	 *
	 * @param string $option_name   The key of the option to return.
	 * @param mixed  $default_value The default value the setting should return if no value is set.
	 * @param string $section_name  The settings group section that the option belongs to.
	 *
	 * @return mixed
	 */
	function graphql_seo_get_setting( string $option_name, $default_value = '', $section_name = 'graphql_seo_settings' ) {
		$section_fields = get_option( $section_name );

		/**
		 * Filter the section fields
		 *
		 * @param array  $section_fields The values of the fields stored for the section
		 * @param string $section_name   The name of the section
		 * @param mixed  $default_value  The default value for the option being retrieved
		 */
		$section_fields = apply_filters( 'graphql_seo_get_setting_section_fields', $section_fields, $section_name, $default_value );

		/**
		 * Get the value from the stored data, or return the default
		 */
		$value = isset( $section_fields[ $option_name ] ) ? $section_fields[ $option_name ] : $default_value;

		/**
		 * Filter the value before returning it
		 *
		 * @param mixed  $value          The value of the field
		 * @param mixed  $default_value  The default value if there is no value set
		 * @param string $option_name    The name of the option
		 * @param array  $section_fields The setting values within the section
		 * @param string $section_name   The name of the section the setting belongs to
		 */
		return apply_filters( 'graphql_seo_get_setting_section_field_value', $value, $default_value, $option_name, $section_fields, $section_name );
	}
}

================
File: composer.json
================
{
	"name": "axepress/wp-graphql-rank-math",
	"description": "Adds WPGraphQL support for RankMath SEO",
	"type": "wordpress-plugin",
	"license": "GPL-3.0-or-later",
	"authors": [
		{
			"name": "AxePress Development",
			"email": "support@axepress.dev",
			"homepage": "https://axepress.dev"
		},
		{
			"name": "David Levine",
			"role": "Developer"
		}
	],
	"support": {
		"email": "support@axepress.dev",
		"issues": "https://github.com/AxeWP/wp-graphql-rank-math/issues",
		"forum": "https://github.com/AxeWP/wp-graphql-rank-math/discussions"
	},
	"readme": "README.md",
	"funding": [
		{
			"type":"github",
			"url": "https://github.com/sponsors/AxeWP"
		}
	],
	"require": {
		"php": ">=7.4",
		"axepress/wp-graphql-plugin-boilerplate": "^0.1.0"
	},
	"require-dev": {
		"lucatume/wp-browser": "<3.5",
		"codeception/lib-innerbrowser": "^1.0",
		"codeception/module-asserts": "^1.0",
		"codeception/module-cli": "^1.0",
		"codeception/module-db": "^1.0",
		"codeception/module-filesystem": "^1.0",
		"codeception/module-phpbrowser": "^1.0",
		"codeception/module-rest": "^2.0",
		"codeception/module-webdriver": "^1.0",
		"codeception/phpunit-wrapper": "^9.0",
		"codeception/util-universalframework": "^1.0",
		"phpunit/phpunit": "^9.5",
		"wp-graphql/wp-graphql-testcase": "~3.4.0",
		"phpstan/phpstan": "^1.2",
		"phpstan/extension-installer": "^1.1",
		"szepeviktor/phpstan-wordpress": "^1.0",
		"axepress/wp-graphql-stubs": "^1.22.1",
		"axepress/wp-graphql-cs": "^2.0.0-beta",
		"phpcompatibility/php-compatibility": "dev-develop as 9.9.9",
		"wp-cli/wp-cli-bundle": "^2.8.1",
		"php-coveralls/php-coveralls": "^2.5"
	},
	"config": {
		"allow-plugins": {
			"dealerdirect/phpcodesniffer-composer-installer": true,
			"phpstan/extension-installer": true
		},
		"platform": {
			"php": "7.4"
		},
		"preferred-install": "dist",
		"sort-packages": true,
		"optimize-autoloader": true,
		"process-timeout": 0
	},
	"autoload": {
		"files": [
			"access-functions.php"
		],
		"psr-4": {
			"WPGraphQL\\RankMath\\": "src/"
		},
		"classmap": [
			"vendor-prefixed/"
		]
	},
	"autoload-dev": {
		"psr-4": {
			"Tests\\WPGraphQL\\RankMath\\": "tests/_support/"
		}
	},
	"extra": {
		"strauss": {
			"target_directory": "vendor-prefixed",
			"namespace_prefix": "WPGraphQL\\RankMath\\Vendor\\",
			"classmap_prefix": "WPGraphQL_RankMath_",
			"constant_prefix": "WPGRAPHQL_SEO_",
			"include_modified_date": false,
			"delete_vendor_packages": true,
			"packages": [
				"axepress/wp-graphql-plugin-boilerplate"
			]
		}
	},
	"scripts": {
		"install-test-env": "bash bin/install-test-env.sh",
		"install-stan-env": "bash bin/install-stan-env.sh",
		"docker-build": "bash bin/run-docker.sh build",
		"docker-run": "bash bin/run-docker.sh run",
		"docker-destroy": "docker compose down",
		"build-and-run": [
			"@docker-build",
			"@docker-run"
		],
		"build-app": "@docker-build -a",
		"build-test": "@docker-build -t",
		"run-app": "@docker-run -a",
		"run-test": "@docker-run -t",
		"lint": "vendor/bin/phpcs",
		"phpcs-i": [
			"php ./vendor/bin/phpcs -i"
		],
		"check-cs": [
			"php ./vendor/bin/phpcs"
		],
		"fix-cs": [
			"php ./vendor/bin/phpcbf"
		],
		"phpstan": [
			"vendor/bin/phpstan analyze --ansi --memory-limit=1G"
		],
		"strauss-install": [
			"test -f ./bin/strauss.phar || curl -o bin/strauss.phar -L -C - https://github.com/BrianHenryIE/strauss/releases/download/0.19.1/strauss.phar"
		],
		"strauss": [
			"@strauss-install",
			"@php bin/strauss.phar",
			"composer dump-autoload --optimize"
		],
		"post-install-cmd": [
			"@strauss"
		],
		"post-update-cmd": [
			"@strauss"
		]
	}
}

================
File: codeception.dist.yml
================
namespace: Tests\WPGraphQL\RankMath
paths:
    tests: '%TESTS_DIR%'
    output: '%TESTS_OUTPUT%'
    data: '%TESTS_DATA%'
    support: '%TESTS_SUPPORT%'
    envs: '%TESTS_ENVS%'
params:
    - env
    - .env
actor_suffix: Tester
settings:
    colors: true
    memory_limit: 1024M
coverage:
    enabled: true
    remote: false
    c3_url: '%WP_URL%/wp-content/plugins/wp-graphql-rank-math/wp-graphql-rank-math.php/'
    include:
        - src/*
        - access-functions.php
    exclude:
        - vendor/*
    show_only_summary: false
extensions:
    enabled:
        - Codeception\Extension\RunFailed
    commands:
        - Codeception\Command\GenerateWPUnit
        - Codeception\Command\GenerateWPRestApi
        - Codeception\Command\GenerateWPRestController
        - Codeception\Command\GenerateWPRestPostTypeController
        - Codeception\Command\GenerateWPAjax
        - Codeception\Command\GenerateWPCanonical
        - Codeception\Command\GenerateWPXMLRPC
modules:
    config:
        WPDb:
            dsn: 'mysql:host=%DB_HOST%;dbname=%DB_NAME%'
            user: '%DB_USER%'
            password: '%DB_PASSWORD%'
            dump: 'tests/_data/dump.sql'
            populate: true
            cleanup: true
            waitlock: 0
            url: '%WP_URL%'
            urlReplacement: true
            tablePrefix: '%WP_TABLE_PREFIX%'
        WPBrowser:
            url: '%WP_URL%'
            wpRootFolder: '%WP_ROOT_FOLDER%'
            adminUsername: '%ADMIN_USERNAME%'
            adminPassword: '%ADMIN_PASSWORD%'
            adminPath: '/wp-admin'
            cookies: false
        REST:
            depends: WPBrowser
            url: '%WP_URL%'
        WPFilesystem:
            wpRootFolder: '%WP_ROOT_FOLDER%'
            plugins: '/wp-content/plugins'
            mu-plugins: '/wp-content/mu-plugins'
            themes: '/wp-content/themes'
            uploads: '/wp-content/uploads'
        WPLoader:
            wpRootFolder: '%WP_ROOT_FOLDER%'
            dbName: '%DB_NAME%'
            dbHost: '%DB_HOST%'
            dbUser: '%DB_USER%'
            dbPassword: '%DB_PASSWORD%'
            tablePrefix: '%WP_TABLE_PREFIX%'
            domain: '%WP_DOMAIN%'
            adminEmail: '%ADMIN_EMAIL%'
            title: 'Test'
            plugins:
                - wp-graphql/wp-graphql.php
                - seo-by-rank-math/rank-math.php
                - wp-graphql-rank-math/wp-graphql-rank-math.php
            activatePlugins:
                - seo-by-rank-math/rank-math.php
                - wp-graphql/wp-graphql.php
                - wp-graphql-rank-math/wp-graphql-rank-math.php
            configFile: 'tests/_data/config.php'

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Traits/TypeResolverTrait.php
================
<?php
/**
 * Trait for getting possible resolve types.
 *
 * @package AxeWP\GraphQL\Traits
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Traits;

use Closure;
use Error;
use WPGraphQL;

if ( ! trait_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Traits\TypeResolverTrait' ) ) {

	/**
	 * Trait - TypeResolverTrait
	 */
	trait TypeResolverTrait {
		/**
		 * The function used to resolve the Interface type in the `resolveType` callback.
		 */
		protected static function get_type_resolver(): Closure {
			/**
			 * @param mixed       $value The value from the resolver of the parent field.
			 */
			return static function ( $value ) {
				$type_name = static::get_resolved_type_name( $value );

				if ( empty( $type_name ) ) {
					throw new Error(
					// translators: the GraphQL interface type name.
						sprintf( esc_html__( 'The value passed to %s failed to resolve to a valid GraphQL type', 'wp-graphql-plugin-name' ), static::class )
					);
				}

				$type_registry = WPGraphQL::get_type_registry();

				return $type_registry->get_type( $type_name );
			};
		}

		/**
		 * Gets the name of the GraphQL type to that the interface/union resolves to.
		 *
		 * @param mixed $value The value from the resolver of the parent field.
		 */
		abstract public static function get_resolved_type_name( $value ): ?string;
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Traits/TypeNameTrait.php
================
<?php
/**
 * Trait for getting Type Names.
 *
 * @package AxeWP\GraphQL\Traits
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Traits;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Helper\Helper;
use Exception;

if ( ! trait_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Traits\TypeNameTrait' ) ) {

	/**
	 * Trait - TypeNameTrait
	 */
	trait TypeNameTrait {
		/**
		 * Gets the GraphQL type name.
		 *
		 * @throws \Exception When the implementing class has no type name.
		 */
		final public static function get_type_name(): string {
			if ( ! is_callable( [ static::class, 'type_name' ] ) ) {
				throw new Exception(
				// translators: the implementing class.
					sprintf( esc_html__( 'To use TypeNameTrait, a %s must implement a `type_name()` method.', 'wp-graphql-plugin-name' ), static::class )
				);
			}

			$type_name = static::type_name();

			$hook_prefix = Helper::hook_prefix();

			/**
			 * Filter the GraphQL type name.
			 *
			 * Useful for adding a namespace or preventing plugin conflicts.
			 *
			 * @param string $prefix the prefix for the type.
			 * @param string $type the GraphQL type name.
			 */
			return apply_filters( $hook_prefix . '_type_prefix', '', $type_name ) . $type_name; // phpcs:ignore WordPress.NamingConventions.PrefixAllGlobals
		}
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/FieldsType.php
================
<?php
/**
 * Abstract class to make it easy to register Fields to an existing type in WPGraphQL.
 *
 * @package AxeWP\GraphQL\Abstracts
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\GraphQLType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\Registrable;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithFields;

if ( ! class_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\FieldsType' ) ) {

	/**
	 * Class - FieldsType
	 */
	abstract class FieldsType implements GraphQLType, Registrable, TypeWithFields {
		/**
		 * {@inheritDoc}
		 */
		public static function init(): void {
			add_action( 'graphql_register_types', [ static::class, 'register' ] );
		}

		/**
		 * Defines the GraphQL type name registered in WPGraphQL.
		 */
		abstract protected static function type_name(): string;

		/**
		 * Gets the GraphQL type name.
		 */
		abstract public static function get_type_name(): string;

		/**
		 * Register Fields to the GraphQL Schema.
		 */
		public static function register(): void {
			register_graphql_fields( static::get_type_name(), static::get_fields() );
		}
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/EnumType.php
================
<?php
/**
 * Abstract class to make it easy to register Enum types to WPGraphQL.
 *
 * @package AxeWP\GraphQL\Abstracts
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts;

if ( ! class_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType' ) ) {

	/**
	 * Class - EnumType
	 */
	abstract class EnumType extends Type {
		/**
		 * Gets the Enum values configuration array.
		 *
		 * @return array<string,array{description:string,value:mixed,deprecationReason?:string}>
		 */
		abstract public static function get_values(): array;

		/**
		 * {@inheritDoc}
		 */
		public static function register(): void {
			register_graphql_enum_type( static::get_type_name(), static::get_type_config() );
		}

		/**
		 * {@inheritDoc}
		 */
		protected static function get_type_config(): array {
			$config = parent::get_type_config();

			$config['values'] = static::get_values();

			return $config;
		}
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/Type.php
================
<?php
/**
 * Abstract class to make it easy to register Types to WPGraphQL.
 *
 * @package AxeWP\GraphQL\Abstracts
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\GraphQLType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\Registrable;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Traits\TypeNameTrait;

if ( ! class_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\Type' ) ) {

	/**
	 * Class - Type
	 */
	abstract class Type implements GraphQLType, Registrable {
		use TypeNameTrait;

		/**
		 * {@inheritDoc}
		 */
		public static function init(): void {
			add_action( 'graphql_register_types', [ static::class, 'register' ] );
		}

		/**
		 * Defines the GraphQL type name registered in WPGraphQL.
		 */
		abstract protected static function type_name(): string;

		/**
		 * Gets the GraphQL type description.
		 */
		abstract public static function get_description(): string;

		/**
		 * Gets the $config array used to register the type to WPGraphQL.
		 *
		 * @return array<string,mixed>
		 */
		protected static function get_type_config(): array {
			return [
				'description'     => static::get_description(),
				'eagerlyLoadType' => static::should_load_eagerly(),
			];
		}

		/**
		 * Whether the type should be loaded eagerly by WPGraphQL. Defaults to false.
		 *
		 * Eager load should only be necessary for types that are not referenced directly (e.g. in Unions, Interfaces ).
		 */
		public static function should_load_eagerly(): bool {
			return false;
		}
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/ObjectType.php
================
<?php
/**
 * Abstract class to make it easy to register Object types to WPGraphQL.
 *
 * @package AxeWP\GraphQL\Abstracts
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithFields;

if ( ! class_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType' ) ) {

	/**
	 * Class - ObjectType
	 */
	abstract class ObjectType extends Type implements TypeWithFields {
		/**
		 * {@inheritDoc}
		 */
		public static function register(): void {
			register_graphql_object_type( static::get_type_name(), static::get_type_config() );
		}

		/**
		 * {@inheritDoc}
		 */
		protected static function get_type_config(): array {
			$config = parent::get_type_config();

			$config['fields'] = static::get_fields();

			if ( method_exists( static::class, 'get_connections' ) ) {
				$config['connections'] = static::get_connections();
			}

			if ( method_exists( static::class, 'get_interfaces' ) ) {
				$config['interfaces'] = static::get_interfaces();
			}

			return $config;
		}
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/UnionType.php
================
<?php
/**
 * Abstract class to make it easy to register Union types to WPGraphQL.
 *
 * @package AxeWP\GraphQL\Abstracts
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Traits\TypeResolverTrait;

if ( ! class_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\UnionType' ) ) {

	/**
	 * Class - UnionType
	 */
	abstract class UnionType extends Type {
		use TypeResolverTrait;

		/**
		 * Gets the array of possible GraphQL types that can be resolved to.
		 *
		 * @return string[]
		 */
		abstract public static function get_possible_types(): array;

		/**
		 * {@inheritDoc}
		 */
		public static function register(): void {
			register_graphql_union_type( static::get_type_name(), static::get_type_config() );
		}

		/**
		 * {@inheritDoc}
		 */
		protected static function get_type_config(): array {
			$config = parent::get_type_config();

			$config['typeNames']   = static::get_possible_types();
			$config['resolveType'] = static::get_type_resolver();

			return $config;
		}

		/**
		 * {@inheritDoc}
		 */
		public static function should_load_eagerly(): bool {
			return true;
		}
	}

}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/InterfaceType.php
================
<?php
/**
 * Abstract class to make it easy to register Interface types to WPGraphQL.
 *
 * @package AxeWP\GraphQL\Abstracts
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithFields;

if ( ! class_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\InterfaceType' ) ) {

	/**
	 * Class - InterfaceType
	 */
	abstract class InterfaceType extends Type implements TypeWithFields {
		/**
		 * {@inheritDoc}
		 */
		public static function register(): void {
			register_graphql_interface_type( static::get_type_name(), static::get_type_config() );
		}

		/**
		 * {@inheritDoc}
		 */
		protected static function get_type_config(): array {
			$config = parent::get_type_config();

			$config['fields'] = static::get_fields();

			if ( method_exists( static::class, 'get_type_resolver' ) ) {
				$config['resolveType'] = static::get_type_resolver();
			}

			if ( method_exists( static::class, 'get_interfaces' ) ) {
				$config['interfaces'] = static::get_interfaces();
			}

			return $config;
		}

		/**
		 * {@inheritDoc}
		 */
		public static function should_load_eagerly(): bool {
			return true;
		}
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/InputType.php
================
<?php
/**
 * Abstract class to make it easy to register Input types to WPGraphQL.
 *
 * @package AxeWP\GraphQL\Abstracts
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithInputFields;

if ( ! class_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\InputType' ) ) {

	/**
	 * Class - InputType
	 */
	abstract class InputType extends Type implements TypeWithInputFields {
		/**
		 * {@inheritDoc}
		 */
		public static function register(): void {
			register_graphql_input_type( static::get_type_name(), static::get_type_config() );
		}

		/**
		 * {@inheritDoc}
		 */
		protected static function get_type_config(): array {
			$config = parent::get_type_config();

			$config['fields'] = static::get_fields();

			return $config;
		}
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/ConnectionType.php
================
<?php
/**
 * Abstract class to make it easy to register Connection types to WPGraphQL.
 *
 * @package AxeWP\GraphQL\Abstracts
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\GraphQLType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\Registrable;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Traits\TypeNameTrait;

if ( ! class_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ConnectionType' ) ) {

	/**
	 * Class - ConnectionType
	 *
	 * @phpstan-type ConnectionConfig array{fromType:string,
	 *   fromFieldName: string,
	 *   resolve: callable,
	 *   oneToOne?: bool,
	 *   toType?: string,
	 *   connectionArgs?: array<string,array{
	 *     type: string|array<string,string | array<string,string>>,
	 *     description: string,
	 *     defaultValue?: mixed
	 *   }>,
	 *   connectionFields?: array<string,array{
	 *     type: string|array<string,string | array<string,string>>,
	 *     description: string,
	 *     args?: array<string,array{
	 *       type: string|array<string,string | array<string,string>>,
	 *       description: string,
	 *       defaultValue?: mixed,
	 *     }>,
	 *     resolve?: callable,
	 *     deprecationReason?: string,
	 *   }>,
	 * }
	 */
	abstract class ConnectionType implements GraphQLType, Registrable {
		use TypeNameTrait;

		/**
		 * {@inheritDoc}
		 */
		public static function init(): void {
			add_action( 'graphql_register_types', [ static::class, 'register' ] );
		}

		/**
		 * Defines all possible connection args for the GraphQL type.
		 *
		 * @return array<string,array{type:string|array<string,string|array<string,string>>,description:string,defaultValue?:mixed}>
		 */
		abstract protected static function connection_args(): array;

		/**
		 * Gets the $config array used to register the connection to the GraphQL type.
		 *
		 * @param ConnectionConfig $config The connection config array.
		 *
		 * @return ConnectionConfig
		 */
		protected static function get_connection_config( $config ): array {
			return array_merge(
				[
					'toType' => static::get_type_name(),
				],
				$config
			);
		}

		/**
		 * Returns a filtered array of connection args.
		 *
		 * @param ?string[] $filter_by an array of specific connections to return.
		 *
		 * @return array<string,array{type:string|array<string,string|array<string,string>>,description:string,defaultValue?:mixed}>
		 */
		final public static function get_connection_args( ?array $filter_by = null ): array {
			$connection_args = static::connection_args();

			if ( empty( $filter_by ) ) {
				return $connection_args;
			}

			$filtered_args = [];
			foreach ( $filter_by as $filter ) {
				$filtered_args[ $filter ] = $connection_args[ $filter ];
			}

			return $filtered_args;
		}
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/MutationType.php
================
<?php
/**
 * Abstract class to make it easy to register Mutation types to WPGraphQL.
 *
 * @package AxeWP\GraphQL\Abstracts
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts;

if ( ! class_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\MutationType' ) ) {

	/**
	 * Class - MutationType
	 */
	abstract class MutationType extends Type {
		/**
		 * Gets the input fields for the mutation.
		 *
		 * @return array<string,array{type:string|array<string,string|array<string,string>>,description:string,defaultValue?:string}>
		 */
		abstract public static function get_input_fields(): array;

		/**
		 * Gets the fields for the type.
		 *
		 * @return array<string,array{type:string|array<string,string|array<string,string>>,description:string,args?:array<string,array{type:string|array<string,string|array<string,string>>,description:string,defaultValue?:mixed}>,resolve?:callable,deprecationReason?:string}>
		 */
		abstract public static function get_output_fields(): array;

		/**
		 * Defines the mutation data modification closure.
		 */
		abstract public static function mutate_and_get_payload(): callable;

		/**
		 * Register mutations to the GraphQL Schema.
		 */
		public static function register(): void {
			register_graphql_mutation( static::get_type_name(), static::get_type_config() );
		}

		/**
		 * {@inheritDoc}
		 */
		public static function get_description(): string {
			return '';
		}

		/**
		 * {@inheritDoc}
		 */
		protected static function get_type_config(): array {
			$config = parent::get_type_config();

			$config['inputFields']         = static::get_input_fields();
			$config['outputFields']        = static::get_output_fields();
			$config['mutateAndGetPayload'] = static::mutate_and_get_payload();

			return $config;
		}
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Helper/Helper.php
================
<?php
/**
 * Helper functions.
 *
 * @package AxeWP\GraphQL\Helper
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Helper;

if ( ! class_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Helper\Helper' ) ) {

	/**
	 * Class - Helper
	 */
	class Helper {
		/**
		 * The hook prefix for the plugin.
		 *
		 * @var string
		 */
		public static string $hook_prefix;

		/**
		 * Sets the hook prefix for the plugin.
		 *
		 * @param string $hook_prefix the hook prefix to use for this plugin.
		 */
		public static function set_hook_prefix( string $hook_prefix ): void {
			self::$hook_prefix = $hook_prefix;
		}

		/**
		 * Gets the hook prefix for the plugin.
		 */
		public static function hook_prefix(): string {
			if ( empty( self::$hook_prefix ) ) {
				_doing_it_wrong( __METHOD__, esc_html__( 'The hook prefix has not been set. Use set_hook_prefix() to set it.', 'wp-graphql-plugin-name' ), '0.0.8' );

				self::$hook_prefix = defined( 'AXEWP_PB_HOOK_PREFIX' ) ? AXEWP_PB_HOOK_PREFIX : 'graphql_pb';
			}

			return self::$hook_prefix;
		}
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithConnections.php
================
<?php
/**
 * Interface for for classes that register a GraphQL type with connections to the GraphQL schema.
 *
 * @package AxeWP\GraphQL\Interfaces
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces;

if ( ! interface_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithConnections' ) ) {

	/**
	 * Interface - TypeWithConnections
	 */
	interface TypeWithConnections extends GraphQLType {
		/**
		 * Gets the properties for the type.
		 *
		 * @return array<string,array{toType:string,description:string,args?:array<string,array{type:string|array<string,string|array<string,string>>,description:string,defaultValue?:mixed}>,connectionInterfaces?:string[],oneToOne?:bool,resolve?:callable}>
		 */
		public static function get_connections(): array;
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/GraphQLType.php
================
<?php
/**
 * Interface for classes that register a GraphQL type to the GraphQL schema.
 *
 * @package AxeWP\GraphQL\Interfaces
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces;

if ( ! interface_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\GraphQLType' ) ) {

	/**
	 * Interface - GraphQLType
	 */
	interface GraphQLType {
		/**
		 * Register connections to the GraphQL Schema.
		 */
		public static function register(): void;
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithInterfaces.php
================
<?php
/**
 * Interface for for classes that register a GraphQL type with input fields to the GraphQL schema.
 *
 * @package AxeWP\GraphQL\Interfaces
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces;

if ( ! interface_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithInterfaces' ) ) {

	/**
	 * Interface - TypeWithInterfaces.
	 */
	interface TypeWithInterfaces extends GraphQLType {
		/**
		 * Gets the array of GraphQL interfaces that should be applied to the type.
		 *
		 * @return string[]
		 */
		public static function get_interfaces(): array;
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithInputFields.php
================
<?php
/**
 * Interface for for classes that register a GraphQL type with input fields to the GraphQL schema.
 *
 * @package AxeWP\GraphQL\Interfaces
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces;

if ( ! interface_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithInputFields' ) ) {

	/**
	 * Interface - TypeWithInputFields.
	 */
	interface TypeWithInputFields extends GraphQLType {
		/**
		 * Gets the input fields for the type.
		 *
		 * @return array<string,array{type:string|array<string,string|array<string,string>>,description:string,defaultValue?:string}>
		 */
		public static function get_fields(): array;
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/Registrable.php
================
<?php
/**
 * Interface for classes containing WordPress action/filter hooks.
 *
 * @package AxeWP\GraphQL\Interfaces
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces;

if ( ! interface_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\Registrable' ) ) {

	/**
	 * Interface - Registrable
	 */
	interface Registrable {
		/**
		 * Registers class methods to WordPress.
		 *
		 * WordPress actions/filters should be included here.
		 */
		public static function init(): void;
	}
}

================
File: vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithFields.php
================
<?php
/**
 * Interface for for classes that register a GraphQL type with fields to the GraphQL schema.
 *
 * @package AxeWP\GraphQL\Interfaces
 *
 * @license GPL-3.0-or-later
 * Modified by AxePress Development using {@see https://github.com/BrianHenryIE/strauss}.
 */

declare( strict_types=1 );

namespace WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces;

if ( ! interface_exists( '\WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithFields' ) ) {

	/**
	 * Interface - TypeWithFields.
	 */
	interface TypeWithFields extends GraphQLType {
		/**
		 * Gets the fields for the type.
		 *
		 * @return array<string,array{type:string|array<string,string|array<string,string>>,description:string,args?:array<string,array{type:string|array<string,string|array<string,string>>,description:string,defaultValue?:mixed}>,resolve?:callable,deprecationReason?:string}>
		 */
		public static function get_fields(): array;
	}
}

================
File: vendor/autoload.php
================
<?php

// autoload.php @generated by Composer

if (PHP_VERSION_ID < 50600) {
    if (!headers_sent()) {
        header('HTTP/1.1 500 Internal Server Error');
    }
    $err = 'Composer 2.3.0 dropped support for autoloading on PHP <5.6 and you are running '.PHP_VERSION.', please upgrade PHP or use Composer 2.2 LTS via "composer self-update --2.2". Aborting.'.PHP_EOL;
    if (!ini_get('display_errors')) {
        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {
            fwrite(STDERR, $err);
        } elseif (!headers_sent()) {
            echo $err;
        }
    }
    trigger_error(
        $err,
        E_USER_ERROR
    );
}

require_once __DIR__ . '/composer/autoload_real.php';

return ComposerAutoloaderInitef0cd05dc2a2aa01b422714ff9fb0143::getLoader();

================
File: vendor/composer/autoload_namespaces.php
================
<?php

// autoload_namespaces.php @generated by Composer

$vendorDir = dirname(__DIR__);
$baseDir = dirname($vendorDir);

return array(
);

================
File: vendor/composer/LICENSE
================
Copyright (c) Nils Adermann, Jordi Boggiano

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================
File: vendor/composer/ClassLoader.php
================
<?php

/*
 * This file is part of Composer.
 *
 * (c) Nils Adermann <naderman@naderman.de>
 *     Jordi Boggiano <j.boggiano@seld.be>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Composer\Autoload;

/**
 * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.
 *
 *     $loader = new \Composer\Autoload\ClassLoader();
 *
 *     // register classes with namespaces
 *     $loader->add('Symfony\Component', __DIR__.'/component');
 *     $loader->add('Symfony',           __DIR__.'/framework');
 *
 *     // activate the autoloader
 *     $loader->register();
 *
 *     // to enable searching the include path (eg. for PEAR packages)
 *     $loader->setUseIncludePath(true);
 *
 * In this example, if you try to use a class in the Symfony\Component
 * namespace or one of its children (Symfony\Component\Console for instance),
 * the autoloader will first look for the class under the component/
 * directory, and it will then fallback to the framework/ directory if not
 * found before giving up.
 *
 * This class is loosely based on the Symfony UniversalClassLoader.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jordi Boggiano <j.boggiano@seld.be>
 * @see    https://www.php-fig.org/psr/psr-0/
 * @see    https://www.php-fig.org/psr/psr-4/
 */
class ClassLoader
{
    /** @var \Closure(string):void */
    private static $includeFile;

    /** @var string|null */
    private $vendorDir;

    // PSR-4
    /**
     * @var array<string, array<string, int>>
     */
    private $prefixLengthsPsr4 = array();
    /**
     * @var array<string, list<string>>
     */
    private $prefixDirsPsr4 = array();
    /**
     * @var list<string>
     */
    private $fallbackDirsPsr4 = array();

    // PSR-0
    /**
     * List of PSR-0 prefixes
     *
     * Structured as array('F (first letter)' => array('Foo\Bar (full prefix)' => array('path', 'path2')))
     *
     * @var array<string, array<string, list<string>>>
     */
    private $prefixesPsr0 = array();
    /**
     * @var list<string>
     */
    private $fallbackDirsPsr0 = array();

    /** @var bool */
    private $useIncludePath = false;

    /**
     * @var array<string, string>
     */
    private $classMap = array();

    /** @var bool */
    private $classMapAuthoritative = false;

    /**
     * @var array<string, bool>
     */
    private $missingClasses = array();

    /** @var string|null */
    private $apcuPrefix;

    /**
     * @var array<string, self>
     */
    private static $registeredLoaders = array();

    /**
     * @param string|null $vendorDir
     */
    public function __construct($vendorDir = null)
    {
        $this->vendorDir = $vendorDir;
        self::initializeIncludeClosure();
    }

    /**
     * @return array<string, list<string>>
     */
    public function getPrefixes()
    {
        if (!empty($this->prefixesPsr0)) {
            return call_user_func_array('array_merge', array_values($this->prefixesPsr0));
        }

        return array();
    }

    /**
     * @return array<string, list<string>>
     */
    public function getPrefixesPsr4()
    {
        return $this->prefixDirsPsr4;
    }

    /**
     * @return list<string>
     */
    public function getFallbackDirs()
    {
        return $this->fallbackDirsPsr0;
    }

    /**
     * @return list<string>
     */
    public function getFallbackDirsPsr4()
    {
        return $this->fallbackDirsPsr4;
    }

    /**
     * @return array<string, string> Array of classname => path
     */
    public function getClassMap()
    {
        return $this->classMap;
    }

    /**
     * @param array<string, string> $classMap Class to filename map
     *
     * @return void
     */
    public function addClassMap(array $classMap)
    {
        if ($this->classMap) {
            $this->classMap = array_merge($this->classMap, $classMap);
        } else {
            $this->classMap = $classMap;
        }
    }

    /**
     * Registers a set of PSR-0 directories for a given prefix, either
     * appending or prepending to the ones previously set for this prefix.
     *
     * @param string              $prefix  The prefix
     * @param list<string>|string $paths   The PSR-0 root directories
     * @param bool                $prepend Whether to prepend the directories
     *
     * @return void
     */
    public function add($prefix, $paths, $prepend = false)
    {
        $paths = (array) $paths;
        if (!$prefix) {
            if ($prepend) {
                $this->fallbackDirsPsr0 = array_merge(
                    $paths,
                    $this->fallbackDirsPsr0
                );
            } else {
                $this->fallbackDirsPsr0 = array_merge(
                    $this->fallbackDirsPsr0,
                    $paths
                );
            }

            return;
        }

        $first = $prefix[0];
        if (!isset($this->prefixesPsr0[$first][$prefix])) {
            $this->prefixesPsr0[$first][$prefix] = $paths;

            return;
        }
        if ($prepend) {
            $this->prefixesPsr0[$first][$prefix] = array_merge(
                $paths,
                $this->prefixesPsr0[$first][$prefix]
            );
        } else {
            $this->prefixesPsr0[$first][$prefix] = array_merge(
                $this->prefixesPsr0[$first][$prefix],
                $paths
            );
        }
    }

    /**
     * Registers a set of PSR-4 directories for a given namespace, either
     * appending or prepending to the ones previously set for this namespace.
     *
     * @param string              $prefix  The prefix/namespace, with trailing '\\'
     * @param list<string>|string $paths   The PSR-4 base directories
     * @param bool                $prepend Whether to prepend the directories
     *
     * @throws \InvalidArgumentException
     *
     * @return void
     */
    public function addPsr4($prefix, $paths, $prepend = false)
    {
        $paths = (array) $paths;
        if (!$prefix) {
            // Register directories for the root namespace.
            if ($prepend) {
                $this->fallbackDirsPsr4 = array_merge(
                    $paths,
                    $this->fallbackDirsPsr4
                );
            } else {
                $this->fallbackDirsPsr4 = array_merge(
                    $this->fallbackDirsPsr4,
                    $paths
                );
            }
        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {
            // Register directories for a new namespace.
            $length = strlen($prefix);
            if ('\\' !== $prefix[$length - 1]) {
                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
            }
            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
            $this->prefixDirsPsr4[$prefix] = $paths;
        } elseif ($prepend) {
            // Prepend directories for an already registered namespace.
            $this->prefixDirsPsr4[$prefix] = array_merge(
                $paths,
                $this->prefixDirsPsr4[$prefix]
            );
        } else {
            // Append directories for an already registered namespace.
            $this->prefixDirsPsr4[$prefix] = array_merge(
                $this->prefixDirsPsr4[$prefix],
                $paths
            );
        }
    }

    /**
     * Registers a set of PSR-0 directories for a given prefix,
     * replacing any others previously set for this prefix.
     *
     * @param string              $prefix The prefix
     * @param list<string>|string $paths  The PSR-0 base directories
     *
     * @return void
     */
    public function set($prefix, $paths)
    {
        if (!$prefix) {
            $this->fallbackDirsPsr0 = (array) $paths;
        } else {
            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;
        }
    }

    /**
     * Registers a set of PSR-4 directories for a given namespace,
     * replacing any others previously set for this namespace.
     *
     * @param string              $prefix The prefix/namespace, with trailing '\\'
     * @param list<string>|string $paths  The PSR-4 base directories
     *
     * @throws \InvalidArgumentException
     *
     * @return void
     */
    public function setPsr4($prefix, $paths)
    {
        if (!$prefix) {
            $this->fallbackDirsPsr4 = (array) $paths;
        } else {
            $length = strlen($prefix);
            if ('\\' !== $prefix[$length - 1]) {
                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
            }
            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
            $this->prefixDirsPsr4[$prefix] = (array) $paths;
        }
    }

    /**
     * Turns on searching the include path for class files.
     *
     * @param bool $useIncludePath
     *
     * @return void
     */
    public function setUseIncludePath($useIncludePath)
    {
        $this->useIncludePath = $useIncludePath;
    }

    /**
     * Can be used to check if the autoloader uses the include path to check
     * for classes.
     *
     * @return bool
     */
    public function getUseIncludePath()
    {
        return $this->useIncludePath;
    }

    /**
     * Turns off searching the prefix and fallback directories for classes
     * that have not been registered with the class map.
     *
     * @param bool $classMapAuthoritative
     *
     * @return void
     */
    public function setClassMapAuthoritative($classMapAuthoritative)
    {
        $this->classMapAuthoritative = $classMapAuthoritative;
    }

    /**
     * Should class lookup fail if not found in the current class map?
     *
     * @return bool
     */
    public function isClassMapAuthoritative()
    {
        return $this->classMapAuthoritative;
    }

    /**
     * APCu prefix to use to cache found/not-found classes, if the extension is enabled.
     *
     * @param string|null $apcuPrefix
     *
     * @return void
     */
    public function setApcuPrefix($apcuPrefix)
    {
        $this->apcuPrefix = function_exists('apcu_fetch') && filter_var(ini_get('apc.enabled'), FILTER_VALIDATE_BOOLEAN) ? $apcuPrefix : null;
    }

    /**
     * The APCu prefix in use, or null if APCu caching is not enabled.
     *
     * @return string|null
     */
    public function getApcuPrefix()
    {
        return $this->apcuPrefix;
    }

    /**
     * Registers this instance as an autoloader.
     *
     * @param bool $prepend Whether to prepend the autoloader or not
     *
     * @return void
     */
    public function register($prepend = false)
    {
        spl_autoload_register(array($this, 'loadClass'), true, $prepend);

        if (null === $this->vendorDir) {
            return;
        }

        if ($prepend) {
            self::$registeredLoaders = array($this->vendorDir => $this) + self::$registeredLoaders;
        } else {
            unset(self::$registeredLoaders[$this->vendorDir]);
            self::$registeredLoaders[$this->vendorDir] = $this;
        }
    }

    /**
     * Unregisters this instance as an autoloader.
     *
     * @return void
     */
    public function unregister()
    {
        spl_autoload_unregister(array($this, 'loadClass'));

        if (null !== $this->vendorDir) {
            unset(self::$registeredLoaders[$this->vendorDir]);
        }
    }

    /**
     * Loads the given class or interface.
     *
     * @param  string    $class The name of the class
     * @return true|null True if loaded, null otherwise
     */
    public function loadClass($class)
    {
        if ($file = $this->findFile($class)) {
            $includeFile = self::$includeFile;
            $includeFile($file);

            return true;
        }

        return null;
    }

    /**
     * Finds the path to the file where the class is defined.
     *
     * @param string $class The name of the class
     *
     * @return string|false The path if found, false otherwise
     */
    public function findFile($class)
    {
        // class map lookup
        if (isset($this->classMap[$class])) {
            return $this->classMap[$class];
        }
        if ($this->classMapAuthoritative || isset($this->missingClasses[$class])) {
            return false;
        }
        if (null !== $this->apcuPrefix) {
            $file = apcu_fetch($this->apcuPrefix.$class, $hit);
            if ($hit) {
                return $file;
            }
        }

        $file = $this->findFileWithExtension($class, '.php');

        // Search for Hack files if we are running on HHVM
        if (false === $file && defined('HHVM_VERSION')) {
            $file = $this->findFileWithExtension($class, '.hh');
        }

        if (null !== $this->apcuPrefix) {
            apcu_add($this->apcuPrefix.$class, $file);
        }

        if (false === $file) {
            // Remember that this class does not exist.
            $this->missingClasses[$class] = true;
        }

        return $file;
    }

    /**
     * Returns the currently registered loaders keyed by their corresponding vendor directories.
     *
     * @return array<string, self>
     */
    public static function getRegisteredLoaders()
    {
        return self::$registeredLoaders;
    }

    /**
     * @param  string       $class
     * @param  string       $ext
     * @return string|false
     */
    private function findFileWithExtension($class, $ext)
    {
        // PSR-4 lookup
        $logicalPathPsr4 = strtr($class, '\\', DIRECTORY_SEPARATOR) . $ext;

        $first = $class[0];
        if (isset($this->prefixLengthsPsr4[$first])) {
            $subPath = $class;
            while (false !== $lastPos = strrpos($subPath, '\\')) {
                $subPath = substr($subPath, 0, $lastPos);
                $search = $subPath . '\\';
                if (isset($this->prefixDirsPsr4[$search])) {
                    $pathEnd = DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $lastPos + 1);
                    foreach ($this->prefixDirsPsr4[$search] as $dir) {
                        if (file_exists($file = $dir . $pathEnd)) {
                            return $file;
                        }
                    }
                }
            }
        }

        // PSR-4 fallback dirs
        foreach ($this->fallbackDirsPsr4 as $dir) {
            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {
                return $file;
            }
        }

        // PSR-0 lookup
        if (false !== $pos = strrpos($class, '\\')) {
            // namespaced class name
            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)
                . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);
        } else {
            // PEAR-like class name
            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;
        }

        if (isset($this->prefixesPsr0[$first])) {
            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {
                if (0 === strpos($class, $prefix)) {
                    foreach ($dirs as $dir) {
                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
                            return $file;
                        }
                    }
                }
            }
        }

        // PSR-0 fallback dirs
        foreach ($this->fallbackDirsPsr0 as $dir) {
            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
                return $file;
            }
        }

        // PSR-0 include paths.
        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {
            return $file;
        }

        return false;
    }

    /**
     * @return void
     */
    private static function initializeIncludeClosure()
    {
        if (self::$includeFile !== null) {
            return;
        }

        /**
         * Scope isolated include.
         *
         * Prevents access to $this/self from included files.
         *
         * @param  string $file
         * @return void
         */
        self::$includeFile = \Closure::bind(static function($file) {
            include $file;
        }, null, null);
    }
}

================
File: vendor/composer/autoload_psr4.php
================
<?php

// autoload_psr4.php @generated by Composer

$vendorDir = dirname(__DIR__);
$baseDir = dirname($vendorDir);

return array(
    'WPGraphQL\\RankMath\\' => array($baseDir . '/src'),
    'AxeWP\\GraphQL\\' => array($vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src'),
);

================
File: vendor/composer/autoload_classmap.php
================
<?php

// autoload_classmap.php @generated by Composer

$vendorDir = dirname(__DIR__);
$baseDir = dirname($vendorDir);

return array(
    'AxeWP\\GraphQL\\Abstracts\\ConnectionType' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/ConnectionType.php',
    'AxeWP\\GraphQL\\Abstracts\\EnumType' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/EnumType.php',
    'AxeWP\\GraphQL\\Abstracts\\FieldsType' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/FieldsType.php',
    'AxeWP\\GraphQL\\Abstracts\\InputType' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/InputType.php',
    'AxeWP\\GraphQL\\Abstracts\\InterfaceType' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/InterfaceType.php',
    'AxeWP\\GraphQL\\Abstracts\\MutationType' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/MutationType.php',
    'AxeWP\\GraphQL\\Abstracts\\ObjectType' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/ObjectType.php',
    'AxeWP\\GraphQL\\Abstracts\\Type' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/Type.php',
    'AxeWP\\GraphQL\\Abstracts\\UnionType' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/UnionType.php',
    'AxeWP\\GraphQL\\Helper\\Helper' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Helper/Helper.php',
    'AxeWP\\GraphQL\\Interfaces\\GraphQLType' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/GraphQLType.php',
    'AxeWP\\GraphQL\\Interfaces\\Registrable' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/Registrable.php',
    'AxeWP\\GraphQL\\Interfaces\\TypeWithConnections' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithConnections.php',
    'AxeWP\\GraphQL\\Interfaces\\TypeWithFields' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithFields.php',
    'AxeWP\\GraphQL\\Interfaces\\TypeWithInputFields' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithInputFields.php',
    'AxeWP\\GraphQL\\Interfaces\\TypeWithInterfaces' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithInterfaces.php',
    'AxeWP\\GraphQL\\Traits\\TypeNameTrait' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Traits/TypeNameTrait.php',
    'AxeWP\\GraphQL\\Traits\\TypeResolverTrait' => $vendorDir . '/axepress/wp-graphql-plugin-boilerplate/src/Traits/TypeResolverTrait.php',
    'Composer\\InstalledVersions' => $vendorDir . '/composer/InstalledVersions.php',
    'WPGraphQL\\RankMath\\Admin\\Settings\\Settings' => $baseDir . '/src/Admin/Settings/Settings.php',
    'WPGraphQL\\RankMath\\Autoloader' => $baseDir . '/src/Autoloader.php',
    'WPGraphQL\\RankMath\\CoreSchemaFilters' => $baseDir . '/src/CoreSchemaFilters.php',
    'WPGraphQL\\RankMath\\Extensions\\Extensions' => $baseDir . '/src/Extensions/Extensions.php',
    'WPGraphQL\\RankMath\\Extensions\\WPGraphQLWooCommerce\\Type\\WPObject\\SeoObjects' => $baseDir . '/src/Extensions/WPGraphQLWooCommerce/Type/WPObject/SeoObjects.php',
    'WPGraphQL\\RankMath\\Extensions\\WPGraphQLWooCommerce\\WPGraphQLWooCommerce' => $baseDir . '/src/Extensions/WPGraphQLWooCommerce/WPGraphQLWooCommerce.php',
    'WPGraphQL\\RankMath\\Fields\\RootQuery' => $baseDir . '/src/Fields/RootQuery.php',
    'WPGraphQL\\RankMath\\Main' => $baseDir . '/src/Main.php',
    'WPGraphQL\\RankMath\\Model\\ContentNodeSeo' => $baseDir . '/src/Model/ContentNodeSeo.php',
    'WPGraphQL\\RankMath\\Model\\ContentTypeSeo' => $baseDir . '/src/Model/ContentTypeSeo.php',
    'WPGraphQL\\RankMath\\Model\\Seo' => $baseDir . '/src/Model/Seo.php',
    'WPGraphQL\\RankMath\\Model\\Settings' => $baseDir . '/src/Model/Settings.php',
    'WPGraphQL\\RankMath\\Model\\TermNodeSeo' => $baseDir . '/src/Model/TermNodeSeo.php',
    'WPGraphQL\\RankMath\\Model\\UserSeo' => $baseDir . '/src/Model/UserSeo.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Connection\\RedirectionConnection' => $baseDir . '/src/Modules/Redirection/Connection/RedirectionConnection.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\CoreSchemaFilters' => $baseDir . '/src/Modules/Redirection/CoreSchemaFilters.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Data\\Connection\\RedirectionConnectionResolver' => $baseDir . '/src/Modules/Redirection/Data/Connection/RedirectionConnectionResolver.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Data\\Cursor\\RedirectionCursor' => $baseDir . '/src/Modules/Redirection/Data/Cursor/RedirectionCursor.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Data\\Loader\\RedirectionsLoader' => $baseDir . '/src/Modules/Redirection/Data/Loader/RedirectionsLoader.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Fields\\GeneralSettings' => $baseDir . '/src/Modules/Redirection/Fields/GeneralSettings.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Fields\\RootQuery' => $baseDir . '/src/Modules/Redirection/Fields/RootQuery.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Model\\Redirection' => $baseDir . '/src/Modules/Redirection/Model/Redirection.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\TypeRegistry' => $baseDir . '/src/Modules/Redirection/TypeRegistry.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\Enum\\RedirectionBehaviorEnum' => $baseDir . '/src/Modules/Redirection/Type/Enum/RedirectionBehaviorEnum.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\Enum\\RedirectionComparisonTypeEnum' => $baseDir . '/src/Modules/Redirection/Type/Enum/RedirectionComparisonTypeEnum.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\Enum\\RedirectionConnectionOrderByEnum' => $baseDir . '/src/Modules/Redirection/Type/Enum/RedirectionConnectionOrderByEnum.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\Enum\\RedirectionStatusEnum' => $baseDir . '/src/Modules/Redirection/Type/Enum/RedirectionStatusEnum.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\Enum\\RedirectionTypeEnum' => $baseDir . '/src/Modules/Redirection/Type/Enum/RedirectionTypeEnum.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\Input\\RedirectionConnectionOrderbyInput' => $baseDir . '/src/Modules/Redirection/Type/Input/RedirectionConnectionOrderbyInput.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\WPObject\\Redirection' => $baseDir . '/src/Modules/Redirection/Type/WPObject/Redirection.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\WPObject\\RedirectionSettings' => $baseDir . '/src/Modules/Redirection/Type/WPObject/RedirectionSettings.php',
    'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\WPObject\\RedirectionSource' => $baseDir . '/src/Modules/Redirection/Type/WPObject/RedirectionSource.php',
    'WPGraphQL\\RankMath\\TypeRegistry' => $baseDir . '/src/TypeRegistry.php',
    'WPGraphQL\\RankMath\\Type\\Enum\\ArticleTypeEnum' => $baseDir . '/src/Type/Enum/ArticleTypeEnum.php',
    'WPGraphQL\\RankMath\\Type\\Enum\\BulkEditingTypeEnum' => $baseDir . '/src/Type/Enum/BulkEditingTypeEnum.php',
    'WPGraphQL\\RankMath\\Type\\Enum\\ImagePreviewSizeEnum' => $baseDir . '/src/Type/Enum/ImagePreviewSizeEnum.php',
    'WPGraphQL\\RankMath\\Type\\Enum\\KnowledgeGraphTypeEnum' => $baseDir . '/src/Type/Enum/KnowledgeGraphTypeEnum.php',
    'WPGraphQL\\RankMath\\Type\\Enum\\OpenGraphLocaleEnum' => $baseDir . '/src/Type/Enum/OpenGraphLocaleEnum.php',
    'WPGraphQL\\RankMath\\Type\\Enum\\OpenGraphProductAvailabilityEnum' => $baseDir . '/src/Type/Enum/OpenGraphProductAvailabilityEnum.php',
    'WPGraphQL\\RankMath\\Type\\Enum\\RobotsMetaValueEnum' => $baseDir . '/src/Type/Enum/RobotsMetaValueEnum.php',
    'WPGraphQL\\RankMath\\Type\\Enum\\SeoRatingEnum' => $baseDir . '/src/Type/Enum/SeoRatingEnum.php',
    'WPGraphQL\\RankMath\\Type\\Enum\\SeoScorePositionEnum' => $baseDir . '/src/Type/Enum/SeoScorePositionEnum.php',
    'WPGraphQL\\RankMath\\Type\\Enum\\SeoScoreTemplateTypeEnum' => $baseDir . '/src/Type/Enum/SeoScoreTemplateTypeEnum.php',
    'WPGraphQL\\RankMath\\Type\\Enum\\SnippetTypeEnum' => $baseDir . '/src/Type/Enum/SnippetTypeEnum.php',
    'WPGraphQL\\RankMath\\Type\\Enum\\TwitterCardTypeEnum' => $baseDir . '/src/Type/Enum/TwitterCardTypeEnum.php',
    'WPGraphQL\\RankMath\\Type\\WPInterface\\ContentNodeSeo' => $baseDir . '/src/Type/WPInterface/ContentNodeSeo.php',
    'WPGraphQL\\RankMath\\Type\\WPInterface\\MetaSettingWithArchive' => $baseDir . '/src/Type/WPInterface/MetaSettingWithArchive.php',
    'WPGraphQL\\RankMath\\Type\\WPInterface\\MetaSettingWithRobots' => $baseDir . '/src/Type/WPInterface/MetaSettingWithRobots.php',
    'WPGraphQL\\RankMath\\Type\\WPInterface\\NodeWithSeo' => $baseDir . '/src/Type/WPInterface/NodeWithSeo.php',
    'WPGraphQL\\RankMath\\Type\\WPInterface\\Seo' => $baseDir . '/src/Type/WPInterface/Seo.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\AdvancedRobotsMeta' => $baseDir . '/src/Type/WPObject/AdvancedRobotsMeta.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Breadcrumbs' => $baseDir . '/src/Type/WPObject/Breadcrumbs.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\JsonLd' => $baseDir . '/src/Type/WPObject/JsonLd.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraphMeta' => $baseDir . '/src/Type/WPObject/OpenGraphMeta.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\Article' => $baseDir . '/src/Type/WPObject/OpenGraph/Article.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\Facebook' => $baseDir . '/src/Type/WPObject/OpenGraph/Facebook.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\Image' => $baseDir . '/src/Type/WPObject/OpenGraph/Image.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\Product' => $baseDir . '/src/Type/WPObject/OpenGraph/Product.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\SlackEnhancedData' => $baseDir . '/src/Type/WPObject/OpenGraph/SlackEnhancedData.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\Twitter' => $baseDir . '/src/Type/WPObject/OpenGraph/Twitter.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\TwitterApp' => $baseDir . '/src/Type/WPObject/OpenGraph/TwitterApp.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\Video' => $baseDir . '/src/Type/WPObject/OpenGraph/Video.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\SeoObjects' => $baseDir . '/src/Type/WPObject/SeoObjects.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\SeoScore' => $baseDir . '/src/Type/WPObject/SeoScore.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings' => $baseDir . '/src/Type/WPObject/Settings.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\General' => $baseDir . '/src/Type/WPObject/Settings/General.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\General\\BreadcrumbsConfig' => $baseDir . '/src/Type/WPObject/Settings/General/BreadcrumbsConfig.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\General\\FrontendSeoScore' => $baseDir . '/src/Type/WPObject/Settings/General/FrontendSeoScore.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\General\\Links' => $baseDir . '/src/Type/WPObject/Settings/General/Links.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\General\\Webmaster' => $baseDir . '/src/Type/WPObject/Settings/General/Webmaster.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta' => $baseDir . '/src/Type/WPObject/Settings/Meta.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\AuthorArchiveMeta' => $baseDir . '/src/Type/WPObject/Settings/Meta/AuthorArchiveMeta.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\ContentTypeMeta' => $baseDir . '/src/Type/WPObject/Settings/Meta/ContentTypeMeta.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\DateArchiveMeta' => $baseDir . '/src/Type/WPObject/Settings/Meta/DateArchiveMeta.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\GlobalMeta' => $baseDir . '/src/Type/WPObject/Settings/Meta/GlobalMeta.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\HomepageMeta' => $baseDir . '/src/Type/WPObject/Settings/Meta/HomepageMeta.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\LocalMeta' => $baseDir . '/src/Type/WPObject/Settings/Meta/LocalMeta.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\SocialMeta' => $baseDir . '/src/Type/WPObject/Settings/Meta/SocialMeta.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\TaxonomyMeta' => $baseDir . '/src/Type/WPObject/Settings/Meta/TaxonomyMeta.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Sitemap' => $baseDir . '/src/Type/WPObject/Settings/Sitemap.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Sitemap\\Author' => $baseDir . '/src/Type/WPObject/Settings/Sitemap/Author.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Sitemap\\ContentType' => $baseDir . '/src/Type/WPObject/Settings/Sitemap/ContentType.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Sitemap\\General' => $baseDir . '/src/Type/WPObject/Settings/Sitemap/General.php',
    'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Sitemap\\Taxonomy' => $baseDir . '/src/Type/WPObject/Settings/Sitemap/Taxonomy.php',
    'WPGraphQL\\RankMath\\Utils\\RMUtils' => $baseDir . '/src/Utils/RMUtils.php',
    'WPGraphQL\\RankMath\\Utils\\Utils' => $baseDir . '/src/Utils/Utils.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\ConnectionType' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/ConnectionType.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\EnumType' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/EnumType.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\FieldsType' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/FieldsType.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\InputType' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/InputType.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\InterfaceType' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/InterfaceType.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\MutationType' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/MutationType.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\ObjectType' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/ObjectType.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\Type' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/Type.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\UnionType' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/UnionType.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Helper\\Helper' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Helper/Helper.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Interfaces\\GraphQLType' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/GraphQLType.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Interfaces\\Registrable' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/Registrable.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Interfaces\\TypeWithConnections' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithConnections.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Interfaces\\TypeWithFields' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithFields.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Interfaces\\TypeWithInputFields' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithInputFields.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Interfaces\\TypeWithInterfaces' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithInterfaces.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Traits\\TypeNameTrait' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Traits/TypeNameTrait.php',
    'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Traits\\TypeResolverTrait' => $baseDir . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Traits/TypeResolverTrait.php',
);

================
File: vendor/composer/platform_check.php
================
<?php

// platform_check.php @generated by Composer

$issues = array();

if (!(PHP_VERSION_ID >= 70400)) {
    $issues[] = 'Your Composer dependencies require a PHP version ">= 7.4.0". You are running ' . PHP_VERSION . '.';
}

if ($issues) {
    if (!headers_sent()) {
        header('HTTP/1.1 500 Internal Server Error');
    }
    if (!ini_get('display_errors')) {
        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {
            fwrite(STDERR, 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . implode(PHP_EOL, $issues) . PHP_EOL.PHP_EOL);
        } elseif (!headers_sent()) {
            echo 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . str_replace('You are running '.PHP_VERSION.'.', '', implode(PHP_EOL, $issues)) . PHP_EOL.PHP_EOL;
        }
    }
    trigger_error(
        'Composer detected issues in your platform: ' . implode(' ', $issues),
        E_USER_ERROR
    );
}

================
File: vendor/composer/autoload_static.php
================
<?php

// autoload_static.php @generated by Composer

namespace Composer\Autoload;

class ComposerStaticInitef0cd05dc2a2aa01b422714ff9fb0143
{
    public static $files = array (
        'd93954ca8a74d7e67246db741a580590' => __DIR__ . '/../..' . '/access-functions.php',
    );

    public static $prefixLengthsPsr4 = array (
        'W' => 
        array (
            'WPGraphQL\\RankMath\\' => 19,
        ),
        'A' => 
        array (
            'AxeWP\\GraphQL\\' => 14,
        ),
    );

    public static $prefixDirsPsr4 = array (
        'WPGraphQL\\RankMath\\' => 
        array (
            0 => __DIR__ . '/../..' . '/src',
        ),
        'AxeWP\\GraphQL\\' => 
        array (
            0 => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src',
        ),
    );

    public static $classMap = array (
        'AxeWP\\GraphQL\\Abstracts\\ConnectionType' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/ConnectionType.php',
        'AxeWP\\GraphQL\\Abstracts\\EnumType' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/EnumType.php',
        'AxeWP\\GraphQL\\Abstracts\\FieldsType' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/FieldsType.php',
        'AxeWP\\GraphQL\\Abstracts\\InputType' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/InputType.php',
        'AxeWP\\GraphQL\\Abstracts\\InterfaceType' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/InterfaceType.php',
        'AxeWP\\GraphQL\\Abstracts\\MutationType' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/MutationType.php',
        'AxeWP\\GraphQL\\Abstracts\\ObjectType' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/ObjectType.php',
        'AxeWP\\GraphQL\\Abstracts\\Type' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/Type.php',
        'AxeWP\\GraphQL\\Abstracts\\UnionType' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/UnionType.php',
        'AxeWP\\GraphQL\\Helper\\Helper' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Helper/Helper.php',
        'AxeWP\\GraphQL\\Interfaces\\GraphQLType' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/GraphQLType.php',
        'AxeWP\\GraphQL\\Interfaces\\Registrable' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/Registrable.php',
        'AxeWP\\GraphQL\\Interfaces\\TypeWithConnections' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithConnections.php',
        'AxeWP\\GraphQL\\Interfaces\\TypeWithFields' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithFields.php',
        'AxeWP\\GraphQL\\Interfaces\\TypeWithInputFields' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithInputFields.php',
        'AxeWP\\GraphQL\\Interfaces\\TypeWithInterfaces' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithInterfaces.php',
        'AxeWP\\GraphQL\\Traits\\TypeNameTrait' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Traits/TypeNameTrait.php',
        'AxeWP\\GraphQL\\Traits\\TypeResolverTrait' => __DIR__ . '/..' . '/axepress/wp-graphql-plugin-boilerplate/src/Traits/TypeResolverTrait.php',
        'Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php',
        'WPGraphQL\\RankMath\\Admin\\Settings\\Settings' => __DIR__ . '/../..' . '/src/Admin/Settings/Settings.php',
        'WPGraphQL\\RankMath\\Autoloader' => __DIR__ . '/../..' . '/src/Autoloader.php',
        'WPGraphQL\\RankMath\\CoreSchemaFilters' => __DIR__ . '/../..' . '/src/CoreSchemaFilters.php',
        'WPGraphQL\\RankMath\\Extensions\\Extensions' => __DIR__ . '/../..' . '/src/Extensions/Extensions.php',
        'WPGraphQL\\RankMath\\Extensions\\WPGraphQLWooCommerce\\Type\\WPObject\\SeoObjects' => __DIR__ . '/../..' . '/src/Extensions/WPGraphQLWooCommerce/Type/WPObject/SeoObjects.php',
        'WPGraphQL\\RankMath\\Extensions\\WPGraphQLWooCommerce\\WPGraphQLWooCommerce' => __DIR__ . '/../..' . '/src/Extensions/WPGraphQLWooCommerce/WPGraphQLWooCommerce.php',
        'WPGraphQL\\RankMath\\Fields\\RootQuery' => __DIR__ . '/../..' . '/src/Fields/RootQuery.php',
        'WPGraphQL\\RankMath\\Main' => __DIR__ . '/../..' . '/src/Main.php',
        'WPGraphQL\\RankMath\\Model\\ContentNodeSeo' => __DIR__ . '/../..' . '/src/Model/ContentNodeSeo.php',
        'WPGraphQL\\RankMath\\Model\\ContentTypeSeo' => __DIR__ . '/../..' . '/src/Model/ContentTypeSeo.php',
        'WPGraphQL\\RankMath\\Model\\Seo' => __DIR__ . '/../..' . '/src/Model/Seo.php',
        'WPGraphQL\\RankMath\\Model\\Settings' => __DIR__ . '/../..' . '/src/Model/Settings.php',
        'WPGraphQL\\RankMath\\Model\\TermNodeSeo' => __DIR__ . '/../..' . '/src/Model/TermNodeSeo.php',
        'WPGraphQL\\RankMath\\Model\\UserSeo' => __DIR__ . '/../..' . '/src/Model/UserSeo.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Connection\\RedirectionConnection' => __DIR__ . '/../..' . '/src/Modules/Redirection/Connection/RedirectionConnection.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\CoreSchemaFilters' => __DIR__ . '/../..' . '/src/Modules/Redirection/CoreSchemaFilters.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Data\\Connection\\RedirectionConnectionResolver' => __DIR__ . '/../..' . '/src/Modules/Redirection/Data/Connection/RedirectionConnectionResolver.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Data\\Cursor\\RedirectionCursor' => __DIR__ . '/../..' . '/src/Modules/Redirection/Data/Cursor/RedirectionCursor.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Data\\Loader\\RedirectionsLoader' => __DIR__ . '/../..' . '/src/Modules/Redirection/Data/Loader/RedirectionsLoader.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Fields\\GeneralSettings' => __DIR__ . '/../..' . '/src/Modules/Redirection/Fields/GeneralSettings.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Fields\\RootQuery' => __DIR__ . '/../..' . '/src/Modules/Redirection/Fields/RootQuery.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Model\\Redirection' => __DIR__ . '/../..' . '/src/Modules/Redirection/Model/Redirection.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\TypeRegistry' => __DIR__ . '/../..' . '/src/Modules/Redirection/TypeRegistry.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\Enum\\RedirectionBehaviorEnum' => __DIR__ . '/../..' . '/src/Modules/Redirection/Type/Enum/RedirectionBehaviorEnum.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\Enum\\RedirectionComparisonTypeEnum' => __DIR__ . '/../..' . '/src/Modules/Redirection/Type/Enum/RedirectionComparisonTypeEnum.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\Enum\\RedirectionConnectionOrderByEnum' => __DIR__ . '/../..' . '/src/Modules/Redirection/Type/Enum/RedirectionConnectionOrderByEnum.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\Enum\\RedirectionStatusEnum' => __DIR__ . '/../..' . '/src/Modules/Redirection/Type/Enum/RedirectionStatusEnum.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\Enum\\RedirectionTypeEnum' => __DIR__ . '/../..' . '/src/Modules/Redirection/Type/Enum/RedirectionTypeEnum.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\Input\\RedirectionConnectionOrderbyInput' => __DIR__ . '/../..' . '/src/Modules/Redirection/Type/Input/RedirectionConnectionOrderbyInput.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\WPObject\\Redirection' => __DIR__ . '/../..' . '/src/Modules/Redirection/Type/WPObject/Redirection.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\WPObject\\RedirectionSettings' => __DIR__ . '/../..' . '/src/Modules/Redirection/Type/WPObject/RedirectionSettings.php',
        'WPGraphQL\\RankMath\\Modules\\Redirection\\Type\\WPObject\\RedirectionSource' => __DIR__ . '/../..' . '/src/Modules/Redirection/Type/WPObject/RedirectionSource.php',
        'WPGraphQL\\RankMath\\TypeRegistry' => __DIR__ . '/../..' . '/src/TypeRegistry.php',
        'WPGraphQL\\RankMath\\Type\\Enum\\ArticleTypeEnum' => __DIR__ . '/../..' . '/src/Type/Enum/ArticleTypeEnum.php',
        'WPGraphQL\\RankMath\\Type\\Enum\\BulkEditingTypeEnum' => __DIR__ . '/../..' . '/src/Type/Enum/BulkEditingTypeEnum.php',
        'WPGraphQL\\RankMath\\Type\\Enum\\ImagePreviewSizeEnum' => __DIR__ . '/../..' . '/src/Type/Enum/ImagePreviewSizeEnum.php',
        'WPGraphQL\\RankMath\\Type\\Enum\\KnowledgeGraphTypeEnum' => __DIR__ . '/../..' . '/src/Type/Enum/KnowledgeGraphTypeEnum.php',
        'WPGraphQL\\RankMath\\Type\\Enum\\OpenGraphLocaleEnum' => __DIR__ . '/../..' . '/src/Type/Enum/OpenGraphLocaleEnum.php',
        'WPGraphQL\\RankMath\\Type\\Enum\\OpenGraphProductAvailabilityEnum' => __DIR__ . '/../..' . '/src/Type/Enum/OpenGraphProductAvailabilityEnum.php',
        'WPGraphQL\\RankMath\\Type\\Enum\\RobotsMetaValueEnum' => __DIR__ . '/../..' . '/src/Type/Enum/RobotsMetaValueEnum.php',
        'WPGraphQL\\RankMath\\Type\\Enum\\SeoRatingEnum' => __DIR__ . '/../..' . '/src/Type/Enum/SeoRatingEnum.php',
        'WPGraphQL\\RankMath\\Type\\Enum\\SeoScorePositionEnum' => __DIR__ . '/../..' . '/src/Type/Enum/SeoScorePositionEnum.php',
        'WPGraphQL\\RankMath\\Type\\Enum\\SeoScoreTemplateTypeEnum' => __DIR__ . '/../..' . '/src/Type/Enum/SeoScoreTemplateTypeEnum.php',
        'WPGraphQL\\RankMath\\Type\\Enum\\SnippetTypeEnum' => __DIR__ . '/../..' . '/src/Type/Enum/SnippetTypeEnum.php',
        'WPGraphQL\\RankMath\\Type\\Enum\\TwitterCardTypeEnum' => __DIR__ . '/../..' . '/src/Type/Enum/TwitterCardTypeEnum.php',
        'WPGraphQL\\RankMath\\Type\\WPInterface\\ContentNodeSeo' => __DIR__ . '/../..' . '/src/Type/WPInterface/ContentNodeSeo.php',
        'WPGraphQL\\RankMath\\Type\\WPInterface\\MetaSettingWithArchive' => __DIR__ . '/../..' . '/src/Type/WPInterface/MetaSettingWithArchive.php',
        'WPGraphQL\\RankMath\\Type\\WPInterface\\MetaSettingWithRobots' => __DIR__ . '/../..' . '/src/Type/WPInterface/MetaSettingWithRobots.php',
        'WPGraphQL\\RankMath\\Type\\WPInterface\\NodeWithSeo' => __DIR__ . '/../..' . '/src/Type/WPInterface/NodeWithSeo.php',
        'WPGraphQL\\RankMath\\Type\\WPInterface\\Seo' => __DIR__ . '/../..' . '/src/Type/WPInterface/Seo.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\AdvancedRobotsMeta' => __DIR__ . '/../..' . '/src/Type/WPObject/AdvancedRobotsMeta.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Breadcrumbs' => __DIR__ . '/../..' . '/src/Type/WPObject/Breadcrumbs.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\JsonLd' => __DIR__ . '/../..' . '/src/Type/WPObject/JsonLd.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraphMeta' => __DIR__ . '/../..' . '/src/Type/WPObject/OpenGraphMeta.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\Article' => __DIR__ . '/../..' . '/src/Type/WPObject/OpenGraph/Article.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\Facebook' => __DIR__ . '/../..' . '/src/Type/WPObject/OpenGraph/Facebook.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\Image' => __DIR__ . '/../..' . '/src/Type/WPObject/OpenGraph/Image.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\Product' => __DIR__ . '/../..' . '/src/Type/WPObject/OpenGraph/Product.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\SlackEnhancedData' => __DIR__ . '/../..' . '/src/Type/WPObject/OpenGraph/SlackEnhancedData.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\Twitter' => __DIR__ . '/../..' . '/src/Type/WPObject/OpenGraph/Twitter.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\TwitterApp' => __DIR__ . '/../..' . '/src/Type/WPObject/OpenGraph/TwitterApp.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\OpenGraph\\Video' => __DIR__ . '/../..' . '/src/Type/WPObject/OpenGraph/Video.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\SeoObjects' => __DIR__ . '/../..' . '/src/Type/WPObject/SeoObjects.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\SeoScore' => __DIR__ . '/../..' . '/src/Type/WPObject/SeoScore.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\General' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/General.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\General\\BreadcrumbsConfig' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/General/BreadcrumbsConfig.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\General\\FrontendSeoScore' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/General/FrontendSeoScore.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\General\\Links' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/General/Links.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\General\\Webmaster' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/General/Webmaster.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/Meta.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\AuthorArchiveMeta' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/Meta/AuthorArchiveMeta.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\ContentTypeMeta' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/Meta/ContentTypeMeta.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\DateArchiveMeta' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/Meta/DateArchiveMeta.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\GlobalMeta' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/Meta/GlobalMeta.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\HomepageMeta' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/Meta/HomepageMeta.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\LocalMeta' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/Meta/LocalMeta.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\SocialMeta' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/Meta/SocialMeta.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Meta\\TaxonomyMeta' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/Meta/TaxonomyMeta.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Sitemap' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/Sitemap.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Sitemap\\Author' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/Sitemap/Author.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Sitemap\\ContentType' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/Sitemap/ContentType.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Sitemap\\General' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/Sitemap/General.php',
        'WPGraphQL\\RankMath\\Type\\WPObject\\Settings\\Sitemap\\Taxonomy' => __DIR__ . '/../..' . '/src/Type/WPObject/Settings/Sitemap/Taxonomy.php',
        'WPGraphQL\\RankMath\\Utils\\RMUtils' => __DIR__ . '/../..' . '/src/Utils/RMUtils.php',
        'WPGraphQL\\RankMath\\Utils\\Utils' => __DIR__ . '/../..' . '/src/Utils/Utils.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\ConnectionType' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/ConnectionType.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\EnumType' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/EnumType.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\FieldsType' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/FieldsType.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\InputType' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/InputType.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\InterfaceType' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/InterfaceType.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\MutationType' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/MutationType.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\ObjectType' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/ObjectType.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\Type' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/Type.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Abstracts\\UnionType' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Abstracts/UnionType.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Helper\\Helper' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Helper/Helper.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Interfaces\\GraphQLType' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/GraphQLType.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Interfaces\\Registrable' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/Registrable.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Interfaces\\TypeWithConnections' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithConnections.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Interfaces\\TypeWithFields' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithFields.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Interfaces\\TypeWithInputFields' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithInputFields.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Interfaces\\TypeWithInterfaces' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Interfaces/TypeWithInterfaces.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Traits\\TypeNameTrait' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Traits/TypeNameTrait.php',
        'WPGraphQL\\RankMath\\Vendor\\AxeWP\\GraphQL\\Traits\\TypeResolverTrait' => __DIR__ . '/../..' . '/vendor-prefixed/axepress/wp-graphql-plugin-boilerplate/src/Traits/TypeResolverTrait.php',
    );

    public static function getInitializer(ClassLoader $loader)
    {
        return \Closure::bind(function () use ($loader) {
            $loader->prefixLengthsPsr4 = ComposerStaticInitef0cd05dc2a2aa01b422714ff9fb0143::$prefixLengthsPsr4;
            $loader->prefixDirsPsr4 = ComposerStaticInitef0cd05dc2a2aa01b422714ff9fb0143::$prefixDirsPsr4;
            $loader->classMap = ComposerStaticInitef0cd05dc2a2aa01b422714ff9fb0143::$classMap;

        }, null, ClassLoader::class);
    }
}

================
File: vendor/composer/autoload_real.php
================
<?php

// autoload_real.php @generated by Composer

class ComposerAutoloaderInitef0cd05dc2a2aa01b422714ff9fb0143
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    /**
     * @return \Composer\Autoload\ClassLoader
     */
    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

        require __DIR__ . '/platform_check.php';

        spl_autoload_register(array('ComposerAutoloaderInitef0cd05dc2a2aa01b422714ff9fb0143', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader(\dirname(__DIR__));
        spl_autoload_unregister(array('ComposerAutoloaderInitef0cd05dc2a2aa01b422714ff9fb0143', 'loadClassLoader'));

        require __DIR__ . '/autoload_static.php';
        call_user_func(\Composer\Autoload\ComposerStaticInitef0cd05dc2a2aa01b422714ff9fb0143::getInitializer($loader));

        $loader->register(true);

        $filesToLoad = \Composer\Autoload\ComposerStaticInitef0cd05dc2a2aa01b422714ff9fb0143::$files;
        $requireFile = \Closure::bind(static function ($fileIdentifier, $file) {
            if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
                $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;

                require $file;
            }
        }, null, null);
        foreach ($filesToLoad as $fileIdentifier => $file) {
            $requireFile($fileIdentifier, $file);
        }

        return $loader;
    }
}

================
File: vendor/composer/installed.json
================
{
    "packages": [
        {
            "name": "axepress/wp-graphql-plugin-boilerplate",
            "version": "0.1.0",
            "version_normalized": "0.1.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/AxeWP/wp-graphql-plugin-boilerplate.git",
                "reference": "49096512cd599068edbbcff8e46684e207789001"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/AxeWP/wp-graphql-plugin-boilerplate/zipball/49096512cd599068edbbcff8e46684e207789001",
                "reference": "49096512cd599068edbbcff8e46684e207789001",
                "shasum": ""
            },
            "require": {
                "php": ">=7.4"
            },
            "require-dev": {
                "axepress/wp-graphql-cs": "^2.0.0-beta",
                "axepress/wp-graphql-stubs": "^1.12.2",
                "phpcompatibility/php-compatibility": "dev-develop as 9.9.9",
                "phpstan/extension-installer": "^1.1",
                "phpstan/phpstan": "^1.2",
                "szepeviktor/phpstan-wordpress": "^1.0",
                "wp-cli/wp-cli-bundle": "^2.8.1"
            },
            "time": "2024-04-06T17:12:24+00:00",
            "type": "library",
            "installation-source": "dist",
            "autoload": {
                "psr-4": {
                    "AxeWP\\GraphQL\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "GPL-3.0-or-later"
            ],
            "authors": [
                {
                    "name": "AxePress Development",
                    "homepage": "https://axepress.dev"
                },
                {
                    "name": "David Levine",
                    "role": "Developer"
                }
            ],
            "description": "Boilerplate for creating WPGraphQL extensions",
            "support": {
                "issues": "https://github.com/AxeWP/wp-graphql-plugin-boilerplate/issues",
                "source": "https://github.com/AxeWP/wp-graphql-plugin-boilerplate/tree/0.1.0"
            },
            "funding": [
                {
                    "url": "https://github.com/AxeWp",
                    "type": "github"
                }
            ],
            "install-path": "../axepress/wp-graphql-plugin-boilerplate"
        }
    ],
    "dev": false,
    "dev-package-names": []
}

================
File: vendor/composer/autoload_files.php
================
<?php

// autoload_files.php @generated by Composer

$vendorDir = dirname(__DIR__);
$baseDir = dirname($vendorDir);

return array(
    'd93954ca8a74d7e67246db741a580590' => $baseDir . '/access-functions.php',
);

================
File: vendor/composer/InstalledVersions.php
================
<?php

/*
 * This file is part of Composer.
 *
 * (c) Nils Adermann <naderman@naderman.de>
 *     Jordi Boggiano <j.boggiano@seld.be>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Composer;

use Composer\Autoload\ClassLoader;
use Composer\Semver\VersionParser;

/**
 * This class is copied in every Composer installed project and available to all
 *
 * See also https://getcomposer.org/doc/07-runtime.md#installed-versions
 *
 * To require its presence, you can require `composer-runtime-api ^2.0`
 *
 * @final
 */
class InstalledVersions
{
    /**
     * @var mixed[]|null
     * @psalm-var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}|array{}|null
     */
    private static $installed;

    /**
     * @var bool|null
     */
    private static $canGetVendors;

    /**
     * @var array[]
     * @psalm-var array<string, array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
     */
    private static $installedByVendor = array();

    /**
     * Returns a list of all package names which are present, either by being installed, replaced or provided
     *
     * @return string[]
     * @psalm-return list<string>
     */
    public static function getInstalledPackages()
    {
        $packages = array();
        foreach (self::getInstalled() as $installed) {
            $packages[] = array_keys($installed['versions']);
        }

        if (1 === \count($packages)) {
            return $packages[0];
        }

        return array_keys(array_flip(\call_user_func_array('array_merge', $packages)));
    }

    /**
     * Returns a list of all package names with a specific type e.g. 'library'
     *
     * @param  string   $type
     * @return string[]
     * @psalm-return list<string>
     */
    public static function getInstalledPackagesByType($type)
    {
        $packagesByType = array();

        foreach (self::getInstalled() as $installed) {
            foreach ($installed['versions'] as $name => $package) {
                if (isset($package['type']) && $package['type'] === $type) {
                    $packagesByType[] = $name;
                }
            }
        }

        return $packagesByType;
    }

    /**
     * Checks whether the given package is installed
     *
     * This also returns true if the package name is provided or replaced by another package
     *
     * @param  string $packageName
     * @param  bool   $includeDevRequirements
     * @return bool
     */
    public static function isInstalled($packageName, $includeDevRequirements = true)
    {
        foreach (self::getInstalled() as $installed) {
            if (isset($installed['versions'][$packageName])) {
                return $includeDevRequirements || !isset($installed['versions'][$packageName]['dev_requirement']) || $installed['versions'][$packageName]['dev_requirement'] === false;
            }
        }

        return false;
    }

    /**
     * Checks whether the given package satisfies a version constraint
     *
     * e.g. If you want to know whether version 2.3+ of package foo/bar is installed, you would call:
     *
     *   Composer\InstalledVersions::satisfies(new VersionParser, 'foo/bar', '^2.3')
     *
     * @param  VersionParser $parser      Install composer/semver to have access to this class and functionality
     * @param  string        $packageName
     * @param  string|null   $constraint  A version constraint to check for, if you pass one you have to make sure composer/semver is required by your package
     * @return bool
     */
    public static function satisfies(VersionParser $parser, $packageName, $constraint)
    {
        $constraint = $parser->parseConstraints((string) $constraint);
        $provided = $parser->parseConstraints(self::getVersionRanges($packageName));

        return $provided->matches($constraint);
    }

    /**
     * Returns a version constraint representing all the range(s) which are installed for a given package
     *
     * It is easier to use this via isInstalled() with the $constraint argument if you need to check
     * whether a given version of a package is installed, and not just whether it exists
     *
     * @param  string $packageName
     * @return string Version constraint usable with composer/semver
     */
    public static function getVersionRanges($packageName)
    {
        foreach (self::getInstalled() as $installed) {
            if (!isset($installed['versions'][$packageName])) {
                continue;
            }

            $ranges = array();
            if (isset($installed['versions'][$packageName]['pretty_version'])) {
                $ranges[] = $installed['versions'][$packageName]['pretty_version'];
            }
            if (array_key_exists('aliases', $installed['versions'][$packageName])) {
                $ranges = array_merge($ranges, $installed['versions'][$packageName]['aliases']);
            }
            if (array_key_exists('replaced', $installed['versions'][$packageName])) {
                $ranges = array_merge($ranges, $installed['versions'][$packageName]['replaced']);
            }
            if (array_key_exists('provided', $installed['versions'][$packageName])) {
                $ranges = array_merge($ranges, $installed['versions'][$packageName]['provided']);
            }

            return implode(' || ', $ranges);
        }

        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
    }

    /**
     * @param  string      $packageName
     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
     */
    public static function getVersion($packageName)
    {
        foreach (self::getInstalled() as $installed) {
            if (!isset($installed['versions'][$packageName])) {
                continue;
            }

            if (!isset($installed['versions'][$packageName]['version'])) {
                return null;
            }

            return $installed['versions'][$packageName]['version'];
        }

        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
    }

    /**
     * @param  string      $packageName
     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
     */
    public static function getPrettyVersion($packageName)
    {
        foreach (self::getInstalled() as $installed) {
            if (!isset($installed['versions'][$packageName])) {
                continue;
            }

            if (!isset($installed['versions'][$packageName]['pretty_version'])) {
                return null;
            }

            return $installed['versions'][$packageName]['pretty_version'];
        }

        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
    }

    /**
     * @param  string      $packageName
     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as reference
     */
    public static function getReference($packageName)
    {
        foreach (self::getInstalled() as $installed) {
            if (!isset($installed['versions'][$packageName])) {
                continue;
            }

            if (!isset($installed['versions'][$packageName]['reference'])) {
                return null;
            }

            return $installed['versions'][$packageName]['reference'];
        }

        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
    }

    /**
     * @param  string      $packageName
     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as install path. Packages of type metapackages also have a null install path.
     */
    public static function getInstallPath($packageName)
    {
        foreach (self::getInstalled() as $installed) {
            if (!isset($installed['versions'][$packageName])) {
                continue;
            }

            return isset($installed['versions'][$packageName]['install_path']) ? $installed['versions'][$packageName]['install_path'] : null;
        }

        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
    }

    /**
     * @return array
     * @psalm-return array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}
     */
    public static function getRootPackage()
    {
        $installed = self::getInstalled();

        return $installed[0]['root'];
    }

    /**
     * Returns the raw installed.php data for custom implementations
     *
     * @deprecated Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. getRawData only returns the first dataset loaded, which may not be what you expect.
     * @return array[]
     * @psalm-return array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}
     */
    public static function getRawData()
    {
        @trigger_error('getRawData only returns the first dataset loaded, which may not be what you expect. Use getAllRawData() instead which returns all datasets for all autoloaders present in the process.', E_USER_DEPRECATED);

        if (null === self::$installed) {
            // only require the installed.php file if this file is loaded from its dumped location,
            // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937
            if (substr(__DIR__, -8, 1) !== 'C') {
                self::$installed = include __DIR__ . '/installed.php';
            } else {
                self::$installed = array();
            }
        }

        return self::$installed;
    }

    /**
     * Returns the raw data of all installed.php which are currently loaded for custom implementations
     *
     * @return array[]
     * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
     */
    public static function getAllRawData()
    {
        return self::getInstalled();
    }

    /**
     * Lets you reload the static array from another file
     *
     * This is only useful for complex integrations in which a project needs to use
     * this class but then also needs to execute another project's autoloader in process,
     * and wants to ensure both projects have access to their version of installed.php.
     *
     * A typical case would be PHPUnit, where it would need to make sure it reads all
     * the data it needs from this class, then call reload() with
     * `require $CWD/vendor/composer/installed.php` (or similar) as input to make sure
     * the project in which it runs can then also use this class safely, without
     * interference between PHPUnit's dependencies and the project's dependencies.
     *
     * @param  array[] $data A vendor/composer/installed.php data set
     * @return void
     *
     * @psalm-param array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $data
     */
    public static function reload($data)
    {
        self::$installed = $data;
        self::$installedByVendor = array();
    }

    /**
     * @return array[]
     * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
     */
    private static function getInstalled()
    {
        if (null === self::$canGetVendors) {
            self::$canGetVendors = method_exists('Composer\Autoload\ClassLoader', 'getRegisteredLoaders');
        }

        $installed = array();

        if (self::$canGetVendors) {
            foreach (ClassLoader::getRegisteredLoaders() as $vendorDir => $loader) {
                if (isset(self::$installedByVendor[$vendorDir])) {
                    $installed[] = self::$installedByVendor[$vendorDir];
                } elseif (is_file($vendorDir.'/composer/installed.php')) {
                    /** @var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $required */
                    $required = require $vendorDir.'/composer/installed.php';
                    $installed[] = self::$installedByVendor[$vendorDir] = $required;
                    if (null === self::$installed && strtr($vendorDir.'/composer', '\\', '/') === strtr(__DIR__, '\\', '/')) {
                        self::$installed = $installed[count($installed) - 1];
                    }
                }
            }
        }

        if (null === self::$installed) {
            // only require the installed.php file if this file is loaded from its dumped location,
            // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937
            if (substr(__DIR__, -8, 1) !== 'C') {
                /** @var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $required */
                $required = require __DIR__ . '/installed.php';
                self::$installed = $required;
            } else {
                self::$installed = array();
            }
        }

        if (self::$installed !== array()) {
            $installed[] = self::$installed;
        }

        return $installed;
    }
}

================
File: vendor/composer/installed.php
================
<?php return array(
    'root' => array(
        'name' => 'axepress/wp-graphql-rank-math',
        'pretty_version' => 'dev-main',
        'version' => 'dev-main',
        'reference' => 'a1190476f9363bb85f37f84cab566d8caadf4553',
        'type' => 'wordpress-plugin',
        'install_path' => __DIR__ . '/../../',
        'aliases' => array(),
        'dev' => false,
    ),
    'versions' => array(
        'axepress/wp-graphql-plugin-boilerplate' => array(
            'pretty_version' => '0.1.0',
            'version' => '0.1.0.0',
            'reference' => '49096512cd599068edbbcff8e46684e207789001',
            'type' => 'library',
            'install_path' => __DIR__ . '/../axepress/wp-graphql-plugin-boilerplate',
            'aliases' => array(),
            'dev_requirement' => false,
        ),
        'axepress/wp-graphql-rank-math' => array(
            'pretty_version' => 'dev-main',
            'version' => 'dev-main',
            'reference' => 'a1190476f9363bb85f37f84cab566d8caadf4553',
            'type' => 'wordpress-plugin',
            'install_path' => __DIR__ . '/../../',
            'aliases' => array(),
            'dev_requirement' => false,
        ),
    ),
);

================
File: src/CoreSchemaFilters.php
================
<?php
/**
 * Adds filters that modify core schema.
 *
 * @package WPGraphQL\RankMath
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\Registrable;

/**
 * Class - CoreSchemaFilters
 */
class CoreSchemaFilters implements Registrable {
	/**
	 * {@inheritDoc}
	 */
	public static function init(): void {
		add_filter( 'graphql_seo_type_prefix', [ self::class, 'get_type_prefix' ] );
		add_filter( 'graphql_allowed_fields_on_restricted_type', [ self::class, 'allow_seo_on_post_types' ], 10, 2 );

		// Modules.
		Modules\Redirection\CoreSchemaFilters::init();
	}

	/**
	 * Prefixes all plugin GraphQL types.
	 *
	 * @param ?string $type_name the non-prefixed type name.
	 */
	public static function get_type_prefix( ?string $type_name = null ): string {
		return ! empty( $type_name ) ? $type_name : 'RankMath';
	}

	/**
	 * Sets seo to return on unauthenticated requests.
	 *
	 * @param string[] $allowed_fields .
	 * @param string   $model_name .
	 *
	 * @return string[]
	 */
	public static function allow_seo_on_post_types( array $allowed_fields, string $model_name ): array {
		if ( 'PostTypeObject' === $model_name ) {
			$allowed_fields[] = 'seo';
		}

		return $allowed_fields;
	}
}

================
File: src/Main.php
================
<?php
/**
 * Initializes a singleton instance of the plugin.
 *
 * @package WPGraphQL\RankMath
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath;

use RankMath\Helper as RMHelper;
use WPGraphQL\RankMath\Admin\Settings\Settings;
use WPGraphQL\RankMath\Extensions\Extensions;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Helper\Helper;

if ( ! class_exists( 'WPGraphQL\RankMath\Main' ) ) :

	/**
	 * Class - Main
	 */
	final class Main {
		/**
		 * Class instances.
		 *
		 * @var ?self $instance
		 */
		private static $instance;

		/**
		 * Constructor
		 */
		public static function instance(): self {
			if ( ! isset( self::$instance ) ) {
				// You cant test a singleton.
				// @codeCoverageIgnoreStart .
				self::$instance = new self();
				self::$instance->setup();
				// @codeCoverageIgnoreEnd
			}

			/**
			 * Fire off init action.
			 *
			 * @param self $instance the instance of the plugin class.
			 */
			do_action( 'graphql_seo_init', self::$instance );

			return self::$instance;
		}

		/**
		 * Sets up the schema.
		 *
		 * @codeCoverageIgnore
		 */
		private function setup(): void {
			// // Setup boilerplate hook prefix.
			Helper::set_hook_prefix( 'graphql_seo' );

			// Force enable RankMath headless support.
			$enabled = RMHelper::get_settings( 'general.headless_support' );

			if ( empty( $enabled ) ) {
				$options                     = get_option( 'rank-math-options-general', [] );
				$options['headless_support'] = 'on';
				update_option( 'rank-math-options-general', $options );
			}

			// Setup plugin.
			Extensions::init();
			CoreSchemaFilters::init();
			Settings::init();
			TypeRegistry::init();
		}

		/**
		 * Throw error on object clone.
		 * The whole idea of the singleton design pattern is that there is a single object
		 * therefore, we don't want the object to be cloned.
		 *
		 * @codeCoverageIgnore
		 *
		 * @return void
		 */
		public function __clone() {
			// Cloning instances of the class is forbidden.
			_doing_it_wrong( __FUNCTION__, esc_html__( 'The plugin Main class should not be cloned.', 'wp-graphql-rank-math' ), '0.0.1' );
		}

		/**
		 * Disable unserializing of the class.
		 *
		 * @codeCoverageIgnore
		 */
		public function __wakeup(): void {
			// De-serializing instances of the class is forbidden.
			_doing_it_wrong( __FUNCTION__, esc_html__( 'De-serializing instances of the plugin Main class is not allowed.', 'wp-graphql-rank-math' ), '0.0.1' );
		}
	}
endif;

================
File: src/TypeRegistry.php
================
<?php
/**
 * Registers Plugin types to the GraphQL schema.
 *
 * @package WPGraphQL\RankMath
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath;

use Exception;
use WPGraphQL\RankMath\Fields;
use WPGraphQL\RankMath\Modules\Redirection\TypeRegistry as RedirectionTypeRegistry;
use WPGraphQL\RankMath\Type\Enum;
use WPGraphQL\RankMath\Type\WPInterface;
use WPGraphQL\RankMath\Type\WPObject;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\Registrable;

/**
 * Class - TypeRegistry
 */
class TypeRegistry {
	/**
	 * The local registry of registered types.
	 *
	 * @var string[]
	 */
	public static array $registry = [];

	/**
	 * Gets an array of all the registered GraphQL types along with their class name.
	 *
	 * @return string[]
	 */
	public static function get_registered_types(): array {
		if ( empty( self::$registry ) ) {
			self::initialize_registry();
		}

		return self::$registry;
	}

	/**
	 * Registers types, connections, unions, and mutations to GraphQL schema.
	 */
	public static function init(): void {
		/**
		 * Fires before all types have been registered.
		 */
		do_action( 'graphql_seo_before_register_types' );

		// Register individual modules.
		RedirectionTypeRegistry::init();

		// Initialize the registry.
		self::initialize_registry();

		/**
		 * Fires after all types have been registered.
		 */
		do_action( 'graphql_seo_after_register_types' );
	}

	/**
	 * Initializes the plugin type registry.
	 */
	private static function initialize_registry(): void {
		$classes_to_register = array_merge(
			self::enums(),
			self::inputs(),
			self::interfaces(),
			self::objects(),
			self::connections(),
			self::mutations(),
			self::fields(),
		);

		self::register_types( $classes_to_register );
	}

	/**
	 * List of Enum classes to register.
	 *
	 * @return string[]
	 */
	private static function enums(): array {
		// Enums to register.
		$classes_to_register = [
			Enum\ArticleTypeEnum::class,
			Enum\BulkEditingTypeEnum::class,
			Enum\ImagePreviewSizeEnum::class,
			Enum\KnowledgeGraphTypeEnum::class,
			Enum\OpenGraphLocaleEnum::class,
			Enum\OpenGraphProductAvailabilityEnum::class,
			Enum\RobotsMetaValueEnum::class,
			Enum\SeoScorePositionEnum::class,
			Enum\SeoScoreTemplateTypeEnum::class,
			Enum\SeoRatingEnum::class,
			Enum\SnippetTypeEnum::class,
			Enum\TwitterCardTypeEnum::class,
		];

		/**
		 * Filters the list of enum classes to register.
		 *
		 * Useful for adding/removing specific enums to the schema.
		 *
		 * @param array           $classes_to_register Array of classes to be registered to the schema.
		 */
		return apply_filters( 'graphql_seo_registered_enum_classes', $classes_to_register );
	}

	/**
	 * List of Input classes to register.
	 *
	 * @return string[]
	 */
	private static function inputs(): array {
		$classes_to_register = [];

		/**
		 * Filters the list of input classes to register.
		 *
		 * Useful for adding/removing specific inputs to the schema.
		 *
		 * @param array           $classes_to_register Array of classes to be registered to the schema.
		 */
		return apply_filters( 'graphql_seo_registered_input_classes', $classes_to_register );
	}

	/**
	 * List of Interface classes to register.
	 *
	 * @return string[]
	 */
	public static function interfaces(): array {
		$classes_to_register = [
			WPInterface\MetaSettingWithArchive::class,
			WPInterface\MetaSettingWithRobots::class,
			WPInterface\Seo::class,
			WPInterface\ContentNodeSeo::class,
			WPInterface\NodeWithSeo::class,
		];

		/**
		 * Filters the list of interfaces classes to register.
		 *
		 * Useful for adding/removing specific interfaces to the schema.
		 *
		 * @param array           $classes_to_register = Array of classes to be registered to the schema.
		 */
		return apply_filters( 'graphql_seo_registered_interface_classes', $classes_to_register );
	}

	/**
	 * List of Object classes to register.
	 *
	 * @return string[]
	 */
	public static function objects(): array {
		$classes_to_register = [
			WPObject\AdvancedRobotsMeta::class,
			WPObject\SeoScore::class,
			WPObject\JsonLd::class,
			WPObject\Breadcrumbs::class,

			// Open Graph.
			WPObject\OpenGraph\Article::class,
			WPObject\OpenGraph\Facebook::class,
			WPObject\OpenGraph\Image::class,
			WPObject\OpenGraph\Product::class,
			WPObject\OpenGraph\SlackEnhancedData::class,
			WPObject\OpenGraph\TwitterApp::class,
			WPObject\OpenGraph\Twitter::class,
			WPObject\OpenGraph\Video::class,
			WPObject\OpenGraphMeta::class,

			// General settings.
			WPObject\Settings\General\BreadcrumbsConfig::class,
			WPObject\Settings\General\FrontendSeoScore::class,
			WPObject\Settings\General\Links::class,
			WPObject\Settings\General\Webmaster::class,
			WPObject\Settings\General::class,
			// Meta settings.
			WPObject\Settings\Meta\AuthorArchiveMeta::class,
			WPObject\Settings\Meta\ContentTypeMeta::class,
			WPObject\Settings\Meta\DateArchiveMeta::class,
			WPObject\Settings\Meta\GlobalMeta::class,
			WPObject\Settings\Meta\HomepageMeta::class,
			WPObject\Settings\Meta\LocalMeta::class,
			WPObject\Settings\Meta\SocialMeta::class,
			WPObject\Settings\Meta\TaxonomyMeta::class,
			WPObject\Settings\Meta::class,
			// Sitemap settings.
			WPObject\Settings\Sitemap\Author::class,
			WPObject\Settings\Sitemap\ContentType::class,
			WPObject\Settings\Sitemap\General::class,
			WPObject\Settings\Sitemap\Taxonomy::class,
			WPObject\Settings\Sitemap::class,

			// Settings.
			WPObject\Settings::class,

			// The individual SEO objects.
			WPObject\SeoObjects::class,
		];

		/**
		 * Filters the list of object classes to register.
		 *
		 * Useful for adding/removing specific objects to the schema.
		 *
		 * @param array           $classes_to_register = Array of classes to be registered to the schema.
		 */
		return apply_filters( 'graphql_seo_registered_object_classes', $classes_to_register );
	}

	/**
	 * List of Field classes to register.
	 *
	 * @return string[]
	 */
	public static function fields(): array {
		$classes_to_register = [
			Fields\RootQuery::class,
		];

		/**
		 * Filters the list of field classes to register.
		 *
		 * Useful for adding/removing specific fields to the schema.
		 *
		 * @param array           $classes_to_register = Array of classes to be registered to the schema.
		 */
		return apply_filters( 'graphql_seo_registered_field_classes', $classes_to_register );
	}

	/**
	 * List of Connection classes to register.
	 *
	 * @return string[]
	 */
	public static function connections(): array {
		$classes_to_register = [];

		/**
		 * Filters the list of connection classes to register.
		 *
		 * Useful for adding/removing specific connections to the schema.
		 *
		 * @param array           $classes_to_register = Array of classes to be registered to the schema.
		 */
		return apply_filters( 'graphql_seo_registered_connection_classes', $classes_to_register );
	}

	/**
	 * Registers mutation.
	 *
	 * @return string[]
	 */
	public static function mutations(): array {
		$classes_to_register = [];

		/**
		 * Filters the list of connection classes to register.
		 *
		 * Useful for adding/removing specific connections to the schema.
		 *
		 * @param array           $classes_to_register = Array of classes to be registered to the schema.
		 */
		$classes_to_register = apply_filters( 'graphql_seo_registered_mutation_classes', $classes_to_register );

		return $classes_to_register;
	}

	/**
	 * Loops through a list of classes to manually register each GraphQL to the registry, and stores the type name and class in the local registry.
	 *
	 * Classes must extend WPGraphQL\Type\AbstractType.
	 *
	 * @param string[] $classes_to_register .
	 *
	 * @throws \Exception .
	 */
	private static function register_types( array $classes_to_register ): void {
		// Bail if there are no classes to register.
		if ( empty( $classes_to_register ) ) {
			return;
		}

		foreach ( $classes_to_register as $class ) {
			if ( ! is_a( $class, Registrable::class, true ) ) {
				// translators: PHP class.
				throw new Exception( sprintf( esc_html__( 'To be registered to the WPGraphQL Plugin Name GraphQL schema, %s needs to implement WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\Registrable.', 'wp-graphql-rank-math' ), esc_html( $class ) ) );
			}

			// Register the type to the GraphQL schema.
			$class::init();
			// Store the type in the local registry.
			self::$registry[] = $class;
		}
	}
}

================
File: src/Autoloader.php
================
<?php
/**
 * Includes the composer Autoloader used for packages and classes in the src/ directory.
 *
 * @package WPGraphQL\RankMath
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath;

/**
 * Class - Autoloader
 *
 * @internal
 */
class Autoloader {
	/**
	 * Whether the autoloader has been loaded.
	 *
	 * @var bool
	 */
	protected static bool $is_loaded = false;

	/**
	 * Attempts to autoload the Composer dependencies.
	 */
	public static function autoload(): bool {
		// If we're not *supposed* to autoload anything, then return true.
		if ( defined( 'WPGRAPHQL_SEO_AUTOLOAD' ) && false === WPGRAPHQL_SEO_AUTOLOAD ) {
			return true;
		}

		if ( self::$is_loaded ) {
			return self::$is_loaded;
		}

		// If the main class has already been loaded, then they must be using a different autoloader.
		if ( class_exists( 'WPGraphQL\RankMath\Main' ) ) {
			return true;
		}

		$autoloader      = dirname( __DIR__ ) . '/vendor/autoload.php';
		self::$is_loaded = self::require_autoloader( $autoloader );

		return self::$is_loaded;
	}

	/**
	 * Attempts to load the autoloader file, if it exists.
	 *
	 * @param string $autoloader_file The path to the autoloader file.
	 */
	protected static function require_autoloader( string $autoloader_file ): bool {
		if ( ! is_readable( $autoloader_file ) ) {
			self::missing_autoloader_notice();
			return false;
		}

		return (bool) require_once $autoloader_file; // phpcs:ignore WordPressVIPMinimum.Files.IncludingFile.UsingVariable -- Autoloader is a Composer file.
	}

	/**
	 * Displays a notice if the autoloader is missing.
	 */
	protected static function missing_autoloader_notice(): void {
		$error_message = __( 'WPGraphQL for RankMath: The Composer autoloader was not found. If you installed the plugin from the GitHub source code, make sure to run `composer install`.', 'wp-graphql-rank-math' );

		if ( defined( 'WP_DEBUG' ) && WP_DEBUG ) {
			error_log( esc_html( $error_message ) ); // phpcs:ignore WordPress.PHP.DevelopmentFunctions.error_log_error_log -- This is a development notice.
		}

		$hooks = [
			'admin_notices',
			'network_admin_notices',
		];

		foreach ( $hooks as $hook ) {
			add_action(
				$hook,
				static function () use ( $error_message ) {
					?>
					<div class="error notice">
						<p>
							<?php echo esc_html( $error_message ); ?>
						</p>
					</div>
					<?php
				}
			);
		}
	}
}

================
File: src/Admin/Settings/Settings.php
================
<?php
/**
 * Registers plugin settings to the backend.
 *
 * @package WPGraphQL\RankMath\Admin\Settings
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Admin\Settings;

use WPGraphQL\Admin\Settings\SettingsRegistry;

/**
 * Class - Settings
 */
class Settings {
	/**
	 * An instance of the Settings API.
	 *
	 * @var ?\WPGraphQL\Admin\Settings\SettingsRegistry
	 */
	private static $settings_api;

	/**
	 * The section named used in the settings API.
	 *
	 * @var string
	 */
	public static string $section_name = 'graphql_seo_settings';

	/**
	 * {@inheritDoc}
	 */
	public static function init(): void {
		add_action( 'admin_init', [ self::class, 'register_settings' ] );
	}

	/**
	 * Gets an instance of the WPGraphQL settings api.
	 */
	public static function get_settings_api(): SettingsRegistry {
		if ( ! isset( self::$settings_api ) || ! self::$settings_api instanceof SettingsRegistry ) {
			self::$settings_api = new SettingsRegistry();
		}

		return self::$settings_api;
	}

	/**
	 * Registers the settings to WPGraphQL
	 */
	public static function register_settings(): void {
		$settings_api = self::get_settings_api();

		$settings_api->register_fields(
			self::$section_name,
			[
				[
					'name'    => 'delete_data_on_deactivate',
					'label'   => __( 'Delete Data on Deactivation', 'wp-graphql-rank-math' ),
					'desc'    => __( 'Delete settings and any other data stored by WPGraphQL for Rank Math upon de-activation of the plugin. Un-checking this will keep data after the plugin is de-activated.', 'wp-graphql-rank-math' ),
					'type'    => 'checkbox',
					'default' => 'on',
				],
			]
		);

		$settings_api->admin_init();
	}
}

================
File: src/Utils/Utils.php
================
<?php
/**
 * Helper methods.
 *
 * @package WPGraphQL\RankMath\Utils\Utils;
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Utils;

/**
 * Class - Utils
 */
class Utils {
	/**
	 * Truncate text for given length.
	 *
	 * @param string $str    Text to truncate.
	 * @param int    $length Length to truncate for.
	 * @param string $append Append to the end if string is truncated.
	 */
	public static function truncate( string $str, int $length = 110, string $append = '' ): string {
		$str     = wp_strip_all_tags( $str, true );
		$strlen  = mb_strlen( $str );
		$excerpt = mb_substr( $str, 0, $length );

		// Remove part of an entity at the end.
		$excerpt = preg_replace( '/&[^;\s]{0,6}$/', '', $excerpt );
		if ( $str !== $excerpt ) {
			$excerpt = mb_substr( $str, 0, (int) mb_strrpos( trim( (string) $excerpt ), ' ' ) );
		}

		if ( $strlen > $length ) {
			$excerpt .= $append;
		}

		return $excerpt;
	}

	/**
	 * Checks if a given url is relative.
	 *
	 * @param string $url the url to check.
	 */
	public static function is_url_relative( string $url ): bool {
		return ( 0 !== strpos( $url, 'http' ) && 0 !== strpos( $url, '//' ) );
	}

	/**
	 * Appends the base url to the provided path.
	 *
	 * @param string $path .
	 */
	public static function base_url( string $path = '' ): string {
		$blog_id = is_multisite() ? get_current_blog_id() : null;

		$base_url = get_home_url( $blog_id, $path );

		return user_trailingslashit( $base_url );
	}

	/**
	 * Overloads the field type of an existing GraphQL field.
	 *
	 * This is necessary because register_graphql_field() doesn't have a way to check inheritance.
	 *
	 * @see https://github.com/wp-graphql/wp-graphql/issues/3096
	 *
	 * @param string $object_type The WPGraphQL object type name where the field is located.
	 * @param string $field_name  The field name to overload.
	 * @param string $new_type_name The new GraphQL type name to use.
	 */
	public static function overload_graphql_field_type( string $object_type, string $field_name, string $new_type_name ): void {
		add_filter(
			'graphql_' . $object_type . '_fields',
			static function ( array $fields ) use ( $field_name, $new_type_name ) {
				if ( isset( $fields[ $field_name ] ) ) {
					$fields[ $field_name ]['type'] = $new_type_name;
				}

				return $fields;
			},
			10,
			1
		);
	}
}

================
File: src/Utils/RMUtils.php
================
<?php
/**
 * Utility functions for interacting with RankMath SEO.
 *
 * @package WPGraphQL\RankMath\Utils
 * @since 0.0.13
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Utils;

use MyThemeShop\Database\Database;
use RankMath\Helper;
use RankMath\Redirections\DB;

/**
 * Class - RMUtils
 */
class RMUtils {
	/**
	 * Check if a module is active.
	 *
	 * @see \RankMath\Helper::is_module_active()
	 *
	 * @param string $module The module name.
	 *
	 * @since 0.0.13
	 */
	public static function is_module_active( string $module ): bool {
		return Helper::is_module_active( $module );
	}

	/**
	 * Check if a user has a RankMath capability.
	 *
	 * @see \RankMath\Helper::has_cap()
	 *
	 * @param string $capability The capability name.
	 *
	 * @since 0.0.13
	 */
	public static function has_cap( string $capability ): bool {
		return Helper::has_cap( $capability );
	}

	/**
	 * Get the redirections table.
	 *
	 * @see \RankMath\Redirections\DB\table()
	 *
	 * @since 0.0.13
	 *
	 * @return \MyThemeShop\Database\Query_Builder
	 */
	public static function get_redirections_table() {
		/**
		 * Query_Builder gives us the methods we need to interact with.
		 *
		 * @var \MyThemeShop\Database\Query_Builder
		 */
		return Database::table( 'rank_math_redirections' );
	}

	/**
	 * Get the redirections from the database.
	 *
	 * @see \RankMath\Redirections\DB\get_redirections()
	 *
	 * @param array<string,mixed> $args The arguments to filter the redirections with.
	 *
	 * @since 0.0.13
	 *
	 * @return array<string,mixed>
	 */
	public static function get_redirections( array $args = [] ): array {
		return DB::get_redirections( $args );
	}

	/**
	 * Get a redirection by its ID.
	 *
	 * @see \RankMath\Redirections\DB\get_redirection_by_id()
	 *
	 * @param int    $id     ID of the record to search for.
	 * @param string $status Status to filter with.
	 *
	 * @since 0.0.13
	 *
	 * @return bool|array<string,mixed>
	 */
	public static function get_redirection_by_id( int $id, string $status = 'all' ) {
		return DB::get_redirection_by_id( $id, $status );
	}

	/**
	 * Gets a redirection directly from the database.
	 *
	 * This allows us to check for redirections without having to reset the existing DB::$table.
	 *
	 * @see https://support.rankmath.com/ticket/adding-where-clause-to-redirection-query-overwrites-existing-query
	 *
	 * @param int $id ID of the redirection to get.
	 *
	 * @since 0.0.13
	 *
	 * @return array<string,mixed>|null
	 */
	public static function get_redirection_from_db( int $id ) {
		$result = wp_cache_get( 'rm_redirection_' . $id, 'rm_redirections' );

		if ( false === $result ) {
			global $wpdb;

			$result = $wpdb->get_row( // phpcs:ignore WordPress.DB.DirectDatabaseQuery.DirectQuery
				$wpdb->prepare(
					"SELECT * FROM {$wpdb->prefix}rank_math_redirections WHERE id = %d LIMIT 1",
					$id
				),
				ARRAY_A
			);

			wp_cache_set( 'rm_redirection_' . $id, $result, 'rm_redirections' );
		}

		return ! empty( $result ) ? $result : null;
	}
}

================
File: src/Extensions/Extensions.php
================
<?php
/**
 * Registers support for additional Extensions.
 *
 * @package WPGraphQL\RankMath\Extensions
 * @since 0.3.1
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Extensions;

use WPGraphQL\RankMath\Extensions\WPGraphQLWooCommerce\WPGraphQLWooCommerce;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\Registrable;

/**
 * Class - Extensions
 */
class Extensions implements Registrable {
	/**
	 * {@inheritDoc}
	 */
	public static function init(): void {
		$classes_to_register = [
			WPGraphQLWooCommerce::class,
		];

		foreach ( $classes_to_register as $class ) {
			$class::init();
		}
	}
}

================
File: src/Extensions/WPGraphQLWooCommerce/WPGraphQLWooCommerce.php
================
<?php
/**
 * Handles support for WPGraphQL for WooCommerce.
 *
 * @package WPGraphQL\RankMath\Extensions\WPGraphQLWooCommerce
 * @since 0.3.1
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Extensions\WPGraphQLWooCommerce;

use WPGraphQL\RankMath\Extensions\WPGraphQLWooCommerce\Type\WPObject\SeoObjects;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\Registrable;

/**
 * Class - WPGraphQLWooCommerce
 */
class WPGraphQLWooCommerce implements Registrable {
	/**
	 * {@inheritDoc}
	 */
	public static function init(): void {
		if ( ! self::is_woographql_enabled() ) {
			return;
		}

		add_filter( 'graphql_seo_registered_object_classes', [ self::class, 'objects' ] );
	}

	/**
	 * Returns whether Gravity Forms Signature is enabled.
	 */
	public static function is_woographql_enabled(): bool {
		return class_exists( 'WPGraphQL\WooCommerce\WP_GraphQL_WooCommerce' );
	}

	/**
	 * Registers the SEO objects for WPGraphQL for WooCommerce.
	 *
	 * @param string[] $object_classes The array of object classes.
	 *
	 * @return string[]
	 */
	public static function objects( array $object_classes ): array {
		$object_classes[] = SeoObjects::class;

		return $object_classes;
	}
}

================
File: src/Extensions/WPGraphQLWooCommerce/Type/WPObject/SeoObjects.php
================
<?php
/**
 * Registers the SEO objects for WPGraphQL for WooCommerce.
 *
 * @package WPGraphQL\RankMath\Extensions\WPGraphQLWooCommerce\Type\WPObject
 * @since 0.3.1
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Extensions\WPGraphQLWooCommerce\Type\WPObject;

use WPGraphQL\RankMath\Type\WPInterface\ContentNodeSeo;
use WPGraphQL\RankMath\Utils\Utils;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\Registrable;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Traits\TypeNameTrait;
use WPGraphQL\WooCommerce\WP_GraphQL_WooCommerce;

/**
 * Class - SeoObjects
 */
class SeoObjects implements Registrable {
	use TypeNameTrait;

	/**
	 * {@inheritDoc}
	 */
	public static function init(): void {
		add_action( 'graphql_register_types', [ static::class, 'register' ] );
	}

	/**
	 * Registers the SEO GraphQL objects to the schema.
	 */
	public static function register(): void {
		// Set SEO field types for product children.
		$product_types = WP_GraphQL_WooCommerce::get_enabled_product_types();

		foreach ( $product_types as $graphql_type_name ) {
			Utils::overload_graphql_field_type( $graphql_type_name, 'seo', 'RankMathProductObjectSeo' );
		}

		// Register the Product Variation SEO type and apply it to the Product Variation and children.
		$type_name_for_product_variation = 'RankMathProductVariationObjectSeo';

		register_graphql_object_type(
			$type_name_for_product_variation,
			[
				'description'     => __( 'The product variation object SEO data', 'wp-graphql-rank-math' ),
				'interfaces'      => [ ContentNodeSeo::get_type_name() ],
				'fields'          => [],
				'eagerlyLoadType' => true,
			]
		);

		$product_variations = array_merge(
			[
				'ProductVariation',
			],
			WP_GraphQL_WooCommerce::get_enabled_product_variation_types(),
		);

		foreach ( $product_variations as $product_variation ) {
			Utils::overload_graphql_field_type( $product_variation, 'seo', $type_name_for_product_variation );
		}
	}
}

================
File: src/Type/WPObject/JsonLd.php
================
<?php
/**
 * The Rank Math general settings GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - JsonLd
 */
class JsonLd extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'JsonLd';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The JSON+LD information.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'raw' => [
				'type'        => 'String',
				'description' => __( 'The raw JSON+LD output', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/Settings.php
================
<?php
/**
 * The Rank Math Settings GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject;

use WPGraphQL\RankMath\Type\WPObject\Settings\General;
use WPGraphQL\RankMath\Type\WPObject\Settings\Meta;
use WPGraphQL\RankMath\Type\WPObject\Settings\Sitemap;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - Settings
 */
class Settings extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'Settings';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO site settings', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'general' => [
				'type'        => General::get_type_name(),
				'description' => __( 'General settings.', 'wp-graphql-rank-math' ),
			],
			'meta'    => [
				'type'        => Meta::get_type_name(),
				'description' => __( 'Meta settings.', 'wp-graphql-rank-math' ),
			],
			'sitemap' => [
				'type'        => Sitemap::get_type_name(),
				'description' => __( 'Sitemap settings.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/Breadcrumbs.php
================
<?php
/**
 * The Rank Math Breadcrumbs GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - Breadcrumbs
 */
class Breadcrumbs extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'Breadcrumbs';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The Breadcrumb trail.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'text'     => [
				'type'        => 'String',
				'description' => __( 'The text for the given breadcrumb', 'wp-graphql-rank-math' ),
			],
			'url'      => [
				'type'        => 'String',
				'description' => __( 'The url for the given breadcrumb', 'wp-graphql-rank-math' ),
			],
			'isHidden' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether the given breadcrumb is hidden from the schema', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/SeoObjects.php
================
<?php
/**
 * The Rank Math general settings GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 * @since 0.0.8
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject;

use WPGraphQL;
use WPGraphQL\RankMath\Type\WPInterface\ContentNodeSeo;
use WPGraphQL\RankMath\Type\WPInterface\Seo;
use WPGraphQL\RankMath\Utils\Utils;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\Registrable;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Traits\TypeNameTrait;

/**
 * Class - SeoObjects
 */
class SeoObjects implements Registrable {
	use TypeNameTrait;

	/**
	 * {@inheritDoc}
	 */
	public static function init(): void {
		add_action( 'graphql_register_types', [ static::class, 'register' ] );
	}

	/**
	 * Registers the SEO GraphQL objects to the schema.
	 */
	public static function register(): void {
		$post_types = WPGraphQL::get_allowed_post_types( 'objects' );

		foreach ( $post_types as $post_type ) {
			/** @var \WP_Post_Type $post_type */
			$type_name_for_post_object = 'RankMath' . graphql_format_type_name( $post_type->graphql_single_name . 'ObjectSeo' );
			// Register Post Object seo.
			register_graphql_object_type(
				$type_name_for_post_object,
				[
					// translators: %s is the post type name.
					'description'     => sprintf( __( 'The %s post object SEO data', 'wp-graphql-rank-math' ), $post_type->name ),
					'interfaces'      => [ ContentNodeSeo::get_type_name() ],
					'fields'          => [],
					'eagerlyLoadType' => true,
				]
			);

			// Register Post Object's SEO field.
			Utils::overload_graphql_field_type( $post_type->graphql_single_name, 'seo', $type_name_for_post_object );

			// Register Post Type seo.
			$type_name_for_post_type = 'RankMath' . graphql_format_type_name( $post_type->graphql_single_name . 'TypeSeo' );
			register_graphql_object_type(
				$type_name_for_post_type,
				[
					// translators: %s is the post type name.
					'description'     => sprintf( __( 'The %s post type object SEO data', 'wp-graphql-rank-math' ), $post_type->name ),
					'interfaces'      => [ Seo::get_type_name() ],
					'fields'          => [],
					'eagerlyLoadType' => true,
				]
			);
		}

		// Register term objects seo.
		$taxonomies = WPGraphQL::get_allowed_taxonomies( 'objects' );

		foreach ( $taxonomies as $taxonomy ) {
			/** @var \WP_Taxonomy $taxonomy */
			$type_name_for_term = 'RankMath' . graphql_format_type_name( $taxonomy->graphql_single_name . 'TermSeo' );
			register_graphql_object_type(
				$type_name_for_term,
				[
					// translators: %s is the tax term name.
					'description'     => sprintf( __( 'The %s term object SEO data', 'wp-graphql-rank-math' ), $taxonomy->name ),
					'interfaces'      => [ Seo::get_type_name() ],
					'fields'          => [],
					'eagerlyLoadType' => true,
				]
			);

			// Register Term Object's SEO field.
			Utils::overload_graphql_field_type( $taxonomy->graphql_single_name, 'seo', $type_name_for_term );
		}

		// Register user object seo.
		$type_name_for_user = 'RankMathUserSeo';
		register_graphql_object_type(
			$type_name_for_user,
			[
				'description'     => __( 'The user object SEO data', 'wp-graphql-rank-math' ),
				'interfaces'      => [ Seo::get_type_name() ],
				'fields'          => [
					'facebookProfileUrl' => [
						'type'        => 'String',
						'description' => __( 'The complete Facebook profile URL.', 'wp-graphql-rank-math' ),
					],
					'twitterUserName'    => [
						'type'        => 'String',
						'description' => __( 'Twitter Username of the user.', 'wp-graphql-rank-math' ),
					],
					'additionalProfiles' => [
						'type'        => [ 'list_of' => 'String' ],
						'description' => __( 'Additional social profile URLs to add to the sameAs property.', 'wp-graphql-rank-math' ),
					],
				],
				'eagerlyLoadType' => true,
			]
		);

		// Register User Object's SEO field.
		Utils::overload_graphql_field_type( 'User', 'seo', $type_name_for_user );
	}
}

================
File: src/Type/WPObject/SeoScore.php
================
<?php
/**
 * The Rank Math general settings GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject;

use WPGraphQL\RankMath\Type\Enum\SeoRatingEnum;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - SeoScore
 */
class SeoScore extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'SeoScore';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The Seo score information.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'badgeHtml'        => [
				'type'        => 'String',
				'description' => __( 'The html output for the Frontend SEO badge', 'wp-graphql-rank-math' ),
			],
			'hasFrontendScore' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether the SEO score should be displayed on the frontend', 'wp-graphql-rank-math' ),
			],
			'score'            => [
				'type'        => 'Integer',
				'description' => __( 'The SEO score', 'wp-graphql-rank-math' ),
			],
			'rating'           => [
				'type'        => SeoRatingEnum::get_type_name(),
				'description' => __( 'The SEO score', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/AdvancedRobotsMeta.php
================
<?php
/**
 * The Rank Math general settings GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject;

use WPGraphQL\RankMath\Type\Enum\ImagePreviewSizeEnum;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - AdvancedRobotsMeta
 */
class AdvancedRobotsMeta extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'AdvancedRobotsMeta';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The config for an advanced robots meta values.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'hasSnippet'       => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to specify a maximum text length of a snippet of your page', 'wp-graphql-rank-math' ),
			],
			'snippetLength'    => [
				'type'        => 'Int',
				'description' => __( 'The maximum text length (in characters) of the snippet. -1 for no limit.', 'wp-graphql-rank-math' ),
			],
			'hasVideoPreview'  => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to specify a maximum duration of an animated video preview.', 'wp-graphql-rank-math' ),
			],
			'videoDuration'    => [
				'type'        => 'Int',
				'description' => __( 'The maximum duration (seconds characters) of the snippet. -1 for no limit.', 'wp-graphql-rank-math' ),
			],
			'hasImagePreview'  => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to specify a maximum size of image preview to be shown for images on the page.', 'wp-graphql-rank-math' ),
			],
			'imagePreviewSize' => [
				'type'        => ImagePreviewSizeEnum::get_type_name(),
				'description' => __( 'The maximum size of image preview to be shown for images.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/OpenGraphMeta.php
================
<?php
/**
 * The Rank Math OpenGraph meta tags GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject;

use WPGraphQL\RankMath\Type\Enum\OpenGraphLocaleEnum;
use WPGraphQL\RankMath\Type\WPObject\OpenGraph;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - OpenGraphMeta
 */
class OpenGraphMeta extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'OpenGraphMeta';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The OpenGraph meta.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'articleMeta'       => [
				'type'        => OpenGraph\Article::get_type_name(),
				'description' => __( 'The OpenGraph Article meta.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?array => ! empty( $source['article'] ) ? $source['article'] : null,
			],
			'alternateLocales'  => [
				'type'        => [ 'list_of' => OpenGraphLocaleEnum::get_type_name() ],
				'description' => __( 'A list of other locales this page is available in', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source ): ?array {
					$value = ! empty( $source['og']['locale:alternate'] ) ? $source['og']['locale:alternate'] : null;

					if ( is_string( $value ) ) {
						$value = [ $value ];
					}

					return $value;
				},
			],
			'description'       => [
				'type'        => 'String',
				'description' => __( 'A brief description of the content, usually between 2 and 4 sentences. ', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['og']['description'] ) ? (string) $source['og']['description'] : null,
			],
			'image'             => [
				'type'        => OpenGraph\Image::get_type_name(),
				'description' => __( 'The OpenGraph image meta', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source ): ?array {
					$values = ! empty( $source['og']['image'] ) ? $source['og']['image'] : [];

					if ( ! empty( $source['og']['image'][0] ) ) {
						$values['url'] = (string) $source['og']['image'][0];
					}

					return ! empty( $values ) ? $values : null;
				},
			],
			'facebookMeta'      => [
				'type'        => OpenGraph\Facebook::get_type_name(),
				'description' => __( 'The Facebook OpenGraph meta values.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?array => ! empty( $source['fb'] ) ? $source['fb'] : null,

			],
			'locale'            => [
				'type'        => OpenGraphLocaleEnum::get_type_name(),
				'description' => __( 'The locale of the resource.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['og']['locale'] ) ? $source['og']['locale'] : null,
			],
			'productMeta'       => [
				'type'        => OpenGraph\Product::get_type_name(),
				'description' => __( 'The Facebook OpenGraph meta values.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ) => ! empty( $source['product'] ) ? $source['product'] : null,
			],
			'slackEnhancedData' => [
				'type'        => [ 'list_of' => OpenGraph\SlackEnhancedData::get_type_name() ],
				'description' => __( 'The Slack Enhanced Data meta values.', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source ): ?array {
					$values  = [];
					$counter = 1;

					while ( isset( $source['twitter'][ 'label' . $counter ] ) ) {
						$values[] = [
							'label' => $source['twitter'][ 'label' . $counter ],
							'data'  => $source['twitter'][ 'data' . $counter ],
						];
						++$counter;
					}

					return $values ?: null;
				},
			],
			'siteName'          => [
				'type'        => 'String',
				'description' => __( 'The name of the site this resource is associated with.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['og']['site_name'] ) ? (string) $source['og']['site_name'] : null,
			],
			'title'             => [
				'type'        => 'String',
				'description' => __( 'The title of your object as it should appear within the graph.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['og']['title'] ) ? (string) $source['og']['title'] : null,
			],
			'twitterMeta'       => [
				'type'        => OpenGraph\Twitter::get_type_name(),
				'description' => __( 'The Twitter OpenGraph meta values.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?array => ! empty( $source['twitter'] ) ? $source['twitter'] : null,
			],
			'type'              => [
				'type'        => 'String',
				'description' => __( 'The OpenGraph object type.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['og']['type'] ) ? (string) $source['og']['type'] : null,
			],
			'updatedTime'       => [
				'type'        => 'String',
				'description' => __( 'The updated time', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['og']['updated_time'] ) ? (string) $source['og']['updated_time'] : null,
			],
			'url'               => [
				'type'        => 'String',
				'description' => __( 'The canonical URL of your object that will be used as its permanent ID in the graph.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['og']['url'] ) ? (string) $source['og']['url'] : null,
			],
			'videoMeta'         => [
				'type'        => OpenGraph\Video::get_type_name(),
				'description' => __( 'The Twitter OpenGraph meta values.', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source ): ?array {
					$values = ! empty( $source['video'] ) ? $source['video'] : [];

					if ( isset( $source['og']['video'] ) ) {
						$values['url'] = $source['og']['video'];
					}

					return $values ?: null;
				},
			],
		];
	}
}

================
File: src/Type/WPObject/Settings/Meta.php
================
<?php
/**
 * The Rank Math titles and meta settings GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings;

use WPGraphQL\RankMath\Type\WPObject\Settings\Meta\AuthorArchiveMeta;
use WPGraphQL\RankMath\Type\WPObject\Settings\Meta\ContentTypeMeta;
use WPGraphQL\RankMath\Type\WPObject\Settings\Meta\DateArchiveMeta;
use WPGraphQL\RankMath\Type\WPObject\Settings\Meta\GlobalMeta;
use WPGraphQL\RankMath\Type\WPObject\Settings\Meta\HomepageMeta;
use WPGraphQL\RankMath\Type\WPObject\Settings\Meta\LocalMeta;
use WPGraphQL\RankMath\Type\WPObject\Settings\Meta\SocialMeta;
use WPGraphQL\RankMath\Type\WPObject\Settings\Meta\TaxonomyMeta;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - Meta
 */
class Meta extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'Meta';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO titles and meta site settings', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'authorArchives'               => [
				'type'        => AuthorArchiveMeta::get_type_name(),
				'description' => __( 'Author Archive settings.', 'wp-graphql-rank-math' ),
			],
			'contentTypes'                 => [
				'type'        => ContentTypeMeta::get_type_name(),
				'description' => __( 'Content type settings.', 'wp-graphql-rank-math' ),
			],
			'taxonomies'                   => [
				'type'        => TaxonomyMeta::get_type_name(),
				'description' => __( 'Taxonomy settings.', 'wp-graphql-rank-math' ),
			],
			'dateArchives'                 => [
				'type'        => DateArchiveMeta::get_type_name(),
				'description' => __( 'Date Archive settings.', 'wp-graphql-rank-math' ),
			],
			'global'                       => [
				'type'        => GlobalMeta::get_type_name(),
				'description' => __( 'Global settings.', 'wp-graphql-rank-math' ),
			],
			'local'                        => [
				'type'        => LocalMeta::get_type_name(),
				'description' => __( 'Local settings.', 'wp-graphql-rank-math' ),
			],
			'social'                       => [
				'type'        => SocialMeta::get_type_name(),
				'description' => __( 'Social settings.', 'wp-graphql-rank-math' ),
			],
			'homepage'                     => [
				'type'        => HomepageMeta::get_type_name(),
				'description' => __( 'Homepage settings. Only used is the Homepage is set to display a list of posts.', 'wp-graphql-rank-math' ),
			],
			'notFoundTitle'                => [
				'type'        => 'String',
				'description' => __( 'Title tag on 404 Not Found error page.', 'wp-graphql-rank-math' ),
			],
			'searchTitle'                  => [
				'type'        => 'String',
				'description' => __( 'Title tag on search results page.', 'wp-graphql-rank-math' ),
			],
			'shouldIndexSearch'            => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to index search result pages.', 'wp-graphql-rank-math' ),
			],
			'shouldIndexPaginatedPages'    => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to index /page/2 and further of any archive.', 'wp-graphql-rank-math' ),
			],
			'shouldIndexArchiveSubpages'   => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to index paginated archive pages from getting.', 'wp-graphql-rank-math' ),
			],
			'shouldIndexPasswordProtected' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to index password protected pages and posts.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/Settings/Sitemap.php
================
<?php
/**
 * The Rank Math sitemaps settings GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings;

use WPGraphQL\RankMath\Type\WPObject\Settings\Sitemap\Author;
use WPGraphQL\RankMath\Type\WPObject\Settings\Sitemap\ContentType;
use WPGraphQL\RankMath\Type\WPObject\Settings\Sitemap\General;
use WPGraphQL\RankMath\Type\WPObject\Settings\Sitemap\Taxonomy;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - Sitemap
 */
class Sitemap extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'Sitemap';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO titles and meta site settings', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'author'          => [
				'type'        => Author::get_type_name(),
				'description' => __( 'Author sitemap settings. Null if authors are not indexable.', 'wp-graphql-rank-math' ),
			],
			'contentTypes'    => [
				'type'        => [ 'list_of' => ContentType::get_type_name() ],
				'args'        => [
					'include' => [
						'type'        => [ 'list_of' => 'ContentTypeEnum' ],
						'description' => __( 'Limit results to specific content types.', 'wp-graphql-rank-math' ),
					],
				],
				'description' => __( 'Content types included in the sitemap.', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source, array $args ) {
					$content_types = $source['contentTypes'];

					if ( ! empty( $args['include'] ) ) {
						$content_types = array_intersect_key( $content_types, array_flip( $args['include'] ) );
					}

					return ! empty( $content_types ) ? $content_types : null;
				},
			],
			'general'         => [
				'type'        => General::get_type_name(),
				'description' => __( 'Sitemap general settings.', 'wp-graphql-rank-math' ),
			],
			'sitemapIndexUrl' => [
				'type'        => 'String',
				'description' => __( 'The URL to the sitemap index.', 'wp-graphql-rank-math' ),
			],
			'taxonomies'      => [
				'type'        => [ 'list_of' => Taxonomy::get_type_name() ],
				'args'        => [
					'include' => [
						'type'        => [ 'list_of' => 'TaxonomyEnum' ],
						'description' => __( 'Limit results to specific taxonomies.', 'wp-graphql-rank-math' ),
					],
				],
				'description' => __( 'Content types included in the sitemap.', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source, array $args ) {
					$taxonomies = $source['taxonomies'];

					if ( ! empty( $args['include'] ) ) {
						$taxonomies = array_intersect_key( $taxonomies, array_flip( $args['include'] ) );
					}

					return ! empty( $taxonomies ) ? $taxonomies : null;
				},
			],
		];
	}
}

================
File: src/Type/WPObject/Settings/General.php
================
<?php
/**
 * The Rank Math general settings GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings;

use WPGraphQL\RankMath\Type\WPObject\Settings\General\BreadcrumbsConfig;
use WPGraphQL\RankMath\Type\WPObject\Settings\General\FrontendSeoScore;
use WPGraphQL\RankMath\Type\WPObject\Settings\General\Links;
use WPGraphQL\RankMath\Type\WPObject\Settings\General\Webmaster;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - General
 */
class General extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'General';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO general site settings', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'breadcrumbs'         => [
				'type'        => BreadcrumbsConfig::get_type_name(),
				'description' => __( 'Breadcrumbs settings.', 'wp-graphql-rank-math' ),
			],
			'hasBreadcrumbs'      => [
				'type'        => 'Boolean',
				'description' => __( 'Whether RankMath breadcrumbs are enabled.', 'wp-graphql-rank-math' ),
			],
			'links'               => [
				'type'        => Links::get_type_name(),
				'description' => __( 'Link settings.', 'wp-graphql-rank-math' ),
			],
			'webmaster'           => [
				'type'        => Webmaster::get_type_name(),
				'description' => __( 'Webmaster Tools settings.', 'wp-graphql-rank-math' ),
			],
			'hasFrontendSeoScore' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to display the calculated SEO Score as a badge on the frontend. It can be disabled for specific posts in the post editor.', 'wp-graphql-rank-math' ),
			],
			'frontendSeoScore'    => [
				'type'        => FrontendSeoScore::get_type_name(),
				'description' => __( 'Frontend SEO score settings.', 'wp-graphql-rank-math' ),
			],
			'rssBeforeContent'    => [
				'type'        => 'String',
				'description' => __( 'The content to add before each post in your site feeds', 'wp-graphql-rank-math' ),
			],
			'rssAfterContent'     => [
				'type'        => 'String',
				'description' => __( 'The content to add after each post in your site feeds', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/Settings/General/FrontendSeoScore.php
================
<?php
/**
 * The FrontendSeoScore GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\General
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\General;

use WPGraphQL\RankMath\Type\Enum\SeoScorePositionEnum;
use WPGraphQL\RankMath\Type\Enum\SeoScoreTemplateTypeEnum;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - FrontendSeoScore
 */
class FrontendSeoScore extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'FrontendSeoScore';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'RankMath Frontend SEO Score settings.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'enabledPostTypes'    => [
				'type'        => [ 'list_of' => 'ContentTypeEnum' ],
				'description' => __( 'The list of post types which should display the calculated SEO score.', 'wp-graphql-rank-math' ),
			],
			'template'            => [
				'type'        => SeoScoreTemplateTypeEnum::get_type_name(),
				'description' => __( 'The list of post types which should display the calculated SEO score.', 'wp-graphql-rank-math' ),
			],
			'position'            => [
				'type'        => SeoScorePositionEnum::get_type_name(),
				'description' => __( 'Where the SEO score badges should be displayed automatically, or if the `[rank_math_seo_score]` shortcode is used instead.', 'wp-graphql-rank-math' ),
			],
			'hasRankMathBacklink' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to insert a backlink to RankMath.com to show your support, if you are showing the SEO scores on the front end.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/Settings/General/BreadcrumbsConfig.php
================
<?php
/**
 * The Breadcrumbs GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\General
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\General;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - BreadcrumbsConfig
 */
class BreadcrumbsConfig extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'BreadcrumbsConfig';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO breadcrumbs settings.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		$fields = [
			'separator'             => [
				'type'        => 'String',
				'description' => __( 'Separator character or string that appears between breadcrumb items.', 'wp-graphql-rank-math' ),
			],
			'hasHome'               => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to display the homepage breadcrumb in trail.', 'wp-graphql-rank-math' ),
			],
			'homeLabel'             => [
				'type'        => 'String',
				'description' => __( 'Label used for homepage link (first item) in breadcrumbs.', 'wp-graphql-rank-math' ),
			],
			'homeUrl'               => [
				'type'        => 'String',
				'description' => __( 'Link to use for homepage (first item) in breadcrumbs.', 'wp-graphql-rank-math' ),
			],
			'prefix'                => [
				'type'        => 'String',
				'description' => __( 'Prefix for the breadcrumb path.', 'wp-graphql-rank-math' ),
			],
			'archiveFormat'         => [
				'type'        => 'String',
				'description' => __( 'Format the label used for archive pages.', 'wp-graphql-rank-math' ),
			],
			'searchFormat'          => [
				'type'        => 'String',
				'description' => __( 'Format the label used for search results pages.', 'wp-graphql-rank-math' ),
			],
			'notFoundLabel'         => [
				'type'        => 'String',
				'description' => __( 'Label used for 404 error item in breadcrumbs.', 'wp-graphql-rank-math' ),
			],
			'hasPostTitle'          => [
				'type'        => 'Boolean',
				'description' => __( 'Whether the post title is visible in the breadcrumbs.', 'wp-graphql-rank-math' ),
			],
			'hasAncestorCategories' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to show all ancestor categories, if a category is a child category.', 'wp-graphql-rank-math' ),
			],
			'hasTaxonomyName'       => [
				'type'        => 'Boolean',
				'description' => __( 'Whether the taxonomy name is visible in the breadcrumbs.', 'wp-graphql-rank-math' ),
			],
		];

		if ( 'page' === get_option( 'show_on_front' ) && 0 < get_option( 'page_for_posts' ) ) {
			$fields['hasBlogPage'] = [
				'type'        => 'Boolean',
				'description' => __( 'Whether the Blog page is visible in the breadcrumbs. Only relevant if you have a Posts page set.', 'wp-graphql-rank-math' ),
			];
		}

		return $fields;
	}
}

================
File: src/Type/WPObject/Settings/General/Webmaster.php
================
<?php
/**
 * The Webmaster GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\General
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\General;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - Webmaster
 */
class Webmaster extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'Webmaster';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Webmaster Tools settings', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'baidu'     => [
				'type'        => 'String',
				'description' => __( 'The Baidu Webmaster Tools verification HTML code or ID.', 'wp-graphql-rank-math' ),
			],
			'bing'      => [
				'type'        => 'String',
				'description' => __( 'The Bing Webmaster Tools verification HTML code or ID.', 'wp-graphql-rank-math' ),
			],
			'google'    => [
				'type'        => 'String',
				'description' => __( 'The Google Search Console verification HTML code or ID.', 'wp-graphql-rank-math' ),
			],
			'norton'    => [
				'type'        => 'String',
				'description' => __( 'The Norton Safe Web verification HTML code or ID.', 'wp-graphql-rank-math' ),
			],
			'pinterest' => [
				'type'        => 'String',
				'description' => __( 'The Pinterest verification HTML code or ID.', 'wp-graphql-rank-math' ),
			],
			'yandex'    => [
				'type'        => 'String',
				'description' => __( 'The Yandex verification HTML code or ID.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/Settings/General/Links.php
================
<?php
/**
 * The Links GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\General
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\General;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - Links
 */
class Links extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'Links';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO links settings.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'defaultAttachmentRedirectUrl' => [
				'type'        => 'String',
				'description' => __( 'The default redirection url for attachments without a parent post', 'wp-graphql-rank-math' ),
			],
			'hasCategoryBase'              => [
				'type'        => 'Boolean',
				'description' => __( 'Whether  /category/ should be included in category archive URLs.', 'wp-graphql-rank-math' ),
			],
			'nofollowDomains'              => [
				'type'        => 'String',
				'description' => __( 'Only add `nofollow` attributes to links with the following target domains. If null, `nofollow` will be applied to <em>all</em> external domains.', 'wp-graphql-rank-math' ),
			],
			'nofollowExcludedDomains'      => [
				'type'        => 'String',
				'description' => __( '`nofollow` attributes will <em>not</em> be added to links with the following target domains.', 'wp-graphql-rank-math' ),
			],
			'shouldNofollowImageLinks'     => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to automatically add the `rel="nofollow" attribute to links pointing to external image files.', 'wp-graphql-rank-math' ),
			],
			'shouldNofollowLinks'          => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to automatically add the `rel="nofollow" attribute to external links appearing in your posts, pages, and other post types.', 'wp-graphql-rank-math' ),
			],
			'shouldOpenInNewWindow'        => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to automatically add `target="_blank"` attribute for external links appearing in your posts, pages, and other post types to make them open in a new browser tab or window.', 'wp-graphql-rank-math' ),
			],
			'shouldRedirectAttachments'    => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to redirect all attachment page URLs to the post they appear in.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/Settings/Meta/TaxonomyMeta.php
================
<?php
/**
 * The TaxonomyMeta GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\Meta
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\Meta;

use WPGraphQL\RankMath\Type\WPInterface\MetaSettingWithArchive;
use WPGraphQL\RankMath\Type\WPInterface\MetaSettingWithRobots;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - TaxonomyMeta
 */
class TaxonomyMeta extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'TaxonomyMetaSettings';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Taxonomy meta settings.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function register(): void {
		/** @var \WP_Taxonomy[] */
		$allowed_taxonomies = \WPGraphQL::get_allowed_taxonomies( 'objects', [ 'public' => true ] );

		foreach ( $allowed_taxonomies as $tax_object ) {
			$interfaces = [
				MetaSettingWithRobots::get_type_name(),
				MetaSettingWithArchive::get_type_name(),
			];

			register_graphql_object_type(
				ucfirst( $tax_object->graphql_single_name ) . 'MetaSettings',
				[
					'description' => sprintf(
					// translators: post type name.
						__( 'The RankMath SEO meta settings for %s.', 'wp-graphql-rank-math' ),
						$tax_object->label,
					),
					'interfaces'  => $interfaces,
					'fields'      => self::get_child_type_fields( $tax_object ),
				]
			);
		}

		parent::register();
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		/** @var \WP_Taxonomy[] */
		$allowed_taxonomies = \WPGraphQL::get_allowed_taxonomies( 'objects', [ 'public' => true ] );

		$fields = [];

		foreach ( $allowed_taxonomies as $tax_object ) {
			$fields[ lcfirst( $tax_object->graphql_single_name ) ] = [
				'type'        => $tax_object->graphql_single_name . 'MetaSettings',
				'description' => sprintf(
					// translators: taxonomy name.
					__( 'The RankMath SEO meta settings for %s.', 'wp-graphql-rank-math' ),
					$tax_object->label,
				),
			];
		}

		return $fields;
	}

	/**
	 * Get the fields for the provided content type.
	 *
	 * @param \WP_Taxonomy $tax_object .
	 *
	 * @return array<string, array<string, string>>
	 */
	public static function get_child_type_fields( \WP_Taxonomy $tax_object ): array {
		$fields = [
			'hasCustomRobotsMeta'     => [
				'type'        => 'Boolean',
				'description' => __( 'Whether custom robots meta for author page are set. Otherwise the default meta will be used, as set in the Global Meta tab.', 'wp-graphql-rank-math' ),
			],
			'hasSlackEnhancedSharing' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to show additional information (name & total number of posts) when an author archive is shared on Slack.', 'wp-graphql-rank-math' ),
			],
		];

		if ( 'post_format' !== $tax_object->name ) {
			$fields['hasSeoControls'] = [
				'type'        => 'Boolean',
				'description' => __( 'Whether the SEO Controls meta box for user profile pages is enabled.', 'wp-graphql-rank-math' ),
			];
			$fields['hasSnippetData'] = [
				'type'        => 'Boolean',
				'description' => __( 'Whether to include snippet data for this taxonomy.', 'wp-graphql-rank-math' ),
			];
		}

		return $fields;
	}
}

================
File: src/Type/WPObject/Settings/Meta/HomepageMeta.php
================
<?php
/**
 * The HomepageMeta GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\Meta
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\Meta;

use WPGraphQL\AppContext;
use WPGraphQL\RankMath\Type\WPInterface\MetaSettingWithRobots;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithInterfaces;

/**
 * Class - HomepageMeta
 */
class HomepageMeta extends ObjectType implements TypeWithInterfaces {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'HomepageMetaSettings';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Homepage settings. Only used when the Settings > Reading > Your homepage displays is set to `Your latest posts`.', 'wp-graphql-rank-math' );
	}

		/**
		 * {@inheritDoc}
		 */
	public static function get_interfaces(): array {
		return [
			MetaSettingWithRobots::get_type_name(),
		];
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'title'               => [
				'type'        => 'String',
				'description' => __( 'Title tag.', 'wp-graphql-rank-math' ),
			],
			'description'         => [
				'type'        => 'String',
				'description' => __( 'Meta description.', 'wp-graphql-rank-math' ),
			],
			'hasCustomRobotsMeta' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether custom robots meta for author page are set. Otherwise the default meta will be used, as set in the Global Meta tab.', 'wp-graphql-rank-math' ),
			],
			'socialTitle'         => [
				'type'        => 'String',
				'description' => __( 'Title when shared on Facebook, Twitter and other social networks.', 'wp-graphql-rank-math' ),
			],
			'socialDescription'   => [
				'type'        => 'String',
				'description' => __( 'Description when shared on Facebook, Twitter and other social networks.', 'wp-graphql-rank-math' ),
			],
			'socialImage'         => [
				'type'        => 'MediaItem',
				'description' => __( 'Image displayed when your homepage is shared on Facebook and other social networks.', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source, array $args, AppContext $context ) {
					return ! empty( $source['socialImageId'] ) ? $context->get_loader( 'post' )->load_deferred( $source['socialImageId'] ) : null;
				},
			],
		];
	}
}

================
File: src/Type/WPObject/Settings/Meta/GlobalMeta.php
================
<?php
/**
 * The GlobalMeta GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\Meta
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\Meta;

use WPGraphQL\AppContext;
use WPGraphQL\RankMath\Type\Enum\TwitterCardTypeEnum;
use WPGraphQL\RankMath\Type\WPInterface\MetaSettingWithRobots;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithInterfaces;

/**
 * Class - GlobalMeta
 */
class GlobalMeta extends ObjectType implements TypeWithInterfaces {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'GlobalMetaSettings';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Global settings.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_interfaces(): array {
		return [
			MetaSettingWithRobots::get_type_name(),
		];
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		$fields = [
			'openGraphImage'             => [
				'type'        => 'MediaItem',
				'description' => __( 'When a featured image or an OpenGraph Image is not set for individual posts/pages/CPTs, this image will be used as a fallback thumbnail when your post is shared on Facebook.', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source, array $args, AppContext $context ) {
					return ! empty( $source['openGraphImageId'] ) ? $context->get_loader( 'post' )->load_deferred( $source['openGraphImageId'] ) : null;
				},
			],
			'separator'                  => [
				'type'        => 'String',
				'description' => __( 'The separator character used in titles.', 'wp-graphql-rank-math' ),
			],
			'shouldCapitalizeTitles'     => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to automatically capitalize the first character of each word in the titles.', 'wp-graphql-rank-math' ),
			],
			'shouldIndexEmptyTaxonomies' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to index enpty Taxonomy archives', 'wp-graphql-rank-math' ),
			],
			'twitterCardType'            => [
				'type'        => TwitterCardTypeEnum::get_type_name(),
				'description' => __( 'Card type selected when creating a new post. This will also be applied for posts without a card type selected.', 'wp-graphql-rank-math' ),
			],
		];

		if ( ! current_theme_supports( 'title-tag' ) ) {
			$fields['shouldRewriteTitle'] = [
				'type'        => 'Boolean',
				'description' => __( 'Whether titles for page, post, category, search, and archive pages can be rewritten. Only visible in themes without title-tag support', 'wp-graphql-rank-math' ),
			];
		}

		return $fields;
	}
}

================
File: src/Type/WPObject/Settings/Meta/DateArchiveMeta.php
================
<?php
/**
 * The DateArchiveMeta GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\Meta
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\Meta;

use WPGraphQL\RankMath\Type\WPInterface\MetaSettingWithArchive;
use WPGraphQL\RankMath\Type\WPInterface\MetaSettingWithRobots;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithInterfaces;

/**
 * Class - DateArchiveMeta
 */
class DateArchiveMeta extends ObjectType implements TypeWithInterfaces {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'DateArchiveMetaSettings';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO DateArchive meta settings.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_interfaces(): array {
		return [
			MetaSettingWithArchive::get_type_name(),
			MetaSettingWithRobots::get_type_name(),
		];
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'hasArchives' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether archives are enabled.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/Settings/Meta/ContentTypeMeta.php
================
<?php
/**
 * The ContentTypeMeta GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\Meta
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\Meta;

use GraphQL\Error\UserError;
use RankMath\Helper;
use WPGraphQL\AppContext;
use WPGraphQL\RankMath\Type\Enum\ArticleTypeEnum;
use WPGraphQL\RankMath\Type\Enum\BulkEditingTypeEnum;
use WPGraphQL\RankMath\Type\Enum\SnippetTypeEnum;
use WPGraphQL\RankMath\Type\WPInterface\MetaSettingWithArchive;
use WPGraphQL\RankMath\Type\WPInterface\MetaSettingWithRobots;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - ContentTypeMeta
 */
class ContentTypeMeta extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'ContentTypeMetaSettings';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Post Type settings.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function register(): void {
		/** @var \WP_Post_Type[] */
		$allowed_post_types = \WPGraphQL::get_allowed_post_types( 'objects', [ 'public' => true ] );

		foreach ( $allowed_post_types as $post_type_object ) {
			// Skip attachment meta if redirection is enabled.
			if ( 'attachment' === $post_type_object->name && Helper::get_settings( 'general.attachment_redirect_urls', true ) ) {
				continue;
			}

			$interfaces = [
				MetaSettingWithRobots::get_type_name(),
			];
			if ( $post_type_object->has_archive ) {
				$interfaces[] = MetaSettingWithArchive::get_type_name();
			}

			register_graphql_object_type(
				ucfirst( $post_type_object->graphql_single_name ) . 'MetaSettings',
				[
					'description' => sprintf(
					// translators: post type name.
						__( 'The RankMath SEO meta settings for %s.', 'wp-graphql-rank-math' ),
						$post_type_object->label,
					),
					'interfaces'  => $interfaces,
					'fields'      => self::get_child_type_fields( $post_type_object ),
				]
			);
		}

		parent::register();
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		/** @var \WP_Post_Type[] */
		$allowed_post_types = \WPGraphQL::get_allowed_post_types( 'objects', [ 'public' => true ] );

		$fields = [];

		foreach ( $allowed_post_types as $post_type_object ) {

			// Skip attachment meta if redirection is enabled.
			if ( 'attachment' === $post_type_object->name && Helper::get_settings( 'general.attachment_redirect_urls', true ) ) {
				continue;
			}

			$fields[ lcfirst( $post_type_object->graphql_single_name ) ] = [
				'type'        => $post_type_object->graphql_single_name . 'MetaSettings',
				'description' => sprintf(
					// translators: post type name.
					__( 'The RankMath SEO meta settings for %s.', 'wp-graphql-rank-math' ),
					$post_type_object->label,
				),
			];
		}

		return $fields;
	}

	/**
	 * Get the fields for the provided content type.
	 *
	 * @param \WP_Post_Type $post_type_object .
	 *
	 * @return array<string, array<string, mixed>>
	 */
	public static function get_child_type_fields( \WP_Post_Type $post_type_object ): array {
		$fields = [
			'title'                   => [
				'type'        => 'String',
				'description' => sprintf(
					// translators: post type label.
					__( 'Default title tag for single %s pages.', 'wp-graphql-rank-math' ),
					$post_type_object->label,
				),
			],
			'description'             => [
				'type'        => 'String',
				'description' => sprintf(
					// translators: post type label.
					__( 'Default description for single %s pages.', 'wp-graphql-rank-math' ),
					$post_type_object->label,
				),
			],
			'snippetType'             => [
				'type'        => SnippetTypeEnum::get_type_name(),
				'description' => sprintf(
					// translators: post type label.
					__( 'Default rich snippet select when creating a new %s.', 'wp-graphql-rank-math' ),
					$post_type_object->label,
				),
			],
			'articleType'             => [
				'type'        => ArticleTypeEnum::get_type_name(),
				'description' => sprintf(
					// translators: post type label.
					__( 'Default article type when creating a new %s.', 'wp-graphql-rank-math' ),
					$post_type_object->label,
				),
			],
			'snippetHeadline'         => [
				'type'        => 'String',
				'description' => __( 'Default rich snippet headline.', 'wp-graphql-rank-math' ),
			],
			'snippetDescription'      => [
				'type'        => 'String',
				'description' => __( 'Default rich snippet headline.', 'wp-graphql-rank-math' ),
			],
			'hasCustomRobotsMeta'     => [
				'type'        => 'Boolean',
				'description' => __( 'Whether custom robots meta for author page are set. Otherwise the default meta will be used, as set in the Global Meta tab.', 'wp-graphql-rank-math' ),
			],
			'hasLinkSuggestions'      => [
				'type'        => 'Boolean',
				'description' => __( 'Whether Link Suggestions meta box and the Pillar Content featured are enabled for this post type.', 'wp-graphql-rank-math' ),
			],
			'shouldUseFocusKeyword'   => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to use the Focus Keyword as the default text for the links instead of the post titles.', 'wp-graphql-rank-math' ),
			],
			'hasBulkEditing'          => [
				'type'        => BulkEditingTypeEnum::get_type_name(),
				'description' => __( 'Whether to list bulk editing columns to the post listing screen.', 'wp-graphql-rank-math' ),
			],
			'socialImage'             => [
				'type'        => 'MediaItem',
				'description' => __( 'The default image to display when sharing this post type on social media', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source, array $args, AppContext $context ) {
					return ! empty( $source['socialImage'] ) ? $context->get_loader( 'post' )->load_deferred( $source['socialImage'] ) : null;
				},
			],
			'hasSlackEnhancedSharing' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to show additional information (name & total number of posts) when an author archive is shared on Slack.', 'wp-graphql-rank-math' ),
			],
			'hasSeoControls'          => [
				'type'        => 'Boolean',
				'description' => __( 'Whether the SEO Controls meta box for user profile pages is enabled.', 'wp-graphql-rank-math' ),
			],
			'analyzedFields'          => [
				'type'        => [ 'list_of' => 'String' ],
				'description' => __( 'List of custom fields name to include in the Page analysis', 'wp-graphql-rank-math' ),
			],
		];

		$all_taxonomies = Helper::get_object_taxonomies( $post_type_object->name );
		$all_taxonomies = is_array( $all_taxonomies ) && ! empty( $all_taxonomies ) ? $all_taxonomies : [];

		$allowed_taxonomies = \WPGraphQL::get_allowed_taxonomies( 'names', [ 'public' => true ] );

		$taxonomies = array_intersect( $all_taxonomies, $allowed_taxonomies );

		if ( ! empty( $taxonomies ) ) {
			$fields['primaryTaxonomy'] = [
				'type'        => 'TaxonomyEnum',
				'description' => __( 'The taxonomy used with the Primary Term Feature and displayed in the Breadcrumbs.', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source ) use ( $allowed_taxonomies ) {
					if ( ! in_array( $source, $allowed_taxonomies, true ) ) {
						throw new UserError(
							sprintf(
								// translators: taxonomy name.
								esc_html__( 'The %s post type is not available in WPGraphQL', 'wp-graphql-rank-math' ),
								esc_html( $source )
							)
						);
					}
				},
			];
		}

		if ( $post_type_object->has_archive ) {
			unset( $fields['socialImage'] );
		}

		if ( in_array( $post_type_object->name, [ 'product', 'download', 'rank_math_locations' ], true ) ) {
			unset( $fields['snippetDescription'] );
			unset( $fields['snippetHeadline'] );
		}

		if ( 'attachment' === $post_type_object->name ) {
			unset( $fields['hasLinkSuggestions'] );
			unset( $fields['shouldUseFocusKeyword'] );
			unset( $fields['hasSlackEnhancedSharing'] );
		}

		if ( defined( 'WEBSTORIES_VERSION' ) && 'web-story' === $post_type_object->name ) {
			unset( $fields['snippetDescription'] );
			unset( $fields['description'] );
			unset( $fields['hasLinkSuggestions'] );
			unset( $fields['shouldUseFocusKeyword'] );
			unset( $fields['analyzedFields'] );
			unset( $fields['hasBulkEditing'] );
			unset( $fields['hasSeoControls'] );
		}

		return $fields;
	}
}

================
File: src/Type/WPObject/Settings/Meta/SocialMeta.php
================
<?php
/**
 * The SocialMeta GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\Meta
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\Meta;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - SocialMeta
 */
class SocialMeta extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'SocialMetaSettings';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Social settings.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'facebookPageUrl'    => [
				'type'        => 'String',
				'description' => __( 'The complete Facebook page URL.', 'wp-graphql-rank-math' ),
			],
			'facebookAuthorUrl'  => [
				'type'        => 'String',
				'description' => __( 'The personal Facebook profile URL used to show authorship when articles are shared on Facebook.', 'wp-graphql-rank-math' ),
			],
			'facebookAdminId'    => [
				'type'        => [ 'list_of' => 'Int' ],
				'description' => __( 'A list of numeric Facebook admin User Ids.', 'wp-graphql-rank-math' ),
			],
			'facebookAppId'      => [
				'type'        => 'Int',
				'description' => __( 'The facebook Facebook app ID.', 'wp-graphql-rank-math' ),
			],
			'twitterAuthorName'  => [
				'type'        => 'String',
				'description' => __( 'Twitter Username of the auther used in the `twitter:creater` tag.', 'wp-graphql-rank-math' ),
			],
			'additionalProfiles' => [
				'type'        => [ 'list_of' => 'String' ],
				'description' => __( 'Additional social profile URLs to add to the sameAs property for the Organization Schema.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/Settings/Meta/AuthorArchiveMeta.php
================
<?php
/**
 * The AuthorArchiveMeta GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\Meta
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\Meta;

use WPGraphQL\RankMath\Type\WPInterface\MetaSettingWithArchive;
use WPGraphQL\RankMath\Type\WPInterface\MetaSettingWithRobots;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithInterfaces;

/**
 * Class - AuthorArchiveMeta
 */
class AuthorArchiveMeta extends ObjectType implements TypeWithInterfaces {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'AuthorArchiveMetaSettings';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Author Archive meta settings.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_interfaces(): array {
		return [
			MetaSettingWithArchive::get_type_name(),
			MetaSettingWithRobots::get_type_name(),
		];
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'baseSlug'                => [
				'type'        => 'String',
				'description' => __( 'Change the `/author/` part in author archive URLs.', 'wp-graphql-rank-math' ),
			],
			'hasArchives'             => [
				'type'        => 'Boolean',
				'description' => __( 'Whether author archives are enabled.', 'wp-graphql-rank-math' ),
			],
			'hasCustomRobotsMeta'     => [
				'type'        => 'Boolean',
				'description' => __( 'Whether custom robots meta for author page are set. Otherwise the default meta will be used, as set in the Global Meta tab.', 'wp-graphql-rank-math' ),
			],
			'hasSlackEnhancedSharing' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to show additional information (name & total number of posts) when an author archive is shared on Slack.', 'wp-graphql-rank-math' ),
			],
			'hasSeoControls'          => [
				'type'        => 'Boolean',
				'description' => __( 'Whether the SEO Controls meta box for user profile pages is enabled.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/Settings/Meta/LocalMeta.php
================
<?php
/**
 * The LocalMeta GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\Meta
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\Meta;

use WPGraphQL\AppContext;
use WPGraphQL\RankMath\Type\Enum\KnowledgeGraphTypeEnum;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - LocalMeta
 */
class LocalMeta extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'LocalMetaSettings';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Local settings.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'type' => [
				'type'        => KnowledgeGraphTypeEnum::get_type_name(),
				'description' => __( 'Whether the site represents a person or an organization.', 'wp-graphql-rank-math' ),
			],
			'name' => [
				'type'        => 'String',
				'description' => __( 'Your name or company name to be used in Google\'s Knowledge Graph', 'wp-graphql-rank-math' ),
			],
			'logo' => [
				'type'        => 'MediaItem',
				'description' => __( 'The logo to be used in the Google\'s Knowledge Graph.', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source, array $args, AppContext $context ) {
					return ! empty( $source['logoId'] ) ? $context->get_loader( 'post' )->load_deferred( $source['logoId'] ) : null;
				},
			],
			'url'  => [
				'type'        => 'String',
				'description' => __( 'URL of the item.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/Settings/Sitemap/Taxonomy.php
================
<?php
/**
 * The Taxonomy sitemap GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\Sitemap
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\Sitemap;

use RankMath\Helper;
use WPGraphQL\Data\Connection\TermObjectConnectionResolver;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithConnections;

/**
 * Class - Taxonomy
 */
class Taxonomy extends ObjectType implements TypeWithConnections {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'SitemapTaxonomySettings';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_connections(): array {
		return [
			'connectedTerms' => [
				'toType'      => 'TermNode',
				'description' => __( 'The connected terms whose URLs are included in the sitemap', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source, $args, $context, $info ) {
					if ( empty( $source['isInSitemap'] ) ) {
						return null;
					}

					$resolver = new TermObjectConnectionResolver( $source, $args, $context, $info, $source['type'] );

					$excluded_term_ids = Helper::get_settings( 'sitemap.exclude_terms' );
					$excluded_term_ids = ! empty( $excluded_term_ids ) ? array_map( 'absint', explode( ',', $excluded_term_ids ) ) : null;

					if ( ! empty( $excluded_term_ids ) ) {
						$resolver->set_query_arg( 'exclude', $excluded_term_ids );
					}

					return $resolver->get_connection();
				},
			],
		];
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Sitemap general settings.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'hasEmptyTerms' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether to archive pages of terms that have no posts associated.', 'wp-graphql-rank-math' ),
			],
			'isInSitemap'   => [
				'type'        => 'Boolean',
				'description' => __( 'Whether the content type is included in the sitemap.', 'wp-graphql-rank-math' ),
			],
			'sitemapUrl'    => [
				'type'        => 'String',
				'description' => __( 'The sitemap URL.', 'wp-graphql-rank-math' ),
			],
			'type'          => [
				'type'        => 'TaxonomyEnum',
				'description' => __( 'The taxonomy type.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/Settings/Sitemap/ContentType.php
================
<?php
/**
 * The ContentType sitemap GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\Sitemap
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\Sitemap;

use RankMath\Helper;
use WPGraphQL\Data\Connection\PostObjectConnectionResolver;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithConnections;

/**
 * Class - ContentType
 */
class ContentType extends ObjectType implements TypeWithConnections {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'SitemapContentTypeSettings';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_connections(): array {
		return [
			'connectedContentNodes' => [
				'toType'      => 'ContentNode',
				'description' => __( 'The connected content nodes whose URLs are included in the sitemap', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source, $args, $context, $info ) {
					if ( empty( $source['isInSitemap'] ) ) {
						return null;
					}

					$resolver = new PostObjectConnectionResolver( $source, $args, $context, $info, $source['type'] );

					$excluded_post_ids = Helper::get_settings( 'sitemap.exclude_posts' );
					$excluded_post_ids = ! empty( $excluded_post_ids ) ? array_map( 'absint', explode( ',', $excluded_post_ids ) ) : null;

					if ( ! empty( $excluded_post_ids ) ) {
						$resolver->set_query_arg( 'post__not_in', $excluded_post_ids );
					}

					return $resolver->get_connection();
				},
			],
		];
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Sitemap general settings.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'customImageMetaKeys' => [
				'type'        => [ 'list_of' => 'String' ],
				'description' => __( 'List of custom field (post meta) names which contain image URLs to include them in the sitemaps.', 'wp-graphql-rank-math' ),
			],
			'isInSitemap'         => [
				'type'        => 'Boolean',
				'description' => __( 'Whether the content type is included in the sitemap.', 'wp-graphql-rank-math' ),
			],
			'sitemapUrl'          => [
				'type'        => 'String',
				'description' => __( 'The sitemap URL.', 'wp-graphql-rank-math' ),
			],
			'type'                => [
				'type'        => 'ContentTypeEnum',
				'description' => __( 'The content type.', 'wp-graphql-rank-math' ),
			],

		];
	}
}

================
File: src/Type/WPObject/Settings/Sitemap/General.php
================
<?php
/**
 * The General sitemap GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\Sitemap
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\Sitemap;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - General
 */
class General extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'SitemapGeneralSettings';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Sitemap general settings.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'canPingSearchEngines'    => [
				'type'              => 'Boolean',
				'deprecationReason' => __( 'This feature is no longer supported by Google, and has been removed from RankMath v1.0.211+.', 'wp-graphql-rank-math' ),
				'description'       => __( 'Whether to notify search engines when the sitemap is updated.', 'wp-graphql-rank-math' ),
			],
			'excludedPostDatabaseIds' => [
				'type'        => [ 'list_of' => 'Int' ],
				'description' => __( 'A list of post IDs excluded from the sitemap. This option **applies** to all posts types including posts, pages, and custom post types.', 'wp-graphql-rank-math' ),
			],
			'excludedTermDatabaseIds' => [
				'type'        => [ 'list_of' => 'Int' ],
				'description' => __( 'A list of term IDs excluded from the sitemap. This option **applies** to all taxonomies.', 'wp-graphql-rank-math' ),
			],
			'hasFeaturedImage'        => [
				'type'        => 'Boolean',
				'description' => __( 'Whether the Featured Image is included in sitemaps too, even if it does not appear directly in the post content.', 'wp-graphql-rank-math' ),
			],
			'hasImages'               => [
				'type'        => 'Boolean',
				'description' => __( 'Whether reference to images from the post content is included in sitemaps.', 'wp-graphql-rank-math' ),
			],
			'linksPerSitemap'         => [
				'type'        => 'Int',
				'description' => __( 'Max number of links on each sitemap page.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/Settings/Sitemap/Author.php
================
<?php
/**
 * The Author sitemap GraphQL object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject\Settings\Sitemap
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\Settings\Sitemap;

use WPGraphQL\Data\Connection\UserConnectionResolver;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithConnections;

/**
 * Class - Author
 */
class Author extends ObjectType implements TypeWithConnections {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'SitemapAuthorSettings';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_connections(): array {
		return [
			'connectedAuthors' => [
				'toType'      => 'User',
				'description' => __( 'The connected authors whose URLs are included in the sitemap', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source, $args, $context, $info ) {
					$resolver = new UserConnectionResolver( $source, $args, $context, $info );

					if ( ! empty( $source->excludedRoles ) ) {
						$resolver->set_query_arg( 'role__not_in', $source->excludedRoles );
					}

					if ( ! empty( $source->excludedUserDatabaseIds ) ) {
						$resolver->set_query_arg( 'exclude', $source->excludedUserDatabaseIds );
					}

					return $resolver->get_connection();
				},
			],
		];
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Sitemap general settings.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'excludedRoles'           => [
				'type'        => [ 'list_of' => 'UserRoleEnum' ],
				'description' => __( 'List of user roles excluded from the sitemap.', 'wp-graphql-rank-math' ),
			],
			'excludedUserDatabaseIds' => [
				'type'        => [ 'list_of' => 'Int' ],
				'description' => __( 'List of user IDs excluded from the sitemap.', 'wp-graphql-rank-math' ),
			],
			'sitemapUrl'              => [
				'type'        => 'String',
				'description' => __( 'The sitemap URL.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/OpenGraph/Product.php
================
<?php
/**
 * The Rank Math Facebook OpenGraph meta tags GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\OpenGraph;

use WPGraphQL\RankMath\Type\Enum\OpenGraphProductAvailabilityEnum;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - Product
 */
class Product extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'Product';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The OpenGraph Product meta.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'brand'        => [
				'type'        => 'String',
				'description' => __( 'The brand of the product.', 'wp-graphql-rank-math' ),
			],
			'price'        => [
				'type'        => 'Float',
				'description' => __( 'The price of the object', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source ): ?float {
					return ! empty( $source['price']['amount'] ) ? (float) $source['price']['amount'] : null;
				},
			],
			'currency'     => [
				'type'        => 'String',
				'description' => __( 'The currency of the object price.', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source ): ?string {
					return ! empty( $source['price']['currency'] ) ? (string) $source['price']['currency'] : null;
				},
			],
			'availability' => [
				'type'        => OpenGraphProductAvailabilityEnum::get_type_name(),
				'description' => __( 'The currency of the object price.', 'wp-graphql-rank-math' ),
			],

		];
	}
}

================
File: src/Type/WPObject/OpenGraph/Video.php
================
<?php
/**
 * The Rank Math Facebook OpenGraph meta tags GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\OpenGraph;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - Video
 */
class Video extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'OpenGraphVideo';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The OpenGraph Video meta.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'url'      => [
				'type'        => 'String',
				'description' => __( 'The URL of the video.', 'wp-graphql-rank-math' ),
			],
			'duration' => [
				'type'        => 'String',
				'description' => __( 'The duration of the video.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/OpenGraph/Twitter.php
================
<?php
/**
 * The Rank Math Twitter OpenGraph meta tags GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\OpenGraph;

use WPGraphQL\RankMath\Type\Enum\TwitterCardTypeEnum;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - Twitter
 */
class Twitter extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'OpenGraphTwitter';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The OpenGraph Twitter meta.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'card'                    => [
				'type'        => TwitterCardTypeEnum::get_type_name(),
				'description' => __( 'The Twitter card type', 'wp-graphql-rank-math' ),
			],
			'title'                   => [
				'type'        => 'String',
				'description' => __( 'Title of content', 'wp-graphql-rank-math' ),
			],
			'description'             => [
				'type'        => 'String',
				'description' => __( 'Description of content (maximum 200 characters)', 'wp-graphql-rank-math' ),
			],
			'appCountry'              => [
				'type'        => 'String',
				'description' => __( 'The app country.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['app:country'] ) ? (string) $source['app:country'] : null,
			],
			'ipadApp'                 => [
				'type'        => TwitterApp::get_type_name(),
				'description' => __( 'The Twitter iPad app meta', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?array => self::get_app_meta( $source, 'ipad' ),
			],
			'iphoneApp'               => [
				'type'        => TwitterApp::get_type_name(),
				'description' => __( 'The Twitter iPhone app meta', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?array => self::get_app_meta( $source, 'iphone' ),
			],
			'googleplayApp'           => [
				'type'        => TwitterApp::get_type_name(),
				'description' => __( 'The Twitter Google Play app meta', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?array => self::get_app_meta( $source, 'googleplay' ),
			],
			'playerUrl'               => [
				'type'        => 'Int',
				'description' => __( 'URL of the twitter player.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?int => ! empty( $source['player'] ) ? (int) $source['player'] : null,
			],
			'playerStream'            => [
				'type'        => 'String',
				'description' => __( 'URL to raw video or audio stream', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['player:stream'] ) ? (string) $source['player:stream'] : null,
			],
			'site'                    => [
				'type'        => 'String',
				'description' => __( '@username of website', 'wp-graphql-rank-math' ),
			],
			'playerStreamContentType' => [
				'type'        => 'String',
				'description' => __( 'The content type of the stream', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['player:stream:content_type'] ) ? (string) $source['player:stream:content_type'] : null,
			],
			'image'                   => [
				'type'        => 'String',
				'description' => __( 'URL of image to use in the card.', 'wp-graphql-rank-math' ),
			],
			'creator'                 => [
				'type'        => 'String',
				'description' => __( '@username of content creator', 'wp-graphql-rank-math' ),
			],

		];
	}

	/**
	 * Get the app meta for the twitter app type.
	 *
	 * @param array<string, mixed> $source The values from the resolver.
	 * @param string               $type The app type.
	 *
	 * @return ?array<string, mixed>
	 */
	protected static function get_app_meta( array $source, string $type ): ?array {
		$values = [];

		if ( ! empty( $source[ 'app:name:' . $type ] ) ) {
			$values['name'] = $source[ 'app:name:' . $type ];
		}
		if ( ! empty( $source[ 'app:id:' . $type ] ) ) {
			$values['id'] = $source[ 'app:id:' . $type ];
		}
		if ( ! empty( $source[ 'app:url:' . $type ] ) ) {
			$values['url'] = $source[ 'app:url:' . $type ];
		}

		return $values ?: null;
	}
}

================
File: src/Type/WPObject/OpenGraph/SlackEnhancedData.php
================
<?php
/**
 * The Rank Math SlackEnhancedData OpenGraph meta tags GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\OpenGraph;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - SlackEnhancedData
 */
class SlackEnhancedData extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'OpenGraphSlackEnhancedData';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The Enhanced Data Tags for Slack Sharing.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'label' => [
				'type'        => 'String',
				'description' => __( 'The Enhanced Data label', 'wp-graphql-rank-math' ),
			],
			'data'  => [
				'type'        => 'String',
				'description' => __( 'The Enhanced Data', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/OpenGraph/TwitterApp.php
================
<?php
/**
 * The Rank Math TwitterApp OpenGraph meta tags GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\OpenGraph;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - TwitterApp
 */
class TwitterApp extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'OpenGraphTwitterApp';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The OpenGraph Twitter App meta.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'name' => [
				'type'        => 'String',
				'description' => __( 'The name of the Twitter app.', 'wp-graphql-rank-math' ),
			],
			'id'   => [
				'type'        => 'ID',
				'description' => __( 'The App ID .', 'wp-graphql-rank-math' ),
			],
			'url'  => [
				'type'        => 'String',
				'description' => __( 'Your app\â€™s custom URL scheme.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPObject/OpenGraph/Article.php
================
<?php
/**
 * The Rank Math Facebook OpenGraph meta tags GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\OpenGraph;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - Article
 */
class Article extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'OpenGraphArticle';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The OpenGraph Article meta.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'modifiedTime'  => [
				'type'        => 'String',
				'description' => __( 'The date modified.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['modified_time'] ) ? (string) $source['modified_time'] : null,
			],
			'publishedTime' => [
				'type'        => 'String',
				'description' => __( 'The date published.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['published_time'] ) ? (string) $source['published_time'] : null,
			],
			'publisher'     => [
				'type'        => 'String',
				'description' => __( 'The publisher', 'wp-graphql-rank-math' ),
			],
			'author'        => [
				'type'        => 'String',
				'description' => __( 'The author.', 'wp-graphql-rank-math' ),
			],
			'tags'          => [
				'type'        => [ 'list_of' => 'String' ],
				'description' => __( 'The article tags.', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source ): ?array {
					$value = ! empty( $source['tag'] ) ? $source['tag'] : null;

					if ( empty( $value ) ) {
						return null;
					}

					if ( ! is_array( $value ) ) {
						$value = [ (string) $value ];
					}

					// Ensure all tags are strings.
					$value = array_map( 'strval', $value );

					return $value;
				},
			],
			'section'       => [
				'type'        => 'String',
				'description' => __( 'The article category.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['section'] ) ? (string) $source['section'] : null,
			],
		];
	}
}

================
File: src/Type/WPObject/OpenGraph/Facebook.php
================
<?php
/**
 * The Rank Math Facebook OpenGraph meta tags GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\OpenGraph;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - Facebook
 */
class Facebook extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'OpenGraphFacebook';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The OpenGraph Facebook meta.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'appId'  => [
				'type'        => 'ID',
				'description' => __( 'The Facebook app ID associated with this resource', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['app_id'] ) ? (string) $source['app_id'] : null,
			],
			'admins' => [
				'type'        => [ 'list_of' => 'String' ],
				'description' => __( 'The Facebook admins associated with this resource', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source ): ?array {
					$value = ! empty( $source['admins'] ) ? $source['admins'] : null;

					if ( empty( $value ) ) {
						return null;
					}

					if ( ! is_array( $value ) ) {
						$value = [ (string) $value ];
					}

					// Ensure all tags are strings.
					$value = array_map( 'strval', $value );

					return $value;
				},
			],
		];
	}
}

================
File: src/Type/WPObject/OpenGraph/Image.php
================
<?php
/**
 * The Rank Math Image OpenGraph meta tags GraphQL Object.
 *
 * @package WPGraphQL\RankMath\Type\WPObject
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPObject\OpenGraph;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - Image
 */
class Image extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'OpenGraphImage';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The OpenGraph Image meta.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'url'       => [
				'type'        => 'String',
				'description' => __( 'URL for the image.', 'wp-graphql-rank-math' ),
			],
			'secureUrl' => [
				'type'        => 'String',
				'description' => __( 'The https:// URL for the image.', 'wp-graphql-rank-math' ),
				'resolve'     => static fn ( $source ): ?string => ! empty( $source['secure_url'] ) ? (string) $source['secure_url'] : null,
			],
			'type'      => [
				'type'        => 'String', // @todo
				'description' => __( 'MIME type of the image. ', 'wp-graphql-rank-math' ),
			],
			'width'     => [
				'type'        => 'Float',
				'description' => __( 'Width of image in pixels.', 'wp-graphql-rank-math' ),
			],
			'height'    => [
				'type'        => 'Float',
				'description' => __( 'Height of image in pixels. ', 'wp-graphql-rank-math' ),
			],

		];
	}
}

================
File: src/Type/Enum/SeoRatingEnum.php
================
<?php
/**
 * The SEO Rating enum.
 *
 * @package WPGraphQL\RankMath\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\Enum;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;

/**
 * Class - SeoRatingEnum
 */
class SeoRatingEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'SeoRatingEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The SEO rating', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		return [
			'UNKNOWN' => [
				'description' => __( 'Unknown score.', 'wp-graphql-rank-math' ),
				'value'       => 'unknown',
			],
			'BAD'     => [
				'description' => __( 'Bad ( < 50 ) score', 'wp-graphql-rank-math' ),
				'value'       => 'bad',
			],
			'GOOD'    => [
				'description' => __( 'Good (50-79) score', 'wp-graphql-rank-math' ),
				'value'       => 'good',
			],
			'GREAT'   => [
				'description' => __( 'Great ( > 80 ) score', 'wp-graphql-rank-math' ),
				'value'       => 'great',
			],
		];
	}
}

================
File: src/Type/Enum/ImagePreviewSizeEnum.php
================
<?php
/**
 * The Robots image preview size enum.
 *
 * @package WPGraphQL\RankMath\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\Enum;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;

/**
 * Class - ImagePreviewSizeEnum
 */
class ImagePreviewSizeEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'ImagePreviewSize';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'Robots meta image preview size.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		return [
			'LARGE'    => [
				'description' => __( 'Large', 'wp-graphql-rank-math' ),
				'value'       => 'large',
			],
			'STANDARD' => [
				'description' => __( 'Standard.', 'wp-graphql-rank-math' ),
				'value'       => 'standard',
			],
			'NONE'     => [
				'description' => __( 'Prevents search engines from following links on the pages', 'wp-graphql-rank-math' ),
				'value'       => 'none',
			],
		];
	}
}

================
File: src/Type/Enum/SeoScoreTemplateTypeEnum.php
================
<?php
/**
 * The SEO Score Template Type enum.
 *
 * @package WPGraphQL\RankMath\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\Enum;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;

/**
 * Class - SeoScoreTemplateTypeEnum
 */
class SeoScoreTemplateTypeEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'SeoScoreTemplateTypeEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The frontend SEO Score template type', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		return [
			'CIRCLE' => [
				'description' => __( 'Circle template', 'wp-graphql-rank-math' ),
				'value'       => 'circle',
			],
			'SQUARE' => [
				'description' => __( 'Square template', 'wp-graphql-rank-math' ),
				'value'       => 'square',
			],
		];
	}
}

================
File: src/Type/Enum/TwitterCardTypeEnum.php
================
<?php
/**
 * The SEO Twitter Card Type enum.
 *
 * @package WPGraphQL\RankMath\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\Enum;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;

/**
 * Class - TwitterCardTypeEnum
 */
class TwitterCardTypeEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'TwitterCardTypeEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The Twitter Card Type Enum', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		return [
			'SUMMARY'             => [
				'description' => __( 'Summary Card.', 'wp-graphql-rank-math' ),
				'value'       => 'summary_card',
			],
			'SUMMARY_LARGE_IMAGE' => [
				'description' => __( 'Summary Card with Large Image.', 'wp-graphql-rank-math' ),
				'value'       => 'summary_large_image',
			],
			'APP'                 => [
				'description' => __( 'The twitter App card', 'wp-graphql-rank-math' ),
				'value'       => 'app',
			],
			'PLAYER'              => [
				'description' => __( 'The twitter Player card', 'wp-graphql-rank-math' ),
				'value'       => 'player',
			],
		];
	}
}

================
File: src/Type/Enum/KnowledgeGraphTypeEnum.php
================
<?php
/**
 * The KnowledgeGraph type enum.
 *
 * @package WPGraphQL\RankMath\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\Enum;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;

/**
 * Class - KnowledgeGraphTypeEnum
 */
class KnowledgeGraphTypeEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'KnowledgeGraphTypeEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The knowledge graph type', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		return [
			'PERSON'  => [
				'description' => __( 'Person.', 'wp-graphql-rank-math' ),
				'value'       => 'person',
			],
			'COMPANY' => [
				'description' => __( 'Company.', 'wp-graphql-rank-math' ),
				'value'       => 'company',
			],
		];
	}
}

================
File: src/Type/Enum/ArticleTypeEnum.php
================
<?php
/**
 * The SEO Article Type enum.
 *
 * @package WPGraphQL\RankMath\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\Enum;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;

/**
 * Class - Article
 */
class ArticleTypeEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'ArticleTypeEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The SEO Article Type', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		return [
			'ARTICLE'      => [
				'description' => __( 'Article.', 'wp-graphql-rank-math' ),
				'value'       => 'Article',
			],
			'BLOG_POST'    => [
				'description' => __( 'Blog post.', 'wp-graphql-rank-math' ),
				'value'       => 'BlogPosting',
			],
			'NEWS_ARTICLE' => [
				'description' => __( 'News article.', 'wp-graphql-rank-math' ),
				'value'       => 'NewsArticle',
			],
		];
	}
}

================
File: src/Type/Enum/SnippetTypeEnum.php
================
<?php
/**
 * The Snippet type enum.
 *
 * @package WPGraphQL\RankMath\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\Enum;

use RankMath\Helper;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;

/**
 * Class - SnippetTypeEnum
 */
class SnippetTypeEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'SnippetTypeEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The rich snippet type.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		$types = Helper::choices_rich_snippet_types( __( 'None.', 'wp-graphql-rank-math' ) );

		$values = [
			'LOCAL_BUSINESS' => [
				'description' => __( 'Local Business', 'wp-graphql-rank-math' ),
				'value'       => 'LocalBusiness',
			],
		];

		foreach ( $types as $name => $description ) {
			$values[ strtoupper( $name ) ] = [
				'description' => $description,
				'value'       => $name,
			];
		}

		if ( class_exists( 'WooCommerce' ) || class_exists( 'Easy_Digital_Downloads' ) ) {
			$values['PRODUCT'] = [
				'description' => __( 'Product.', 'wp-graphql-rank-math' ),
				'value'       => 'product',
			];
		}

		return $values;
	}
}

================
File: src/Type/Enum/BulkEditingTypeEnum.php
================
<?php
/**
 * The Bulk editing type enum.
 *
 * @package WPGraphQL\RankMath\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\Enum;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;

/**
 * Class - BulkEditingTypeEnum
 */
class BulkEditingTypeEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'BulkEditingTypeEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The setting chosen for the RankMath Bulk Editing feature', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		return [
			'DISABLED'  => [
				'description' => __( 'Disabled.', 'wp-graphql-rank-math' ),
				'value'       => '0',
			],
			'ENABLED'   => [
				'description' => __( 'Enabled.', 'wp-graphql-rank-math' ),
				'value'       => 'editing',
			],
			'READ_ONLY' => [
				'description' => __( 'Read only.', 'wp-graphql-rank-math' ),
				'value'       => 'readonly',
			],
		];
	}
}

================
File: src/Type/Enum/SeoScorePositionEnum.php
================
<?php
/**
 * The SEO Score Position enum.
 *
 * @package WPGraphQL\RankMath\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\Enum;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;

/**
 * Class - SeoScorePositionEnum
 */
class SeoScorePositionEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'SeoScorePositionEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The frontend SEO Score position', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		return [
			'BOTTOM' => [
				'description' => __( 'Below content', 'wp-graphql-rank-math' ),
				'value'       => 'bottom',
			],
			'TOP'    => [
				'description' => __( 'Above content', 'wp-graphql-rank-math' ),
				'value'       => 'top',
			],
			'BOTH'   => [
				'description' => __( 'Above & below content', 'wp-graphql-rank-math' ),
				'value'       => 'both',
			],
			'CUSTOM' => [
				'description' => __( 'Custom (use shortcode)', 'wp-graphql-rank-math' ),
				'value'       => 'custom',
			],
		];
	}
}

================
File: src/Type/Enum/OpenGraphLocaleEnum.php
================
<?php
/**
 * The Snippet type enum.
 *
 * @package WPGraphQL\RankMath\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\Enum;

use RankMath\OpenGraph\Facebook_Locale;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;
use WPGraphQL\Type\WPEnumType;

/**
 * Class - OpenGraphLocaleEnum
 */
class OpenGraphLocaleEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'OpenGraphLocaleEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The Facebook OpenGraph Locale.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		$types = Facebook_Locale::FACEBOOK_LOCALES;

		$values = [];

		foreach ( $types as $locale ) {
			$values[ WPEnumType::get_safe_name( $locale ) ] = [
				// translators: %s is the locale.
				'description' => sprintf( __( '%s.', 'wp-graphql-rank-math' ), $locale ),
				'value'       => $locale,
			];
		}

		return $values;
	}
}

================
File: src/Type/Enum/RobotsMetaValueEnum.php
================
<?php
/**
 * The Robots meta value enum.
 *
 * @package WPGraphQL\RankMath\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\Enum;

use RankMath\Helper;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;

/**
 * Class - RobotsMetaValueEnum
 */
class RobotsMetaValueEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'RobotsMetaValueEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'Robot meta value tag.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		$types  = Helper::choices_robots();
		$values = [];

		foreach ( $types as $name => $description ) {
			$values[ strtoupper( $name ) ] = [
				'description' => wp_strip_all_tags( $description ),
				'value'       => $name,
			];
		}

		return $values;
	}
}

================
File: src/Type/Enum/OpenGraphProductAvailabilityEnum.php
================
<?php
/**
 * The SEO Score Template Type enum.
 *
 * @package WPGraphQL\RankMath\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\Enum;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;

/**
 * Class - OpenGraphProductAvailabilityEnum
 */
class OpenGraphProductAvailabilityEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'OpenGraphProductAvailabilityEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The OpenGraph Product availibility', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		return [
			'IN_STOCK'     => [
				'description' => __( 'The product is in stock', 'wp-graphql-rank-math' ),
				'value'       => 'instock',
			],
			'OUT_OF_STOCK' => [
				'description' => __( 'The product is out of stock', 'wp-graphql-rank-math' ),
				'value'       => '',
			],
		];
	}
}

================
File: src/Type/WPInterface/MetaSettingWithArchive.php
================
<?php
/**
 * Interface for meta settings with archive fields.
 *
 * @package WPGraphQL\RankMath\Type\WPInterface
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPInterface;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\InterfaceType;

/**
 * Class - MetaSettingWithArchive
 */
class MetaSettingWithArchive extends InterfaceType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'MetaSettingWithArchive';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'Meta Settings with archive fields.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'archiveTitle'       => [
				'type'        => 'String',
				'description' => __( 'Default title tag for archive page.', 'wp-graphql-rank-math' ),
			],
			'archiveDescription' => [
				'type'        => 'String',
				'description' => __( 'Description for archive pages.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Type/WPInterface/ContentNodeSeo.php
================
<?php
/**
 * Interface for ContentNode Seo fields.
 *
 * @package WPGraphQL\RankMath\Type\WPInterface
 * @since 0.0.8
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPInterface;

use WPGraphQL\RankMath\Type\WPObject\SeoScore;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\InterfaceType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithInterfaces;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Traits\TypeResolverTrait;

/**
 * Class - ContentNodeSeo
 */
class ContentNodeSeo extends InterfaceType implements TypeWithInterfaces {
	use TypeResolverTrait;

	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'ContentNodeSeo';
	}

	/**
	 * {@inheritDoc}
	 */
	protected static function get_type_config(): array {
		$config = parent::get_type_config();

		$config['eagerlyLoadType'] = true;

		return $config;
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The seo data for Post Objects', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'isPillarContent' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether the item is considered pillar (cornerstone) content', 'wp-graphql-rank-math' ),
			],
			'seoScore'        => [
				'type'        => SeoScore::get_type_name(),
				'description' => __( 'The SEO score', 'wp-graphql-rank-math' ),
			],
		];
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_interfaces(): array {
		return [ Seo::get_type_name() ];
	}

	/**
	 * {@inheritDoc}
	 *
	 * @param \WPGraphQL\Model\Model $value The model.
	 */
	public static function get_resolved_type_name( $value ): ?string {
		$type_name = null;

		if ( isset( $value->post_type ) ) {
			$type_name = 'RankMath' . graphql_format_type_name( $value->post_type . 'ObjectSeo' );
		}

		return $type_name;
	}
}

================
File: src/Type/WPInterface/Seo.php
================
<?php
/**
 * The shared SEO fields interface.
 *
 * @package WPGraphQL\RankMath\Type\WPInterface
 * @since 0.0.8
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPInterface;

use RankMath\Helper;
use WPGraphQL\RankMath\Model\ContentNodeSeo;
use WPGraphQL\RankMath\Model\ContentTypeSeo;
use WPGraphQL\RankMath\Model\TermNodeSeo;
use WPGraphQL\RankMath\Model\UserSeo;
use WPGraphQL\RankMath\Type\WPObject\Breadcrumbs;
use WPGraphQL\RankMath\Type\WPObject\JsonLd;
use WPGraphQL\RankMath\Type\WPObject\OpenGraphMeta;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\InterfaceType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Traits\TypeResolverTrait;

/**
 * Class - Seo
 */
class Seo extends InterfaceType {
	use TypeResolverTrait;

	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'Seo';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'Base SEO fields shared across WP types.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		$fields = [
			'title'           => [
				'type'        => 'String',
				'description' => __( 'The title.', 'wp-graphql-rank-math' ),
			],
			'description'     => [
				'type'        => 'String',
				'description' => __( 'The meta description.', 'wp-graphql-rank-math' ),
			],
			'robots'          => [
				'type'        => [ 'list_of' => 'String' ],
				'description' => __( 'A list of the robots meta properties to output.', 'wp-graphql-rank-math' ),
			],
			'focusKeywords'   => [
				'type'        => [ 'list_of' => 'String' ],
				'description' => __( 'The focus keywords you want to rank for', 'wp-graphql-rank-math' ),
			],
			'canonicalUrl'    => [
				'type'        => 'String',
				'description' => __( 'The canonical url.', 'wp-graphql-rank-math' ),
			],
			'breadcrumbTitle' => [
				'type'        => 'String',
				'description' => __( 'The title to use in the breadcrumbs for this post', 'wp-graphql-rank-math' ),
			],
			'fullHead'        => [
				'type'        => 'String',
				'description' => __( 'The fully-rendered `head` tag for the given item', 'wp-graphql-rank-math' ),
			],
			'jsonLd'          => [
				'type'        => JsonLd::get_type_name(),
				'description' => __( 'The JSON+LD data', 'wp-graphql-rank-math' ),
			],
			'openGraph'       => [
				'type'        => OpenGraphMeta::get_type_name(),
				'description' => __( 'The open graph meta properties.', 'wp-graphql-rank-math' ),
			],

		];

		// Add breadcrumbs field.
		if ( Helper::is_breadcrumbs_enabled() ) {
			$fields['breadcrumbs'] = [
				'type'        => [ 'list_of' => Breadcrumbs::get_type_name() ],
				'description' => __( 'The breadcrumbs trail for the given object', 'wp-graphql-rank-math' ),
			];
		}

		return $fields;
	}

	/**
	 * {@inheritDoc}
	 *
	 * @param \WPGraphQL\Model\Model $value The value from the resolver of the parent field.
	 */
	public static function get_resolved_type_name( $value ): ?string {
		switch ( true ) {
			case $value instanceof ContentNodeSeo:
				$type_name = 'RankMath' . graphql_format_type_name( $value->get_object_type() . 'ObjectSeo' );
				break;
			case $value instanceof ContentTypeSeo:
				$type_name = 'RankMath' . graphql_format_type_name( $value->get_object_type() . 'TypeSeo' );
				break;
			case $value instanceof TermNodeSeo:
				$type_name = 'RankMath' . graphql_format_type_name( $value->get_object_type() . 'TermSeo' );
				break;
			case $value instanceof UserSeo:
				$type_name = graphql_format_type_name( 'RankMathUserSeo' );
				break;
			default:
				$type_name = null;
		}

		/**
		 * Filters the GraphQL Object type name for the given SEO model.
		 *
		 * @param string|null $type_name The GraphQL type name for the SEO Object.
		 * @param \WPGraphQL\Model\Model $model The SEO model for the type.
		 */
		$type_name = apply_filters( 'graphql_seo_resolved_type_name', $type_name, $value );

		return $type_name;
	}
}

================
File: src/Type/WPInterface/NodeWithSeo.php
================
<?php
/**
 * Interface for a Node with SEO data.
 *
 * @package WPGraphQL\RankMath\Type\WPInterface
 * @since 0.0.8
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPInterface;

use GraphQL\Error\UserError;
use WPGraphQL\Model\Model;
use WPGraphQL\RankMath\Model\ContentNodeSeo;
use WPGraphQL\RankMath\Model\ContentTypeSeo;
use WPGraphQL\RankMath\Model\TermNodeSeo;
use WPGraphQL\RankMath\Model\UserSeo;
use WPGraphQL\RankMath\Type\WPInterface\ContentNodeSeo as WPInterfaceContentNodeSeo;
use WPGraphQL\RankMath\Utils\Utils;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\InterfaceType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithInterfaces;

/**
 * Class - NodeWithSeo
 */
class NodeWithSeo extends InterfaceType implements TypeWithInterfaces {
	/**
	 * {@inheritDoc}
	 */
	public static function register(): void {
		register_graphql_interface_type( static::type_name(), static::get_type_config() );

		/**
		 * Filters the GraphQL types that have SEO data.
		 * This is used to register the NodeWithSeo interface to the types.
		 *
		 * @since 0.0.8
		 *
		 * @param array $types_with_seo The types that have SEO data.
		 */
		$types_with_seo = apply_filters(
			'graphql_seo_types_with_seo',
			[
				'User',
				'TermNode',
				'ContentType',
				'ContentNode',
			]
		);

		// @todo only apply to ContentTypes that have SEO data.

		register_graphql_interfaces_to_types( self::type_name(), $types_with_seo );

		// Narrow down ContentNode types.
		Utils::overload_graphql_field_type( 'ContentNode', 'seo', WPInterfaceContentNodeSeo::get_type_name() );
		// This is necessary because the filter doesn't work for inheritance.
		Utils::overload_graphql_field_type( 'HierarchicalContentNode', 'seo', WPInterfaceContentNodeSeo::get_type_name() );
	}

	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'NodeWithRankMathSeo';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'A node with RankMath SEO data.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'seo' => [
				'type'        => Seo::get_type_name(),
				'description' => __( 'The RankMath SEO data for the node.', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source ) {
					if ( ! $source instanceof Model ) {
						return null;
					}

					if ( empty( $source->uri ) ) {
						/**
						 * This can occur when querying the `Posts` page, since the Model "casts" it as a `ContentType` due to the lack of archive support.
						 *
						 * @see \WPGraphQL\Model\Post::$uri
						 */
						if ( $source instanceof \WPGraphQL\Model\Post && $source->isPostsPage ) {
							graphql_debug(
								sprintf(
									// translators: %d: The ID of the Post model being queried.
									esc_html__( 'Post %d is configured as the Posts archive, but is being queried as a `Page`. To get the SEO data, please query the object as a `ContentType` (e.g. via `nodeByUri`).', 'wp-graphql-rank-math' ),
									$source->databaseId,
								)
							);
						}
						return null;
					}

					$model = self::get_model_for_node( $source );

					if ( empty( $model ) ) {
						throw new UserError(
							sprintf(
								/* translators: %s: The name of the node type */
								esc_html__( 'The %s type does not have a corresponding SEO model class.', 'wp-graphql-rank-math' ),
								esc_html( get_class( $source ) )
							)
						);
					}

					return $model;
				},
			],
		];
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_interfaces(): array {
		return [ 'Node' ];
	}

	/**
	 * Gets the SEO model class for a given node model.
	 *
	 * @param \WPGraphQL\Model\Model $node_model The node model.
	 */
	private static function get_model_for_node( Model $node_model ): ?Model {
		// A map of the node models to their corresponding SEO model classes.
		switch ( true ) {
			case $node_model instanceof \WPGraphQL\Model\Post:
				$seo_model = new ContentNodeSeo( $node_model->databaseId );
				break;
			case $node_model instanceof \WPGraphQL\Model\PostType:
				$seo_model = new ContentTypeSeo( $node_model->name );
				break;
			case $node_model instanceof \WPGraphQL\Model\Term:
				$seo_model = new TermNodeSeo( $node_model->databaseId );
				break;
			case $node_model instanceof \WPGraphQL\Model\User:
				$seo_model = new UserSeo( $node_model->databaseId );
				break;
			default:
				$seo_model = null;
		}

		/**
		 * Filter the SEO model class used for a given node model.
		 *
		 * @since 0.0.8
		 *
		 * @param \WPGraphQL\Model\Model|null $seo_model The SEO model class to use.
		 * @param \WPGraphQL\Model\Model $node_model The Model for the node.
		 */
		$seo_model = apply_filters( 'graphql_seo_resolved_model', $seo_model, $node_model );

		return $seo_model;
	}
}

================
File: src/Type/WPInterface/MetaSettingWithRobots.php
================
<?php
/**
 * Interface for meta settings with robots fields.
 *
 * @package WPGraphQL\RankMath\Type\WPInterface
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Type\WPInterface;

use WPGraphQL\RankMath\Type\Enum\RobotsMetaValueEnum;
use WPGraphQL\RankMath\Type\WPObject\AdvancedRobotsMeta;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\InterfaceType;

/**
 * Class - Settings
 */
class MetaSettingWithRobots extends InterfaceType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'MetaSettingWithRobots';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'Meta settings with robots fields.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'advancedRobotsMeta' => [
				'type'        => AdvancedRobotsMeta::get_type_name(),
				'description' => __( 'Advanced robots meta tag settings.', 'wp-graphql-rank-math' ),
			],
			'robotsMeta'         => [
				'type'        => [ 'list_of' => RobotsMetaValueEnum::get_type_name() ],
				'description' => __( 'Custom values for robots meta tag.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Model/TermNodeSeo.php
================
<?php
/**
 * The SEO model for TermNode objects.
 *
 * @package \WPGraphQL\RankMath\Model
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Model;

use GraphQL\Error\Error;
use GraphQL\Error\UserError;
use WPGraphQL;
use WP_Term;

/**
 * Class - TermNodeSeo
 */
class TermNodeSeo extends Seo {
	/**
	 * Stores the incoming post data
	 *
	 * @var \WP_Term $data
	 */
	protected $data;

	/**
	 * The settings prefix
	 *
	 * @var string
	 */
	protected string $prefix;

	/**
	 * Constructor.
	 *
	 * @param int $term_id .
	 * @throws \GraphQL\Error\Error .
	 */
	public function __construct( int $term_id ) {
		/** @var ?\WP_Term $object */
		$object = get_term( $term_id );
		if ( null === $object ) {
			throw new Error(
				sprintf(
					// translators: post id .
					esc_html__( 'Invalid term id %d passed to TermNodeSeo model.', 'wp-graphql-rank-math' ),
					absint( $term_id ),
				)
			);
		}

		$this->database_id = $object->term_id;

		parent::__construct( $object );
	}

	/**
	 * {@inheritDoc}
	 */
	public function setup(): void {
		global $wp_query, $post;

		// Store the global post before overriding.
		$this->global_post = $post;

		// Denylist globally-cached replacements.
		add_filter( 'rank_math/replacements/non_cacheable', [ $this, 'non_cacheable_replacements' ] );

		if ( $this->data instanceof WP_Term ) {
			/**
			 * Reset global post
			 */
			$GLOBALS['post'] = get_post( 0 ); // phpcs:ignore WordPress.WP.GlobalVariablesOverride

			/**
			 * Parse the query to tell WordPress
			 * how to setup global state
			 */
			if ( 'category' === $this->data->taxonomy ) {
				$wp_query->parse_query(
					[
						'category_name' => $this->data->slug,
					]
				);
			} elseif ( 'post_tag' === $this->data->taxonomy ) {
				$wp_query->parse_query(
					[
						'tag' => $this->data->slug,
					]
				);
			} else {
				$wp_query->parse_query(
					[
						$this->data->taxonomy => $this->data->slug,
					]
				);
			}

			$wp_query->queried_object_id = $this->data->term_id;
			$wp_query->queried_object    = $this->data;
		}

		parent::setup();
	}

	/**
	 * Reset global state after the model fields
	 * have been generated
	 *
	 * @return void
	 */
	public function tear_down() {
		remove_filter( 'rank_math/replacements/non_cacheable', [ $this, 'non_cacheable_replacements' ] );

		$GLOBALS['post'] = $this->global_post; // phpcs:ignore WordPress.WP.GlobalVariablesOverride

		wp_reset_postdata();
	}

	/**
	 * {@inheritDoc}
	 */
	protected function init() {
		if ( empty( $this->fields ) ) {
			parent::init();

			$this->fields = array_merge(
				$this->fields,
				[
					'breadcrumbTitle' => function (): ?string {
						$title = $this->get_meta( 'breadcrumb_title', '', $this->data->name );

						return ! empty( $title ) ? html_entity_decode( $title, ENT_QUOTES ) : null;
					},
				]
			);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	public function get_object_type(): string {
		$taxonomies = WPGraphQL::get_allowed_taxonomies( 'objects' );

		return $taxonomies[ $this->data->taxonomy ]->graphql_single_name;
	}

	/**
	 * {@inheritDoc}
	 *
	 * @throws \GraphQL\Error\UserError If no valid term link.
	 */
	protected function get_object_url(): string {
		$term_link = get_term_link( $this->database_id );

		if ( is_wp_error( $term_link ) ) {
			throw new UserError( esc_html( $term_link->get_error_message() ) );
		}
		return $term_link;
	}

	/**
	 * Adds SEO keys that should not be cached by the Rank Math replacements cache.
	 *
	 * @uses rank_math/replacements/non_cacheable
	 *
	 * @param string[] $args The keys that should not be cached.
	 *
	 * @return string[]
	 */
	public function non_cacheable_replacements( array $args ): array {
		// This is necessary because RM (as of 1.0.117) does not set `term_description` to nocache.
		$args[] = 'term_description';

		return $args;
	}
}

================
File: src/Model/ContentTypeSeo.php
================
<?php
/**
 * The SEO model for ContentType objects.
 *
 * @package \WPGraphQL\RankMath\Model
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Model;

use GraphQL\Error\Error;
use GraphQL\Error\UserError;
use RankMath\Helper as RMHelper;
use WPGraphQL;

/**
 * Class - ContentTypeSeo
 */
class ContentTypeSeo extends Seo {
	/**
	 * Stores the incoming post type data.
	 *
	 * @var \WP_Post_Type $data
	 */
	protected $data;

	/**
	 * The settings prefix.
	 *
	 * @var string
	 */
	protected string $prefix;

	/**
	 * Constructor.
	 *
	 * @param string $post_type .
	 * @throws \GraphQL\Error\Error .
	 */
	public function __construct( string $post_type ) {
		$object = get_post_type_object( $post_type );
		if ( null === $object ) {
			throw new Error(
				sprintf(
					// translators: post type .
					esc_html__( 'Invalid post type %s passed to ContentTypeSeo model.', 'wp-graphql-rank-math' ),
					esc_html( $post_type ),
				)
			);
		}

		$capability = isset( $object->cap->edit_posts ) ? $object->cap->edit_posts : 'edit_posts';

		$allowed_fields = [ 'breadcrumbTitle' ];

		parent::__construct( $object, $capability, $allowed_fields );
	}

	/**
	 * {@inheritDoc}
	 */
	public function setup(): void {
		global $wp_query, $post;

		// Store the global post before overriding.
		$this->global_post = $post;

		if ( $this->data instanceof \WP_Post_Type ) {
			/**
			 * Reset global post
			 */
			$GLOBALS['post'] = get_post( 0 ); // phpcs:ignore WordPress.WP.GlobalVariablesOverride
		}

		// Store the global post before overriding.
		$this->global_post = $post;

		/**
		 * Parse the query to tell WordPress how to setup the global state.
		 */
		$wp_query->parse_query( [ 'post_type' => $this->data->name ] );

		$wp_query->queried_object_id = $this->data->name;
		$wp_query->queried_object    = $this->data;

		parent::setup();
	}

	/**
	 * Reset global state after the model fields
	 * have been generated
	 *
	 * @return void
	 */
	public function tear_down() {
		$GLOBALS['post'] = $this->global_post; // phpcs:ignore WordPress.WP.GlobalVariablesOverride

		wp_reset_postdata();
	}

	/**
	 * {@inheritDoc}
	 */
	protected function init() {
		if ( empty( $this->fields ) ) {
			parent::init();

			$this->fields = array_merge(
				$this->fields,
				[
					'breadcrumbTitle' => fn (): ?string => ! empty( $this->data->labels->singular_name ) ? $this->data->labels->singular_name : null,

				]
			);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	protected function get_breadcrumbs(): ?array {
		$breadcrumbs = parent::get_breadcrumbs();

		// For non posts, we return the breadcrumbs as-is.
		if ( empty( $breadcrumbs ) || 'post' !== $this->data->name ) {
			return $breadcrumbs;
		}

		/**
		 * @todo This is a workaround since WPGraphQL doesnt support an archive type.
		 */

		$blog_id = get_option( 'page_for_posts' );

		if ( ! $blog_id ) {
			return $breadcrumbs;
		}

		$should_show_blog = RMHelper::get_settings( 'general.breadcrumbs_blog_page' );

		if ( ! $should_show_blog || 'page' !== get_option( 'show_on_front' ) ) {
			return $breadcrumbs;
		}

		$breadcrumb_title = RMHelper::get_post_meta( 'breadcrumb_title', $blog_id ) ?: get_the_title( $blog_id );
		$permalink        = get_permalink( $blog_id );

		$breadcrumbs[] = [
			'text'     => $breadcrumb_title ?: null,
			'url'      => $permalink ?: null,
			'isHidden' => false,
		];

		return $breadcrumbs;
	}

	/**
	 * {@inheritDoc}
	 */
	public function get_object_type(): string {
		$post_types = WPGraphQL::get_allowed_post_types( 'objects' );

		return $post_types[ $this->data->name ]->graphql_single_name;
	}

	/**
	 * {@inheritDoc}
	 *
	 * @throws \GraphQL\Error\UserError If no archive URI.
	 */
	protected function get_object_url(): string {
		$term_link = get_post_type_archive_link( $this->data->name );

		if ( false === $term_link ) {
			throw new UserError( esc_html__( 'There is no archive URI for the provided post type', 'wp-graphql-rank-math' ) );
		}

		return $term_link;
	}
}

================
File: src/Model/ContentNodeSeo.php
================
<?php
/**
 * The SEO model for ContentNode objects.
 *
 * @package \WPGraphQL\RankMath\Model
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Model;

use GraphQL\Error\Error;
use GraphQL\Error\UserError;
use RankMath\Helper as RMHelper;
use WPGraphQL;

/**
 * Class - ContentNodeSeo
 */
class ContentNodeSeo extends Seo {
	/**
	 * Stores the incoming post data.
	 *
	 * @var \WP_Post $data
	 */
	protected $data;

	/**
	 * The database id for the current object.
	 *
	 * @var int
	 */
	protected int $database_id;

	/**
	 * The settings prefix.
	 *
	 * @var string
	 */
	protected string $prefix;

	/**
	 * Constructor.
	 *
	 * @param int $post_id .
	 * @throws \GraphQL\Error\Error .
	 */
	public function __construct( int $post_id ) {
		$object = get_post( $post_id );
		if ( null === $object ) {
			throw new Error(
				sprintf(
					// translators: post id .
					esc_html__( 'Invalid post id %d passed to ContentNodeSeo model.', 'wp-graphql-rank-math' ),
					absint( $post_id ),
				)
			);
		}

		$this->database_id = $object->ID;

		parent::__construct( $object );
	}

	/**
	 * {@inheritDoc}
	 */
	public function setup(): void {
		global $wp_query, $post;

		/**
		 * Store the global post before overriding
		 */
		$this->global_post = $post;

		// Bail early if this is not a post.
		if ( ! $this->data instanceof \WP_Post ) {
			return;
		}

		/**
		 * Set the resolving post to the global $post. That way any filters that
		 * might be applied when resolving fields can rely on global post and
		 * post data being set up.
		 */
		$id        = $this->data->ID;
		$post_type = $this->data->post_type;
		$post_name = $this->data->post_name;
		$data      = $this->data;

		if ( 'revision' === $this->data->post_type ) {
			$id     = $this->data->post_parent;
			$parent = get_post( $this->data->post_parent );
			if ( empty( $parent ) ) {
				$this->fields = [];
				return;
			}
			$post_type = $parent->post_type;
			$post_name = $parent->post_name;
			$data      = $parent;
		}

		/**
		 * Clear out existing postdata
		 */
		$wp_query->reset_postdata();

		/**
		 * Parse the query to tell WordPress how to
		 * setup global state
		 */
		switch ( $post_type ) {
			case 'post':
				$wp_query->parse_query(
					[
						'page' => '',
						'p'    => $id,
					]
				);
				break;
			case 'page':
				$wp_query->parse_query(
					[
						'page'     => '',
						'pagename' => $post_name,
					]
				);
				break;
			case 'attachment':
				$wp_query->parse_query( [ 'attachment' => $post_name ] );
				break;
			default:
				$wp_query->parse_query(
					[
						$post_type  => $post_name,
						'post_type' => $post_type,
						'name'      => $post_name,
					]
				);
				break;
		}

		$wp_query->setup_postdata( $data );
		$GLOBALS['post']             = $data; // phpcs:ignore WordPress.WP.GlobalVariablesOverride
		$wp_query->queried_object    = get_post( $this->data->ID );
		$wp_query->queried_object_id = $this->data->ID;

		parent::setup();
	}

	/**
	 * {@inheritDoc}
	 */
	protected function init() {
		if ( empty( $this->fields ) ) {
			parent::init();

			$this->fields = array_merge(
				$this->fields,
				[
					'breadcrumbTitle' => function (): ?string {
						$title = $this->get_meta( 'breadcrumb_title', '', get_the_title( $this->database_id ) );

						return ! empty( $title ) ? html_entity_decode( $title, ENT_QUOTES ) : null;
					},
					'isPillarContent' => fn (): bool => ! empty( $this->get_meta( 'pillar_content' ) ),
					'seoScore'        => fn () => [
						'hasFrontendScore' => static fn (): bool => rank_math()->frontend_seo_score->score_enabled(),
						'badgeHtml'        => static function (): ?string {
							$output = rank_math_get_seo_score();
							$output = ! empty( $output ) ? str_replace( [ "\n", "\t", "\r" ], '', $output ) : null;

							return ! empty( $output ) ? $output : null;
							},
						'rating'           => function (): ?string {
							$score = rank_math()->frontend_seo_score->get_score( $this->database_id );

							return rank_math()->frontend_seo_score->get_rating( (int) $score ) ?: null;
						},
						'score'            => fn (): int => (int) rank_math()->frontend_seo_score->get_score( $this->database_id ),
					],
				]
			);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	protected function get_breadcrumbs(): ?array {
		$breadcrumbs = parent::get_breadcrumbs();

		if ( empty( $breadcrumbs ) ) {
			return null;
		}

		$remove_title = ( is_single( $this->database_id ) || is_page( $this->database_id ) ) && RMHelper::get_settings( 'general.breadcrumbs_remove_post_title' );

		if ( $remove_title ) {
			array_pop( $breadcrumbs );
		}

		return ! empty( $breadcrumbs ) ? $breadcrumbs : null;
	}

	/**
	 * {@inheritDoc}
	 */
	public function get_object_type(): string {
		$post_types        = WPGraphQL::get_allowed_post_types( 'objects' );
		$current_post_type = $this->data->post_type;

		// If this is a revision, get the post type of the parent.
		if ( 'revision' === $current_post_type ) {
			$current_post_type = get_post_type( $this->data->post_parent );
		}

		return $post_types[ $current_post_type ]->graphql_single_name;
	}

	/**
	 * {@inheritDoc}
	 *
	 * @throws \GraphQL\Error\UserError If no post permalink.
	 */
	protected function get_object_url(): string {
		$permalink = get_permalink( $this->database_id );

		if ( false === $permalink ) {
			throw new UserError( esc_html__( 'There is no URI for the provided content node', 'wp-graphql-rank-math' ) );
		}

		return $permalink;
	}
}

================
File: src/Model/Settings.php
================
<?php
/**
 * Settings Model class
 *
 * @package \WPGraphQL\RankMath\Model
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Model;

use Exception;
use RankMath\Helper;
use RankMath\Helpers\Arr;
use RankMath\Sitemap\Router;
use WPGraphQL\Model\Model;

/**
 * Class - Settings
 */
class Settings extends Model {
	/**
	 * {@inheritDoc}
	 *
	 * @var array<string, mixed>
	 */
	protected $data;

	/**
	 * Array of active modules
	 *
	 * @var string[]
	 */
	protected array $active_modules;

	/**
	 * Constructor.
	 *
	 * @throws \Exception .
	 */
	public function __construct() {
		/** @property \RankMath\Settings $settings_obj */
		$settings_obj = rank_math()->settings;
		$settings     = $settings_obj->all();

		if ( empty( $settings ) ) {
			throw new Exception( esc_html__( 'The Rank Math settings cannot be found', 'wp-graphql-rank-math' ) );
		}

		$this->data = $settings;

		$this->active_modules = Helper::get_active_modules();

		parent::__construct();
	}

	/**
	 * Initializes the object
	 *
	 * @return void
	 */
	protected function init() {
		if ( empty( $this->fields ) ) {
			$this->fields = [
				'general' => fn () => $this->general_fields(),
				'meta'    => fn () => [
					'authorArchives'               => $this->meta_author_archive_fields(),
					'global'                       => $this->meta_global_fields(),
					'local'                        => $this->meta_local_fields(),
					'social'                       => $this->meta_social_fields(),
					'homepage'                     => $this->meta_homepage_fields(),
					'dateArchives'                 => $this->meta_date_archive_fields(),
					'contentTypes'                 => $this->meta_content_type_fields(),
					'taxonomies'                   => $this->meta_taxonomy_fields(),
					'notFoundTitle'                => ! empty( $this->data['titles']['404_title'] ) ? $this->data['titles']['404_title'] : null,
					'searchTitle'                  => ! empty( $this->data['titles']['search_title'] ) ? $this->data['titles']['search_title'] : null,
					'shouldIndexSearch'            => empty( $this->data['titles']['noindex_search'] ),
					'shouldIndexPaginatedPages'    => empty( $this->data['titles']['noindex_paginated_pages'] ),
					'shouldIndexArchiveSubpages'   => empty( $this->data['titles']['noindex_archive_subpages'] ),
					'shouldIndexPasswordProtected' => empty( $this->data['titles']['noindex_password_protected'] ),
				],
			];

			if ( in_array( 'sitemap', $this->active_modules, true ) ) {
				$this->fields['sitemap'] = fn () => [
					'author'          => $this->sitemap_author_fields(),
					'contentTypes'    => $this->sitemap_content_type_fields(),
					'general'         => $this->sitemap_general_fields(),
					'sitemapIndexUrl' => rank_math_get_sitemap_url(),
					'taxonomies'      => $this->sitemap_taxonomy_fields(),
				];
			}
		}
	}

	/**
	 * Resolve the general settings fields.
	 *
	 * @return array<string, mixed>
	 */
	private function general_fields(): array {
		return [
			'breadcrumbs'         => function (): array {
				$has_home = ! empty( $this->data['general']['breadcrumbs_home'] );

				return [
					'archiveFormat'         => ! empty( $this->data['general']['breadcrumbs_archive_format'] ) ? $this->data['general']['breadcrumbs_archive_format'] : null,
					'hasPostTitle'          => empty( $this->data['general']['breadcrumbs_remove_post_title'] ),
					'hasAncestorCategories' => ! empty( $this->data['general']['breadcrumbs_ancestor_categories'] ),
					'hasTaxonomyName'       => empty( $this->data['general']['breadcrumbs_hide_taxonomy_name'] ),
					'hasBlogPage'           => ! empty( $this->data['general']['breadcrumbs_blog_page'] ),
					'hasHome'               => $has_home,
					'homeLabel'             => function () use ( $has_home ): ?string {
						if ( ! $has_home ) {
							return null;
						}
						return ! empty( $this->data['general']['breadcrumbs_home_label'] ) ? $this->data['general']['breadcrumbs_home_label'] : null;
					},
					'homeUrl'               => function () use ( $has_home ): ?string {
						if ( ! $has_home ) {
							return null;
						}
						$value = ! empty( $this->data['general']['breadcrumbs_home_link'] ) ? $this->data['general']['breadcrumbs_home_link'] : null;
						return ! empty( $value ) ? $value : null;
					},
					'notFoundLabel'         => ! empty( $this->data['general']['breadcrumbs_404_label'] ) ? $this->data['general']['breadcrumbs_404_label'] : null,
					'prefix'                => ! empty( $this->data['general']['breadcrumbs_prefix'] ) ? $this->data['general']['breadcrumbs_prefix'] : null,
					'separator'             => ! empty( $this->data['general']['breadcrumbs_separator'] ) ? $this->data['general']['breadcrumbs_separator'] : null,
					'searchFormat'          => ! empty( $this->data['general']['breadcrumbs_search_format'] ) ? $this->data['general']['breadcrumbs_search_format'] : null,
				];
			},
			'frontendSeoScore'    => [
				'enabledPostTypes'    => ! empty( $this->data['general']['frontend_seo_score_post_types'] ) ? $this->data['general']['frontend_seo_score_post_types'] : null,
				'template'            => ! empty( $this->data['general']['frontend_seo_score_template'] ) ? $this->data['general']['frontend_seo_score_template'] : null,
				'position'            => ! empty( $this->data['general']['frontend_seo_score_position'] ) ? $this->data['general']['frontend_seo_score_position'] : null,
				'hasRankMathBacklink' => ! empty( $this->data['general']['support_rank_math'] ),
			],
			'hasBreadcrumbs'      => ! empty( $this->data['general']['breadcrumbs'] ),
			'hasFrontendSeoScore' => ! empty( $this->data['general']['frontend_seo_score'] ),
			'links'               => [
				'defaultAttachmentRedirectUrl' => ! empty( $this->data['general']['attachment_redirect_default'] ) ? $this->data['general']['attachment_redirect_default'] : null,
				'hasCategoryBase'              => empty( $this->data['general']['strip_category_base'] ),
				'nofollowDomains'              => ! empty( $this->data['general']['nofollow_domains'] ) ? $this->data['general']['nofollow_domains'] : null,
				'nofollowExcludedDomains'      => ! empty( $this->data['general']['nofollow_exclude_domains'] ) ? $this->data['general']['nofollow_exclude_domains'] : null,
				'shouldNofollowImageLinks'     => ! empty( $this->data['general']['nofollow_image_links'] ),
				'shouldNofollowLinks'          => ! empty( $this->data['general']['nofollow_external_links'] ),
				'shouldOpenInNewWindow'        => ! empty( $this->data['general']['new_window_external_links'] ),
				'shouldRedirectAttachments'    => ! empty( $this->data['general']['attachment_redirect_urls'] ),
			],
			'webmaster'           => [
				'baidu'     => ! empty( $this->data['general']['baidu_verify'] ) ? $this->data['general']['baidu_verify'] : null,
				'bing'      => ! empty( $this->data['general']['bing_verify'] ) ? $this->data['general']['bing_verify'] : null,
				'google'    => ! empty( $this->data['general']['google_verify'] ) ? $this->data['general']['google_verify'] : null,
				'norton'    => ! empty( $this->data['general']['norton_verify'] ) ? $this->data['general']['norton_verify'] : null,
				'pinterest' => ! empty( $this->data['general']['pinterest_verify'] ) ? $this->data['general']['pinterest_verify'] : null,
				'yandex'    => ! empty( $this->data['general']['yandex_verify'] ) ? $this->data['general']['yandex_verify'] : null,
			],
			'rssBeforeContent'    => ! empty( $this->data['general']['rss_before_content'] ) ? $this->data['general']['rss_before_content'] : null,
			'rssAfterContent'     => ! empty( $this->data['general']['rss_after_content'] ) ? $this->data['general']['rss_after_content'] : null,
			'redirections'        => [
				'hasDebug'          => ! empty( $this->data['general']['redirect_debug'] ),
				'fallbackBehavior'  => ! empty( $this->data['general']['redirections_fallback'] ) ? $this->data['general']['redirections_fallback'] : 'default',
				'fallbackCustomUrl' => ! empty( $this->data['general']['redirections_custom_url'] ) ? $this->data['general']['redirections_custom_url'] : null,
				'redirectionType'   => ! empty( $this->data['general']['redirections_header_code'] ) ? $this->data['general']['redirections_header_code'] : '301',
				'hasAutoPostDirect' => ! empty( $this->data['general']['redirections_post_redirect'] ),
			],
		];
	}

	/**
	 * Get the advanced robots meta for the provided key.
	 *
	 * @param string $key the array key used to store the meta.
	 *
	 * @return ?array<string, mixed>
	 */
	private function advanced_robots_meta( string $key ): ?array {
		return ! empty( $this->data['titles'][ $key ] )
			? [
				'hasSnippet'       => ! empty( $this->data['titles'][ $key ]['max-snippet'] ),
				'snippetLength'    => ! empty( $this->data['titles'][ $key ]['max-snippet'] ) ? $this->data['titles'][ $key ]['max-snippet'] : null,
				'hasVideoPreview'  => ! empty( $this->data['titles'][ $key ]['max-video-preview'] ),
				'videoDuration'    => ! empty( $this->data['titles'][ $key ]['max-video-preview'] ) ? $this->data['titles'][ $key ]['max-video-preview'] : null,
				'hasImagePreview'  => ! empty( $this->data['titles'][ $key ]['max-image-preview'] ),
				'imagePreviewSize' => ! empty( $this->data['titles'][ $key ]['max-image-preview'] ) ? $this->data['titles'][ $key ]['max-image-preview'] : null,
			]
			: null;
	}

	/**
	 * Resolve titles and meta Global fields.
	 *
	 * @return array<string, mixed>
	 */
	private function meta_global_fields(): array {
		return [
			'advancedRobotsMeta'         => $this->advanced_robots_meta( 'advanced_robots_global' ),
			'robotsMeta'                 => ! empty( $this->data['titles']['robots_global'] ) ? $this->data['titles']['robots_global'] : null,
			'openGraphImageId'           => ! empty( $this->data['titles']['open_graph_image_id'] ) ? $this->data['titles']['open_graph_image_id'] : null,
			'separator'                  => ! empty( $this->data['titles']['title_separator'] ) ? $this->data['titles']['title_separator'] : null,
			'twitterCardType'            => ! empty( $this->data['titles']['twitter_card_type'] ) ? $this->data['titles']['twitter_card_type'] : null,
			'shouldCapitalizeTitles'     => ! empty( $this->data['titles']['capitalize_titles'] ),
			'shouldIndexEmptyTaxonomies' => empty( $this->data['titles']['noindex_empty_taxonomies'] ),
			'shouldRewriteTitle'         => ! empty( $this->data['titles']['rewrite_title'] ),
		];
	}

	/**
	 * Resolve titles and meta social fields.
	 *
	 * @return array<string, mixed>
	 */
	private function meta_social_fields(): array {
		return [
			'facebookPageUrl'    => ! empty( $this->data['titles']['social_url_facebook'] ) ? $this->data['titles']['social_url_facebook'] : null,
			'facebookAuthorUrl'  => ! empty( $this->data['titles']['facebook_author_urls'] ) ? $this->data['titles']['facebook_author_urls'] : null,
			'facebookAdminId'    => ! empty( $this->data['titles']['facebook_admin_id'] ) ? $this->data['titles']['facebook_admin_id'] : null,
			'facebookAppId'      => ! empty( $this->data['titles']['facebook_app_id'] ) ? $this->data['titles']['facebook_app_id'] : null,
			'twitterAuthorName'  => ! empty( $this->data['titles']['twitter_author_names'] ) ? $this->data['titles']['twitter_author_names'] : null,
			'additionalProfiles' => ! empty( $this->data['titles']['social_additional_profiles'] ) ? Arr::from_string( $this->data['titles']['social_additional_profiles'], PHP_EOL ) : null,
		];
	}

	/**
	 * Resolve titles and meta local fields.
	 *
	 * @return array<string, mixed>
	 */
	private function meta_local_fields(): array {
		return [
			'type'   => ! empty( $this->data['titles']['knowledgegraph_type'] ) ? $this->data['titles']['knowledgegraph_type'] : null,
			'name'   => ! empty( $this->data['titles']['knowledgegraph_name'] ) ? $this->data['titles']['knowledgegraph_name'] : null,
			'url'    => ! empty( $this->data['titles']['url'] ) ? $this->data['titles']['url'] : null,
			'logoId' => ! empty( $this->data['titles']['knowledgegraph_logo_id'] ) ? $this->data['titles']['knowledgegraph_logo_id'] : null,
		];
	}

	/**
	 * Resolve the titles and meta homepage fields.
	 *
	 * @return ?array<string, mixed>
	 */
	private function meta_homepage_fields(): ?array {
		return 'page' !== get_option( 'show_on_front' ) ? [
			'advancedRobotsMeta'  => $this->advanced_robots_meta( 'homepage_advanced_robots' ),
			'description'         => ! empty( $this->data['titles']['homepage_description'] ) ? $this->data['titles']['homepage_description'] : null,
			'hasCustomRobotsMeta' => ! empty( $this->data['titles']['homepage_custom_robots'] ),
			'robotsMeta'          => ! empty( $this->data['titles']['homepage_robots'] ) ? $this->data['titles']['homepage_robots'] : null,
			'socialDescription'   => ! empty( $this->data['titles']['homepage_facebook_description'] ) ? $this->data['titles']['homepage_facebook_description'] : null,
			'socialImageId'       => ! empty( $this->data['titles']['homepage_facebook_image_id'] ) ? $this->data['titles']['homepage_facebook_image_id'] : null,
			'socialTitle'         => ! empty( $this->data['titles']['homepage_facebook_title'] ) ? $this->data['titles']['homepage_facebook_title'] : null,
			'title'               => ! empty( $this->data['titles']['homepage_title'] ) ? $this->data['titles']['homepage_title'] : null,
		] : null;
	}

	/**
	 * Resolve the titles and meta date archive fields.
	 *
	 * @return array<string, mixed>
	 */
	private function meta_date_archive_fields(): array {
		$has_archives = empty( $this->data['titles']['disable_date_archives'] );

		return [
			'hasArchives'        => $has_archives,
			'advancedRobotsMeta' => $has_archives ? $this->advanced_robots_meta( 'date_advanced_robots' ) : null,
			'robotsMeta'         => $has_archives && ! empty( $this->data['titles']['date_archive_robots'] ) ? $this->data['titles']['date_archive_robots'] : null,
			'archiveDescription' => $has_archives && ! empty( $this->data['titles']['date_archive_description'] ) ? $this->data['titles']['date_archive_description'] : null,
			'archiveTitle'       => $has_archives && ! empty( $this->data['titles']['date_archive_title'] ) ? $this->data['titles']['date_archive_title'] : null,
		];
	}

	/**
	 * Resolve the titles and meta author archive fields.
	 *
	 * @return array<string, mixed>
	 */
	private function meta_author_archive_fields(): array {
		$has_archives = empty( $this->data['titles']['disable_author_archives'] );
		return [
			'advancedRobotsMeta'      => $has_archives ? $this->advanced_robots_meta( 'author_advanced_robots' ) : null,
			'archiveDescription'      => $has_archives && ! empty( $this->data['titles']['author_archive_description'] ) ? $this->data['titles']['author_archive_description'] : null,
			'archiveTitle'            => $has_archives && ! empty( $this->data['titles']['author_archive_title'] ) ? $this->data['titles']['author_archive_title'] : null,
			'baseSlug'                => $has_archives && ! empty( $this->data['titles']['url_author_base'] ) ? $this->data['titles']['url_author_base'] : null,
			'robotsMeta'              => $has_archives && ! empty( $this->data['titles']['author_robots'] ) ? $this->data['titles']['author_robots'] : null,
			'hasArchives'             => $has_archives,
			'hasCustomRobotsMeta'     => $has_archives && ! empty( $this->data['titles']['author_custom_robots'] ),
			'hasSeoControls'          => $has_archives && ! empty( $this->data['titles']['author_add_meta_box'] ),
			'hasSlackEnhancedSharing' => $has_archives && ! empty( $this->data['titles']['author_slack_enhanced_sharing'] ),
		];
	}

	/**
	 * Resolve the titles and meta for taxonomy fields.
	 *
	 * @return ?array<string, array<string,mixed>>
	 */
	private function meta_taxonomy_fields(): ?array {
		/** @var string[] $taxonomies */
		$taxonomies = \WPGraphQL::get_allowed_taxonomies();

		$fields = [];

		foreach ( $taxonomies as $taxonomy ) {
			$prefix = 'tax_' . $taxonomy;

			$fields[ $taxonomy ] = [
				'archiveTitle'            => ! empty( $this->data['titles'][ $prefix . '_archive_title' ] ) ? $this->data['titles'][ $prefix . '_archive_title' ] : null,
				'archiveDescription'      => ! empty( $this->data['titles'][ $prefix . '_archive_description' ] ) ? $this->data['titles'][ $prefix . '_archive_description' ] : null,
				'hasCustomRobotsMeta'     => ! empty( $this->data['titles'][ $prefix . '_custom_robots' ] ) ? $this->data['titles'][ $prefix . '_custom_robots' ] : null,
				'robotsMeta'              => ! empty( $this->data['titles'][ $prefix . '_robots' ] ) ? $this->data['titles'][ $prefix . '_robots' ] : null,
				'advancedRobotsMeta'      => $this->advanced_robots_meta( $prefix . '_advanced_robots' ),
				'hasSlackEnhancedSharing' => ! empty( $this->data['titles'][ $prefix . '_slack_enhanced_sharing' ] ),
				'hasSeoControls'          => ! empty( $this->data['titles'][ $prefix . '_add_meta_box' ] ),
				'hasSnippetData'          => empty( $this->data['titles'][ 'remove_' . $taxonomy . '_snippet_data' ] ),
			];
		}

		return $fields ?: null;
	}

	/**
	 * Resolve the titles and meta for post type fields.
	 *
	 * @return ?array<string, array<string,mixed>>
	 */
	private function meta_content_type_fields(): ?array {
		/** @var string[] $post_types */
		$post_types = \WPGraphQL::get_allowed_post_types();

		$fields = [];

		foreach ( $post_types as $post_type ) {
			$prefix = 'pt_' . $post_type;

			$fields[ $post_type ] = [
				'title'                   => ! empty( $this->data['titles'][ $prefix . '_title' ] ) ? $this->data['titles'][ $prefix . '_title' ] : null,
				'description'             => ! empty( $this->data['titles'][ $prefix . '_description' ] ) ? $this->data['titles'][ $prefix . '_description' ] : null,
				'archiveTitle'            => ! empty( $this->data['titles'][ $prefix . '_archive_title' ] ) ? $this->data['titles'][ $prefix . '_archive_title' ] : null,
				'archiveDescription'      => ! empty( $this->data['titles'][ $prefix . '_archive_description' ] ) ? $this->data['titles'][ $prefix . '_archive_description' ] : null,
				'snippetType'             => ! empty( $this->data['titles'][ $prefix . '_default_rich_snippet' ] ) ? $this->data['titles'][ $prefix . '_default_rich_snippet' ] : null,
				'snippetHeadline'         => ! empty( $this->data['titles'][ $prefix . '_default_snippet_name' ] ) ? $this->data['titles'][ $prefix . '_default_snippet_name' ] : null,
				'snippetDescription'      => ! empty( $this->data['titles'][ $prefix . '_default_snippet_desc' ] ) ? $this->data['titles'][ $prefix . '_default_snippet_desc' ] : null,
				'articleType'             => ! empty( $this->data['titles'][ $prefix . '_default_article_type' ] ) ? $this->data['titles'][ $prefix . '_default_article_type' ] : null,
				'hasCustomRobotsMeta'     => ! empty( $this->data['titles'][ $prefix . '_custom_robots' ] ) ? $this->data['titles'][ $prefix . '_custom_robots' ] : null,
				'robotsMeta'              => ! empty( $this->data['titles'][ $prefix . '_robots' ] ) ? $this->data['titles'][ $prefix . '_robots' ] : null,
				'advancedRobotsMeta'      => $this->advanced_robots_meta( $prefix . '_advanced_robots' ),
				'hasLinkSuggestions'      => ! empty( $this->data['titles'][ $prefix . '_link_suggestions' ] ),
				'shouldUseFocusKeyword'   => ! empty( $this->data['titles'][ $prefix . '_ls_use_fk' ] ),
				'socialImage'             => ! empty( $this->data['titles'][ $prefix . '_facebook_image_id' ] ),
				'hasBulkEditing'          => ! empty( $this->data['titles'][ $prefix . '_bulk_editing' ] ) ? $this->data['titles'][ $prefix . '_bulk_editing' ] : null,
				'hasSlackEnhancedSharing' => ! empty( $this->data['titles'][ $prefix . '_slack_enhanced_sharing' ] ),
				'hasSeoControls'          => ! empty( $this->data['titles'][ $prefix . '_add_meta_box' ] ),
				'analyzedFields'          => ! empty( $this->data['titles'][ $prefix . '_analyze_fields' ] ) ? $this->data['titles'][ $prefix . '_analyze_fields' ] : null,
				'primaryTaxonomy'         => ! empty( $this->data['titles'][ $prefix . '_primary_taxonomy' ] ) ? $this->data['titles'][ $prefix . '_primary_taxonomy' ] : null,
			];
		}

		return $fields ?: null;
	}

	/**
	 * Resolve the sitemap general settings.
	 *
	 * @return array<string, mixed>
	 */
	private function sitemap_general_fields(): array {
		return [
			'canPingSearchEngines'    => false,
			'excludedPostDatabaseIds' => ! empty( $this->data['sitemap']['exclude_posts'] ) ? array_map( 'absint', explode( ',', $this->data['sitemap']['exclude_posts'] ) ) : null,
			'excludedTermDatabaseIds' => ! empty( $this->data['sitemap']['exclude_terms'] ) ? array_map( 'absint', explode( ',', $this->data['sitemap']['exclude_terms'] ) ) : null,
			'hasFeaturedImage'        => ! empty( $this->data['sitemap']['include_featured_image'] ),
			'hasImages'               => ! empty( $this->data['sitemap']['include_images'] ),
			'linksPerSitemap'         => ! empty( $this->data['sitemap']['items_per_page'] ) ? absint( $this->data['sitemap']['items_per_page'] ) : null,
		];
	}

	/**
	 * Resolve the sitemap general settings.
	 *
	 * @return array<string, mixed>
	 */
	private function sitemap_author_fields(): ?array {
		if ( ! Helper::is_author_archive_indexable() ) {
			return null;
		}

		return [
			'excludedRoles'           => function () {
				if ( empty( $this->data['sitemap']['exclude_roles'] ) ) {
					return null;
				}

				$roles = array_keys( $this->data['sitemap']['exclude_roles'] );

				if ( ! is_string( $roles[0] ) ) {
					$roles = array_values( $this->data['sitemap']['exclude_roles'] );
				}

				return ! empty( $roles ) ? $roles : null;
			},
			'excludedUserDatabaseIds' => ! empty( $this->data['sitemap']['exclude_users'] ) ? array_map( 'absint', explode( ',', $this->data['sitemap']['exclude_users'] ) ) : null,
			'sitemapUrl'              => Router::get_base_url( 'author-sitemap.xml' ),
		];
	}

	/**
	 * Resolve the sitemap post type settings.
	 *
	 * @return ?array<string, mixed>
	 */
	private function sitemap_content_type_fields(): ?array {
		/** @var string[] $post_types */
		$post_types = \WPGraphQL::get_allowed_post_types();

		$fields = [];

		foreach ( $post_types as $post_type ) {
			$prefix = 'pt_' . $post_type;

			$fields[ $post_type ] = [
				'customImageMetaKeys' => ! empty( $this->data['sitemap'][ $prefix . '_image_customfields' ] ) ? preg_split( '/\r\n|\r|\n/', $this->data['sitemap'][ $prefix . '_image_customfields' ] ) : null,
				'isInSitemap'         => ! empty( $this->data['sitemap'][ $prefix . '_sitemap' ] ),
				'sitemapUrl'          => ! empty( $this->data['sitemap'][ $prefix . '_sitemap' ] ) ? Router::get_base_url( $post_type . '-sitemap.xml' ) : null,
				'type'                => $post_type,
			];
		}

		return $fields ?: null;
	}

	/**
	 * Resolve the sitemap taxonomy settings.
	 *
	 * @return array<string, array<string,mixed>>
	 */
	private function sitemap_taxonomy_fields(): ?array {
		/** @var string[] $taxonomies */
		$taxonomies = \WPGraphQL::get_allowed_taxonomies();

		$fields = [];

		foreach ( $taxonomies as $taxonomy ) {
			$prefix = 'tax_' . $taxonomy;

			$fields[ $taxonomy ] = [
				'hasEmptyTerms' => ! empty( $this->data['sitemap'][ $prefix . '_include_empty' ] ),
				'isInSitemap'   => ! empty( $this->data['sitemap'][ $prefix . '_sitemap' ] ),
				'sitemapUrl'    => ! empty( $this->data['sitemap'][ $prefix . '_sitemap' ] ) ? Router::get_base_url( $taxonomy . '-sitemap.xml' ) : null,
				'type'          => $taxonomy,

			];
		}

		return $fields ?: null;
	}
}

================
File: src/Model/UserSeo.php
================
<?php
/**
 * The SEO model for User objects.
 *
 * @package \WPGraphQL\RankMath\Model
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Model;

use GraphQL\Error\Error;

/**
 * Class - UserSeo
 *
 * @property int $ID the database ID.
 */
class UserSeo extends Seo {
	/**
	 * Stores the incoming post data
	 *
	 * @var \WP_User $data
	 */
	protected $data;

	/**
	 * The global authordata at time of Model generation
	 *
	 * @var ?\WP_User
	 */
	protected $global_authordata;

	/**
	 * The settings prefix
	 *
	 * @var string
	 */
	protected string $prefix;

	/**
	 * Constructor.
	 *
	 * @param int $user_id .
	 * @throws \GraphQL\Error\Error .
	 */
	public function __construct( int $user_id ) {
		$object = get_user_by( 'id', $user_id );
		if ( false === $object ) {
			throw new Error(
				sprintf(
					// translators: post id .
					esc_html__( 'Invalid user id %d passed to UserSeo model.', 'wp-graphql-rank-math' ),
					absint( $user_id ),
				)
			);
		}

		$this->database_id = $object->ID;

		parent::__construct( $object );
	}

	/**
	 * {@inheritDoc}
	 */
	public function setup(): void {
		global $wp_query, $post, $author, $authordata;

		// Store variables for resetting at tear down.
		$this->global_post       = $post;
		$this->global_authordata = $authordata;

		if ( $this->data instanceof \WP_User ) {

			// Reset postdata.
			$wp_query->reset_postdata();

			// Parse the query to setup global state.
			$wp_query->parse_query(
				[
					'author_name' => $this->data->user_nicename,
				]
			);

			// Setup globals.
			$wp_query->is_author         = true;
			$GLOBALS['authordata']       = $this->data; // phpcs:ignore WordPress.WP.GlobalVariablesOverride
			$author                      = $this->data->ID; // phpcs:ignore WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedVariableFound,SlevomatCodingStandard.Variables.UnusedVariable.UnusedVariable
			$wp_query->queried_object    = $this->data;
			$wp_query->queried_object_id = $this->data->ID;
		}

		parent::setup();
	}

	/**
	 * Reset global state after the model fields
	 * have been generated
	 *
	 * @return void
	 */
	public function tear_down() {
		global $author;
		if ( $this->data instanceof \WP_User ) {
			$author                = isset( $this->global_authordata ) ? $this->global_authordata->ID : null; // phpcs:ignore WordPress.NamingConventions.PrefixAllGlobals
			$GLOBALS['authordata'] = $this->global_authordata; // phpcs:ignore WordPress.WP.GlobalVariablesOverride
			$GLOBALS['post']       = $this->global_post; // phpcs:ignore WordPress.WP.GlobalVariablesOverride
		}

		wp_reset_postdata();
	}

	/**
	 * {@inheritDoc}
	 */
	protected function init() {
		if ( empty( $this->fields ) ) {
			parent::init();

			$this->fields = array_merge(
				$this->fields,
				[
					'breadcrumbTitle'    => function (): ?string {
						$title = $this->get_meta( 'breadcrumb_title', '', $this->data->display_name );

						return ! empty( $title ) ? html_entity_decode( $title, ENT_QUOTES ) : null;
					},
					'ID'                 => fn (): int => $this->database_id,
					'facebookProfileUrl' => fn (): ?string => get_user_meta( $this->database_id, 'facebook', true ) ?: null,
					'twitterUserName'    => fn (): ?string => get_user_meta( $this->database_id, 'twitter', true ) ?: null,
					'additionalProfiles' => function (): ?array {
						$additional_profiles = get_user_meta( $this->database_id, 'additional_profile_urls', true );

						return ! empty( $additional_profiles ) ? explode( ' ', $additional_profiles ) : null;
					},

				]
			);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	public function get_object_type(): string {
		return 'User';
	}

	/**
	 * {@inheritDoc}
	 *
	 * @throws \GraphQL\Error\UserError If no valid term link.
	 */
	protected function get_object_url(): string {
		return get_author_posts_url( $this->database_id );
	}
}

================
File: src/Model/Seo.php
================
<?php
/**
 * The abstract SEO model.
 *
 * @package \WPGraphQL\RankMath\Model
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Model;

use RankMath\Frontend\Breadcrumbs as RMBreadcrumbs;
use RankMath\Helper as RMHelper;
use RankMath\Paper\Paper;
use WPGraphQL\Model\Model;

/**
 * Class - Seo
 *
 * @property string $type The type of object.
 */
abstract class Seo extends Model {
	/**
	 * Stores the incoming post data
	 *
	 * @var \WP_Post|\WP_Term|\WP_User|\WP_Post_Type $data
	 */
	protected $data;

	/**
	 * The database id for the current object.
	 *
	 * @var int
	 */
	protected int $database_id;

	/**
	 * The current RankMath paper helper.
	 *
	 * @var \RankMath\Paper\Paper
	 */
	protected $helper;

	/**
	 * The settings prefix
	 *
	 * @var string
	 */
	protected string $prefix;

	/**
	 * The head markup.
	 *
	 * It's stored here to avoid having to query it multiple times.
	 *
	 * A `false` value is used to determine whether an attempt has already been made to fetch it.
	 *
	 * @var string|false|null
	 */
	protected $full_head;

	/**
	 * The Global Post at time of Model generation
	 *
	 * @var \WP_Post
	 */
	protected $global_post;

	/**
	 * Constructor.
	 *
	 * @param \WP_User|\WP_Term|\WP_Post|\WP_Post_Type $wp_object .
	 * @param string                                   $capability .
	 * @param string[]                                 $allowed_fields .
	 */
	public function __construct( $wp_object, $capability = '', $allowed_fields = [] ) {
		$this->full_head = false;
		$this->data      = $wp_object;

		$allowed_fields = array_merge(
			[
				'breadcrumbs',
				'canonicalUrl',
				'description',
				'fullHead',
				'jsonLd',
				'openGraph',
				'robots',
				'title',
				'type',
			],
			$allowed_fields
		);

		parent::__construct( $capability, $allowed_fields );
	}

	/**
	 * {@inheritDoc}
	 */
	public function setup(): void {
		Paper::reset();
		/** @var \RankMath\Paper\Paper $paper */
		$paper        = Paper::get();
		$this->helper = $paper;

		// Seat up RM Globals.
		$url = $this->get_object_url();

		$this->setup_post_head( $url );
	}

	/**
	 * {@inheritDoc}
	 */
	protected function init() {
		if ( empty( $this->fields ) ) {
			$this->fields = [
				'breadcrumbs'   => fn (): ?array => $this->get_breadcrumbs(),
				'canonicalUrl'  => function (): ?string {
					return $this->helper->get_canonical() ?: null;
				},
				'description'   => function (): ?string {
					$description = $this->helper->get_description();

					return ! empty( $description ) ? html_entity_decode( $description, ENT_QUOTES ) : null;
				},
				'focusKeywords' => function (): ?array {
					$keywords = $this->helper->get_keywords();

					return ! empty( $keywords ) ? explode( ',', $keywords ) : null;
				},
				'fullHead'      => function (): ?string {
					$head = $this->get_head();
					return $head ?: null;
				},
				'jsonLd'        => static function () {
					$json = new \RankMath\Schema\JsonLD();
					$json->setup();
					ob_start();
					$json->json_ld();
					$output = ob_get_clean();

					return [ 'raw' => $output ?: null ];
				},
				'openGraph'     => function () {
					$head = $this->get_head();

					return ! empty( $head ) ? $this->parse_og_tags( $head ) : null;
				},
				'robots'        => function (): ?array {
					return $this->helper->get_robots() ?: null;
				},
				'title'         => function (): ?string {
					$title = $this->helper->get_title();

					return ! empty( $title ) ? html_entity_decode( $title, ENT_QUOTES ) : null;
				},
				'type'          => function (): string {
					return $this->get_object_type();
				},
			];
		}
	}

	/**
	 * Gets and parses the breadcrumbs for the object.
	 *
	 * @return ?array<string, string|mixed>[] The breadcrumbs.
	 */
	protected function get_breadcrumbs(): ?array {
		// Get the crumbs and shape them.
		$crumbs = RMBreadcrumbs::get()->get_crumbs();

		if ( empty( $crumbs ) ) {
			return null;
		}

		$breadcrumbs = array_map(
			static function ( $crumb ) {
				if ( empty( $crumb[1] ) && empty( $crumb[0] ) ) {
					return null;
				}

				return [
					'text'     => $crumb[0] ?? null,
					'url'      => $crumb[1] ?? null,
					'isHidden' => ! empty( $crumb['hide_in_schema'] ),
				];
			},
			$crumbs
		);

		$breadcrumbs = array_filter( $breadcrumbs );

		return ! empty( $breadcrumbs ) ? $breadcrumbs : null;
	}

	/**
	 * Gets the hydrated meta, falling back to default settings.
	 *
	 * @param string $key The local meta key.
	 * @param string $fallback Optional. The settings meta key.
	 * @param string $default_value Optional. The default value.
	 *
	 * @return mixed|null
	 */
	protected function get_meta( string $key, string $fallback = '', string $default_value = '' ) {
		$value = null;
		if ( $this->data instanceof \WP_Post ) {
			$value = RMHelper::get_post_meta( $key, $this->database_id );
		} elseif ( $this->data instanceof \WP_Term ) {
			$value = RMHelper::get_term_meta( $key, $this->database_id );
		} elseif ( $this->data instanceof \WP_User ) {
			$value = RMHelper::get_user_meta( $key, $this->database_id );
		}

		if ( empty( $value ) && ! empty( $fallback ) ) {
			$value = RMHelper::get_settings( "titles.{$fallback}", $default_value );
			if ( ! empty( $value ) ) {
				$value = RMHelper::replace_vars( $value, $this->data );
			}
		}

		return ( ! empty( $value ) ? $value : $default_value ) ?: null;
	}

	/**
	 * Gets the object type used to determine how the GraphQL interface should resolve.
	 */
	abstract public function get_object_type(): string;

	/**
	 * Gets the object-specific url to use for generating the RankMath <head>.
	 */
	abstract protected function get_object_url(): string;

	/**
	 * Gets the object-specific url to use for generating the RankMath <head>.
	 *
	 * @deprecated 0.0.8
	 */
	protected function get_rest_url_param(): string {
		_deprecated_function( __FUNCTION__, '0.0.8', __NAMESPACE__ . '::get_object_url()' );
		return $this->get_object_url();
	}

	/**
	 * Gets all the tags that go in the <head>.
	 *
	 * Shims the `RankMath\Rest\Headless::get_html_head() private method to avoid a REST Call.
	 *
	 * @throws \GraphQL\Error\Error When the REST request is invalid.
	 * @throws \GraphQL\Error\UserError When REST response fails.
	 */
	protected function get_head(): ?string {
		if ( false !== $this->full_head ) {
			return $this->full_head;
		}

		ob_start();
		do_action( 'wp' ); // phpcs:ignore WordPress.NamingConventions.PrefixAllGlobals
		do_action( 'rank_math/head' );

		$head = ob_get_clean();

		$this->full_head = $head ?: null;

		return $this->full_head;
	}

	/**
	 * Parses the Open Graph tags from the head.
	 *
	 * @param string $head The head.
	 *
	 * @return ?array<string, mixed> The tags.
	 */
	protected function parse_og_tags( string $head ): ?array {
		$tags = [];

		if ( preg_match_all( '/<meta (property|name)="([^"]+)" content="([^"]+)" \/>/', $head, $matches ) ) {
			$this->save_tags_from_matches( $matches, $tags );
		}

		return $tags ?: null;
	}

	/**
	 * Saves the tags from the matches.
	 *
	 * @param string[][]           $matches The matches.
	 * @param array<string, mixed> $tags The tags array reference.
	 */
	private function save_tags_from_matches( array $matches, array &$tags ): void {
		// $matches[2] contains the OpenGraph prefix (og, article, twitter, etc ).
		foreach ( $matches[2] as $key => $match ) {
			// Each `:` is a new level.
			$parts   = explode( ':', $match );
			$pointer = &$tags;

			// Loop through each part and build the array.
			foreach ( $parts as $part ) {
				// Ensure the part is an array.
				if ( ! isset( $pointer[ $part ] ) ) {
					$pointer[ $part ] = [];
				} elseif ( ! is_array( $pointer[ $part ] ) ) {
					$pointer[ $part ] = [ $pointer[ $part ] ];
				}

				$pointer = &$pointer[ $part ];
			}

			// Save the value.
			$pointer = $matches[3][ $key ];
		}
	}

	/**
	 * Prepare head output for a URL.
	 *
	 * Shims the RankMath\Rest\Headless::setup_post_head() private method to avoid a REST call.
	 *
	 * @param string $url The URL.
	 */
	private function setup_post_head( string $url ): void {
		$headless = new \RankMath\Rest\Headless();
		// Setup WordPress.
		$_SERVER['REQUEST_URI'] = esc_url_raw( $headless->generate_request_uri( $url ) );
		remove_all_actions( 'wp' );
		remove_all_actions( 'parse_request' );
		remove_all_actions( 'rank_math/head' );
		remove_all_actions( 'rank_math/json_ld' );
		remove_all_actions( 'rank_math/opengraph/facebook' );
		remove_all_actions( 'rank_math/opengraph/twitter' );
		remove_all_actions( 'rank_math/opengraph/slack' );

		if ( $headless->is_home ) {
			$GLOBALS['wp_query']->is_home = true;
		}

		remove_filter( 'option_rewrite_rules', [ $headless, 'fix_query_notice' ] );

		// Setup Rank Math.
		rank_math()->variables->setup();
		rank_math()->manager->load_modules();
		new \RankMath\Frontend\Frontend();
	}
}

================
File: src/Fields/RootQuery.php
================
<?php
/**
 * Registers fields to RootQuery
 *
 * @package WPGraphQL\Fields
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Fields;

use WPGraphQL\RankMath\Model\Settings as ModelSettings;
use WPGraphQL\RankMath\Type\WPObject\Settings;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\FieldsType;

/**
 * Class - RootQuery
 */
class RootQuery extends FieldsType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'RootQuery';
	}

	/**
	 * {@inheritDoc}
	 *
	 * @return string
	 */
	public static function get_type_name(): string {
		return static::type_name();
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'rankMathSettings' => [
				'type'        => Settings::get_type_name(),
				'description' => __( 'RankMath SEO site settings', 'wp-graphql-rank-math' ),
				'resolve'     => static fn () => new ModelSettings(),
			],
		];
	}
}

================
File: src/Modules/Redirection/CoreSchemaFilters.php
================
<?php
/**
 * Adds filters that modify core schema.
 *
 * @package WPGraphQL\RankMath\Modules\Redirection
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection;

use WPGraphQL\AppContext;
use WPGraphQL\RankMath\Modules\Redirection\Data\Cursor\RedirectionCursor;
use WPGraphQL\RankMath\Modules\Redirection\Data\Loader\RedirectionsLoader;
use WPGraphQL\RankMath\Utils\RMUtils;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\Registrable;

/**
 * Class - CoreSchemaFilters
 */
class CoreSchemaFilters implements Registrable {
	/**
	 * {@inheritDoc}
	 */
	public static function init(): void {
		// Bail if the module is not active.
		if ( ! RMUtils::is_module_active( TypeRegistry::MODULE_NAME ) ) {
			return;
		}

		add_filter( 'graphql_data_loaders', [ self::class, 'register_loaders' ], 10, 2 );

		add_filter( 'rank_math_clauses_order_by', [ self::class, 'dedupe_pagination_clauses' ] );
		add_filter( 'rank_math_clauses_where', [ self::class, 'dedupe_pagination_clauses' ] );
		add_action( 'rank_math/redirection/get_redirections_query', [ self::class, 'add_redirection_pagination_support' ], 10, 2 );
	}

	/**
	 * Registers loaders to AppContext.
	 *
	 * @param array<string, \WPGraphQL\Data\Loader\AbstractDataLoader> $loaders Data loaders.
	 * @param \WPGraphQL\AppContext                                    $context App context.
	 *
	 * @return array<string, \WPGraphQL\Data\Loader\AbstractDataLoader>
	 */
	public static function register_loaders( array $loaders, AppContext $context ): array {
		$loaders[ RedirectionsLoader::$name ] = new RedirectionsLoader( $context );

		return $loaders;
	}

	/**
	 * Adds pagination support to the redirections query.
	 *
	 * @param \MyThemeShop\Database\Query_Builder $table The redirections table.
	 * @param array<string,mixed>                 $args  The query args passed to the query.
	 */
	public static function add_redirection_pagination_support( &$table, array $args ): void {
		// Return early if its not a GraphQL request.
		if ( true !== is_graphql_request() ) {
			return;
		}

		$where = [];

		// Get a copy of the table, not the reference.
		$current_table = clone $table;

		// Apply the after cursor to the query.
		if ( ! empty( $args['graphql_after_cursor'] ) ) {
			$after_cursor = new RedirectionCursor( $args, 'after' );
			$where        = $after_cursor->get_where();

			// Modify the table to include the where.
			if ( ! empty( $where ) ) {
				$current_table->where( $where['column'], $where['operator'], $where['value'], 'AND' );
			}
		}

		// Apply the before cursor to the query.
		if ( ! empty( $args['graphql_before_cursor'] ) ) {
			$before_cursor = new RedirectionCursor( $args, 'before' );
			$where         = $before_cursor->get_where();

			// Modify the table to include the where.
			if ( ! empty( $where ) ) {
				$current_table->where( $where['column'], $where['operator'], $where['value'], 'AND' );
			}
		}

		// // Add cursor stabilization
		$orderby_dir = isset( $args['graphql_cursor_compare'] ) && '>' === $args['graphql_cursor_compare'] ? 'ASC' : 'DESC';
		$current_table->orderBy( 'id', $orderby_dir );

		// Set the table back to the reference.
		$table = $current_table;
	}

	/**
	 * Deduplicates clauses on the Rank Math table instance.
	 *
	 * These are caused when paginating, since the $table is a static instance.
	 *
	 * @param string[] $clauses The clauses to dedupe.
	 *
	 * @return string[]
	 */
	public static function dedupe_pagination_clauses( array $clauses ): array {
		// Return early if its not a GraphQL request.
		if ( true !== is_graphql_request() ) {
			return $clauses;
		}

		// Dedupe the clauses.
		return array_unique( $clauses );
	}
}

================
File: src/Modules/Redirection/TypeRegistry.php
================
<?php
/**
 * The module registry.
 *
 * @package WPGraphQL\RankMath\Modules\Redirection
 * @since 0.0.13
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection;

use WPGraphQL\RankMath\Modules\Redirection\Connection;
use WPGraphQL\RankMath\Modules\Redirection\Fields;
use WPGraphQL\RankMath\Modules\Redirection\Type\Enum;
use WPGraphQL\RankMath\Modules\Redirection\Type\Input;
use WPGraphQL\RankMath\Modules\Redirection\Type\WPObject;
use WPGraphQL\RankMath\Utils\RMUtils;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\Registrable;

/**
 * Class - TypeRegistry
 */
class TypeRegistry implements Registrable {
	public const MODULE_NAME = 'redirections';

	/**
	 * {@inheritDoc}
	 */
	public static function init(): void {
		// Bail if the module is not active.
		if ( ! RMUtils::is_module_active( self::MODULE_NAME ) ) {
			return;
		}

		// Register the types.
		add_filter( 'graphql_seo_registered_enum_classes', [ self::class, 'enums' ] );
		add_filter( 'graphql_seo_registered_input_classes', [ self::class, 'inputs' ] );
		add_filter( 'graphql_seo_registered_object_classes', [ self::class, 'objects' ] );
		add_filter( 'graphql_seo_registered_field_classes', [ self::class, 'fields' ] );
		add_filter( 'graphql_seo_registered_connection_classes', [ self::class, 'connections' ] );
	}

	/**
	 * List of Enum classes to register.
	 *
	 * @param class-string[] $existing_classes The existing classes.
	 *
	 * @return class-string[]
	 */
	public static function enums( array $existing_classes ): array {
		$classes_to_register = [
			Enum\RedirectionBehaviorEnum::class,
			Enum\RedirectionComparisonTypeEnum::class,
			Enum\RedirectionConnectionOrderByEnum::class,
			Enum\RedirectionStatusEnum::class,
			Enum\RedirectionTypeEnum::class,
		];

		return array_merge( $existing_classes, $classes_to_register );
	}

	/**
	 * List of Input classes to register.
	 *
	 * @param class-string[] $existing_classes The existing classes.
	 *
	 * @return class-string[]
	 */
	public static function inputs( array $existing_classes ): array {
		$classes_to_register = [
			Input\RedirectionConnectionOrderbyInput::class,
		];

		return array_merge( $existing_classes, $classes_to_register );
	}

	/**
	 * List of Object classes to register.
	 *
	 * @param class-string[] $existing_classes The existing classes.
	 *
	 * @return class-string[]
	 */
	public static function objects( array $existing_classes ): array {
		$classes_to_register = [
			WPObject\RedirectionSettings::class,
			WPObject\RedirectionSource::class,
			WPObject\Redirection::class,
		];

		return array_merge( $existing_classes, $classes_to_register );
	}

	/**
	 * List of Field classes to register.
	 *
	 * @param class-string[] $existing_classes The xisting classes.
	 *
	 * @return class-string[]
	 */
	public static function fields( array $existing_classes ): array {
		$classes_to_register = [
			Fields\GeneralSettings::class,
			Fields\RootQuery::class,
		];

		return array_merge( $existing_classes, $classes_to_register );
	}

	/**
	 * List of Connection classes to register.
	 *
	 * @param class-string[] $existing_classes The xisting classes.
	 *
	 * @return class-string[]
	 */
	public static function connections( array $existing_classes ): array {
		$classes_to_register = [
			Connection\RedirectionConnection::class,
		];

		return array_merge( $existing_classes, $classes_to_register );
	}
}

================
File: src/Modules/Redirection/Connection/RedirectionConnection.php
================
<?php
/**
 * Registers the connections to Redirection
 *
 * @package WPGraphQL\RankMath\Modules\Redirection\Connection
 * @since 0.0.13
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Connection;

use GraphQL\Type\Definition\ResolveInfo;
use WPGraphQL\AppContext;
use WPGraphQL\RankMath\Modules\Redirection\Data\Connection\RedirectionConnectionResolver;
use WPGraphQL\RankMath\Modules\Redirection\Type\Enum\RedirectionStatusEnum;
use WPGraphQL\RankMath\Modules\Redirection\Type\Input\RedirectionConnectionOrderbyInput;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ConnectionType;

/**
 * Class - RedirectionConnection
 */
class RedirectionConnection extends ConnectionType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'Redirection';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function register(): void {
		/** @var array<string,mixed> $config */
		$config = self::get_connection_config(
			[
				'fromType'       => 'RootQuery',
				'fromFieldName'  => 'redirections',
				'connectionArgs' => self::get_connection_args(),
				'description'    => __( 'A RankMath SEO redirection object.', 'wp-graphql-rank-math' ),
				'resolve'        => static function ( $source, array $args, AppContext $context, ResolveInfo $info ) {
					$resolver = new RedirectionConnectionResolver( $source, $args, $context, $info );

					return $resolver->get_connection();
				},
			]
		);

		register_graphql_connection( $config );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function connection_args(): array {
		return [
			'search'  => [
				'type'        => 'String',
				'description' => __( 'Search the status, redirection url, or sources for the provided value.', 'wp-graphql-rank-math' ),
			],
			'status'  => [
				'type'        => [ 'list_of' => RedirectionStatusEnum::get_type_name() ],
				'description' => __( 'Filter the redirections by their status.', 'wp-graphql-rank-math' ),
			],
			'orderby' => [
				'type'        => RedirectionConnectionOrderbyInput::get_type_name(),
				'description' => __( 'Order the results by a specific field.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Modules/Redirection/Type/WPObject/RedirectionSettings.php
================
<?php
/**
 * The Redirection Settings GraphQL object.
 *
 * @package WPGraphQL\RankMath\Modules\Redirection\Type\WPObject
 * @since 0.0.13
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Type\WPObject;

use WPGraphQL\RankMath\Modules\Redirection\Type\Enum\RedirectionBehaviorEnum;
use WPGraphQL\RankMath\Modules\Redirection\Type\Enum\RedirectionTypeEnum;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - RedirectionSettings
 */
class RedirectionSettings extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'RedirectionSettings';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Redirection settings', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'fallbackBehavior'    => [
				'type'        => RedirectionBehaviorEnum::get_type_name(),
				'description' => __( 'The fallback redirection behavior', 'wp-graphql-rank-math' ),
			],
			'fallbackCustomUrl'   => [
				'type'        => 'String',
				'description' => __( 'The custom redirection URL to use as a fallback. Only set if `fallbackBehavior` is `CUSTOM`.', 'wp-graphql-rank-math' ),
			],
			'hasAutoPostRedirect' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether the auto post redirection is enabled.', 'wp-graphql-rank-math' ),
			],
			'hasDebug'            => [
				'type'        => 'Boolean',
				'description' => __( 'Whether the redirection Debug console is enabled.', 'wp-graphql-rank-math' ),
			],
			'redirectionType'     => [
				'type'        => RedirectionTypeEnum::get_type_name(),
				'description' => __( 'The redirection type.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Modules/Redirection/Type/WPObject/RedirectionSource.php
================
<?php
/**
 * The Redirection Source GraphQL object.
 *
 * @package WPGraphQL\RankMath\Modules\Redirection\Type\WPObject
 * @since 0.0.13
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Type\WPObject;

use WPGraphQL\RankMath\Modules\Redirection\Type\Enum\RedirectionComparisonTypeEnum;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;

/**
 * Class - RedirectionSource
 */
class RedirectionSource extends ObjectType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'RedirectionSource';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Redirection source to match.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'ignore'     => [
				'type'        => 'String',
				'description' => __( 'The ignore flag to use when matching the pattern.', 'wp-graphql-rank-math' ),
			],
			'pattern'    => [
				'type'        => 'String',
				'description' => __( 'The pattern to match.', 'wp-graphql-rank-math' ),
			],
			'comparison' => [
				'type'        => RedirectionComparisonTypeEnum::get_type_name(),
				'description' => __( 'The comparison type to use when matching the pattern.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Modules/Redirection/Type/WPObject/Redirection.php
================
<?php
/**
 * The Redirections GraphQL object.
 *
 * @package WPGraphQL\RankMath\Modules\Redirection\Type\WPObject
 * @since 0.0.13
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Type\WPObject;

use WPGraphQL\RankMath\Modules\Redirection\Type\Enum\RedirectionStatusEnum;
use WPGraphQL\RankMath\Modules\Redirection\Type\Enum\RedirectionTypeEnum;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\ObjectType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Interfaces\TypeWithInterfaces;

/**
 * Class - Redirection
 */
class Redirection extends ObjectType implements TypeWithInterfaces {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'Redirection';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The RankMath SEO Redirection object.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'dateCreated'         => [
				'type'        => 'String',
				'description' => __( 'The date the redirection was created.', 'wp-graphql-rank-math' ),
			],
			'dateCreatedGmt'      => [
				'type'        => 'String',
				'description' => __( 'The GMT date the redirection was created.', 'wp-graphql-rank-math' ),
			],
			'dateModified'        => [
				'type'        => 'String',
				'description' => __( 'The date the redirection was last modified.', 'wp-graphql-rank-math' ),
			],
			'dateModifiedGmt'     => [
				'type'        => 'String',
				'description' => __( 'The GMT date the redirection was last modified.', 'wp-graphql-rank-math' ),
			],
			'dateLastAccessed'    => [
				'type'        => 'String',
				'description' => __( 'The date the redirection was last accessed.', 'wp-graphql-rank-math' ),
			],
			'dateLastAccessedGmt' => [
				'type'        => 'String',
				'description' => __( 'The GMT date the redirection was last accessed.', 'wp-graphql-rank-math' ),
			],
			'hits'                => [
				'type'        => 'Int',
				'description' => __( 'The number of hits for this redirection.', 'wp-graphql-rank-math' ),
			],
			'redirectToUrl'       => [
				'type'        => 'String',
				'description' => __( 'The URL to redirect to.', 'wp-graphql-rank-math' ),
			],
			'sources'             => [
				'type'        => [ 'list_of' => RedirectionSource::get_type_name() ],
				'description' => __( 'The sources of the redirection.', 'wp-graphql-rank-math' ),
			],
			'status'              => [
				'type'        => RedirectionStatusEnum::get_type_name(),
				'description' => __( 'The status of the redirection.', 'wp-graphql-rank-math' ),
			],
			'type'                => [
				'type'        => RedirectionTypeEnum::get_type_name(),
				'description' => __( 'The redirection type (HTTP status code).', 'wp-graphql-rank-math' ),
			],
		];
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_interfaces(): array {
		return [
			'Node',
			'DatabaseIdentifier',
		];
	}
}

================
File: src/Modules/Redirection/Type/Input/RedirectionConnectionOrderbyInput.php
================
<?php
/**
 * The Redirection connection Orderby Input.
 *
 * @package WPGraphQL\RankMath\Modules\Redirection\Type\Input
 * @since 0.0.13
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Type\Input;

use WPGraphQL\RankMath\Modules\Redirection\Type\Enum\RedirectionConnectionOrderByEnum;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\InputType;

/**
 * Class - RedirectionConnectionOrderbyInput
 */
class RedirectionConnectionOrderbyInput extends InputType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'RedirectionConnectionOrderbyInput';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The Redirection connection orderby input.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'field' => [
				'type'        => RedirectionConnectionOrderByEnum::get_type_name(),
				'description' => __( 'The field to order the results by.', 'wp-graphql-rank-math' ),
			],
			'order' => [
				'type'        => 'OrderEnum',
				'description' => __( 'The ordering direction.', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Modules/Redirection/Type/Enum/RedirectionBehaviorEnum.php
================
<?php
/**
 * The Redirection default Behavior enum.
 *
 * @package WPGraphQL\RankMath\Modules\Redirection\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Type\Enum;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;

/**
 * Class - RedirectionBehaviorEnum
 */
class RedirectionBehaviorEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'RedirectionBehaviorEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The Redirection behavior.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		return [
			'DEFAULT'  => [
				'description' => __( 'Redirect to default 404.', 'wp-graphql-rank-math' ),
				'value'       => 'default',
			],
			'HOMEPAGE' => [
				'description' => __( 'Redirect to Home page.', 'wp-graphql-rank-math' ),
				'value'       => 'homepage',
			],
			'CUSTOM'   => [
				'description' => __( 'Redirect to custom URL.', 'wp-graphql-rank-math' ),
				'value'       => 'custom',
			],
		];
	}
}

================
File: src/Modules/Redirection/Type/Enum/RedirectionComparisonTypeEnum.php
================
<?php
/**
 * The Redirection Comparison Type enum.
 *
 * @package WPGraphQL\RankMath\Modules\Redirection\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Type\Enum;

use RankMath\Helper;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;
use WPGraphQL\Type\WPEnumType;

/**
 * Class - RedirectionComparisonTypeEnum
 */
class RedirectionComparisonTypeEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'RedirectionComparisonTypeEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The Redirection comparison type.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		$redirection_types = Helper::choices_comparison_types();

		$values = [];

		foreach ( $redirection_types as $value => $description ) {
			$values[ WPEnumType::get_safe_name( $value ) ] = [
				'description' => $description,
				'value'       => $value,
			];
		}

		return $values;
	}
}

================
File: src/Modules/Redirection/Type/Enum/RedirectionTypeEnum.php
================
<?php
/**
 * The Redirection type enum.
 *
 * @package WPGraphQL\RankMath\Modules\Redirection\Type\Enum
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Type\Enum;

use RankMath\Helper;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;
use WPGraphQL\Type\WPEnumType;

/**
 * Class - RedirectionTypeEnum
 */
class RedirectionTypeEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'RedirectionTypeEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The Redirection type.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		$redirection_types = Helper::choices_redirection_types();

		$values = [];

		foreach ( $redirection_types as $value => $description ) {
			$values[ WPEnumType::get_safe_name( 'REDIRECT_' . (string) $value ) ] = [
				'description' => $description,
				'value'       => $value,
			];
		}

		return $values;
	}
}

================
File: src/Modules/Redirection/Type/Enum/RedirectionConnectionOrderByEnum.php
================
<?php
/**
 * The Redirection connection OrderBy enum.
 *
 * @package WPGraphQL\RankMath\Modules\Redirection\Type\Enum
 * @since 0.0.13
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Type\Enum;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;

/**
 * Class - RedirectionConnectionOrderByEnum
 */
class RedirectionConnectionOrderByEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'RedirectionConnectionOrderByEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'Options for ordering the Redirection connection.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		return [
			'DATABASE_ID'        => [
				'description' => __( 'Order by the database ID.', 'wp-graphql-rank-math' ),
				'value'       => 'id',
			],
			'DATE_CREATED'       => [
				'description' => __( 'Order by the date created.', 'wp-graphql-rank-math' ),
				'value'       => 'created',
			],
			'DATE_LAST_ACCESSED' => [
				'description' => __( 'Order by the date last accessed.', 'wp-graphql-rank-math' ),
				'value'       => 'last_accessed',
			],
			'DATE_UPDATED'       => [
				'description' => __( 'Order by the date created.', 'wp-graphql-rank-math' ),
				'value'       => 'created',
			],
			'HITS'               => [
				'description' => __( 'Order by the number of hits.', 'wp-graphql-rank-math' ),
				'value'       => 'hits',
			],
			'REDIRECT_TO_URL'    => [
				'description' => __( 'Order by the Redirect To URL', 'wp-graphql-rank-math' ),
				'value'       => 'url_to',
			],
			'TYPE'               => [
				'description' => __( 'Order by the redirection type (HTTP status code).', 'wp-graphql-rank-math' ),
				'value'       => 'header_code',
			],
		];
	}
}

================
File: src/Modules/Redirection/Type/Enum/RedirectionStatusEnum.php
================
<?php
/**
 * The Redirection status enum.
 *
 * @package WPGraphQL\RankMath\Modules\Redirection\Type\Enum
 * @since 0.0.13
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Type\Enum;

use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\EnumType;

/**
 * Class - RedirectionStatusEnum
 */
class RedirectionStatusEnum extends EnumType {
	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'RedirectionStatusEnum';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_description(): string {
		return __( 'The Redirection status.', 'wp-graphql-rank-math' );
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_values(): array {
		return [
			'ACTIVE'   => [
				'description' => __( 'Active.', 'wp-graphql-rank-math' ),
				'value'       => 'active',
			],
			'INACTIVE' => [
				'description' => __( 'Inactive.', 'wp-graphql-rank-math' ),
				'value'       => 'inactive',
			],
			'TRASH'    => [
				'description' => __( 'Trashed.', 'wp-graphql-rank-math' ),
				'value'       => 'trash',
			],
		];
	}
}

================
File: src/Modules/Redirection/Model/Redirection.php
================
<?php
/**
 * The Redirection model
 *
 * @package \WPGraphQL\RankMath\Modules\Redirection\Model
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Model;

use GraphQLRelay\Relay;
use WPGraphQL\Model\Model;
use WPGraphQL\RankMath\Utils\RMUtils;

/**
 * Class - Redirection
 *
 * @property ?int $databaseId The redirection database ID.
 * @property ?string $dateCreated The date the redirection was created.
 * @property ?string $dateCreatedGmt The GMT date the redirection was created.
 * @property ?string $dateModified The date the redirection was last modified.
 * @property ?string $dateModifiedGmt The GMT date the redirection was last modified.
 * @property ?string $dateLastAccessed The date the redirection was last accessed.
 * @property ?string $dateLastAccessedGmt The GMT date the redirection was last accessed.
 * @property ?int $hits The number of hits for this redirection.
 * @property string $id The global ID of the redirection.
 * @property ?string $redirectToUrl The URL to redirect to.
 * @property ?array $sources The sources for this redirection.
 * @property ?string $status The status of the redirection.
 * @property ?int $type The type of redirection.
 */
class Redirection extends Model {
	/**
	 * Stores the incoming redirection to be modeled.
	 *
	 * @var array<string,mixed>
	 */
	protected $data;

	/**
	 * Constructor
	 *
	 * @param array<string,mixed> $data The redirection data.
	 */
	public function __construct( array $data ) {
		$this->data = $data;

		$allowed_restricted_fields = [
			'databaseId',
			'id',
			'redirectToUrl',
			'sources',
			'status',
			'type',
		];

		parent::__construct( 'rank_math_redirections', $allowed_restricted_fields );
	}

	/**
	 * {@inheritDoc}
	 */
	protected function is_private(): bool {
		return 'active' !== $this->data['status'] && ! RMUtils::has_cap( 'redirections' );
	}

	/**
	 * {@inheritDoc}
	 *
	 * @return void
	 */
	protected function init() {
		if ( empty( $this->fields ) ) {
			$this->fields = [
				'databaseId'          => fn (): ?int => ! empty( $this->data['id'] ) ? (int) $this->data['id'] : null,
				'dateCreated'         => fn (): ?string => ! empty( $this->data['created'] ) ? $this->data['created'] : null,
				'dateCreatedGmt'      => function (): ?string {
					$date_created = $this->data['created'] ?: null;

					return ! empty( $date_created ) ? get_gmt_from_date( $date_created ) : null;
				},
				'dateModified'        => fn (): ?string => ! empty( $this->data['updated'] ) ? $this->data['updated'] : null,
				'dateModifiedGmt'     => function (): ?string {
					$date_modified = $this->data['updated'] ?: null;

					return ! empty( $date_modified ) ? get_gmt_from_date( $date_modified ) : null;
				},
				'dateLastAccessed'    => fn (): ?string => ! empty( $this->data['last_accessed'] ) && '0000-00-00 00:00:00' !== $this->data['last_accessed'] ? $this->data['last_accessed'] : null,
				'dateLastAccessedGmt' => function (): ?string {
					$date_last_accessed = ! empty( $this->data['last_accessed'] ) && '0000-00-00 00:00:00' !== $this->data['last_accessed'] ? $this->data['last_accessed'] : null;

					return ! empty( $date_last_accessed ) ? get_gmt_from_date( $date_last_accessed ) : null;
				},
				'hits'                => fn (): ?int => isset( $this->data['hits'] ) ? (int) $this->data['hits'] : null,
				'id'                  => function (): string {
					return Relay::toGlobalId( 'redirection', (string) $this->data['id'] );
				},
				'redirectToUrl'       => fn () => ! empty( $this->data['url_to'] ) ? $this->data['url_to'] : null,
				'sources'             => function (): ?array {
					$serialized_sources = $this->data['sources'];

					return ! empty( $serialized_sources ) ? maybe_unserialize( $serialized_sources ) : null;
				},
				'status'              => fn (): ?string => ! empty( $this->data['status'] ) ? $this->data['status'] : null,
				'type'                => fn (): ?string => ! empty( $this->data['header_code'] ) ? $this->data['header_code'] : null,
			];
		}
	}
}

================
File: src/Modules/Redirection/Fields/GeneralSettings.php
================
<?php
/**
 * Registers fields to General
 *
 * @package WPGraphQL\Fields
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Fields;

use WPGraphQL\RankMath\Modules\Redirection\Type\WPObject\RedirectionSettings;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\FieldsType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Traits\TypeNameTrait;

/**
 * Class - GeneralSettings
 */
class GeneralSettings extends FieldsType {
	use TypeNameTrait;

	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'General';
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'redirections' => [
				'type'        => RedirectionSettings::get_type_name(),
				'description' => __( 'RankMath SEO redirection settings', 'wp-graphql-rank-math' ),
			],
		];
	}
}

================
File: src/Modules/Redirection/Fields/RootQuery.php
================
<?php
/**
 * Registers fields to RootQuery
 *
 * @package WPGraphQL\Fields
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Fields;

use WPGraphQL\AppContext;
use WPGraphQL\RankMath\Modules\Redirection\Data\Loader\RedirectionsLoader;
use WPGraphQL\RankMath\Modules\Redirection\Type\WPObject\Redirection;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Abstracts\FieldsType;
use WPGraphQL\RankMath\Vendor\AxeWP\GraphQL\Traits\TypeNameTrait;
use WPGraphQL\Utils\Utils;

/**
 * Class - RootQuery
 */
class RootQuery extends FieldsType {
	use TypeNameTrait;

	/**
	 * {@inheritDoc}
	 */
	protected static function type_name(): string {
		return 'RootQuery';
	}

	/**
	 * {@inheritDoc}
	 *
	 * @return string
	 */
	public static function get_type_name(): string {
		return static::type_name();
	}

	/**
	 * {@inheritDoc}
	 */
	public static function get_fields(): array {
		return [
			'redirection' => [
				'type'        => Redirection::get_type_name(),
				'args'        => [
					'id' => [
						'type'        => 'ID',
						'description' => __( 'The ID of the redirection. Accepts either a global or database ID.', 'wp-graphql-rank-math' ),
					],
				],
				'description' => __( 'RankMath SEO redirection', 'wp-graphql-rank-math' ),
				'resolve'     => static function ( $source, array $args, AppContext $context ) {
					$database_id = Utils::get_database_id_from_id( $args['id'] );

					return ! empty( $database_id ) ? $context->get_loader( RedirectionsLoader::$name )->load( $database_id ) : null;
				},
			],
		];
	}
}

================
File: src/Modules/Redirection/Data/Connection/RedirectionConnectionResolver.php
================
<?php
/**
 * The Rank Math redirection connection resolver
 *
 * @package WPGraphQL\RankMath\Modules\Redirection\Data\Connection;
 * @since 0.0.13
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Data\Connection;

use WPGraphQL\Data\Connection\AbstractConnectionResolver;
use WPGraphQL\RankMath\Modules\Redirection\Data\Loader\RedirectionsLoader;
use WPGraphQL\RankMath\Utils\RMUtils;

/**
 * Class RedirectionConnectionResolver
 *
 * @extends \WPGraphQL\Data\Connection\AbstractConnectionResolver<array<string,mixed>>
 */
class RedirectionConnectionResolver extends AbstractConnectionResolver {
	/**
	 * {@inheritDoc}
	 */
	protected function loader_name(): string {
		return RedirectionsLoader::$name;
	}

	/**
	 * {@inheritDoc}
	 */
	protected function prepare_query_args( array $args ): array {
		/**
		 * Prepare for later use
		 */
		$last = ! empty( $args['last'] ) ? $args['last'] : null;

		$query_args = [];

		if ( ! empty( $args['where']['search'] ) ) {
			$query_args['search'] = $args['where']['search'];
		}

		$query_args['status'] = ! empty( $args['where']['status'] ) ? $args['where']['status'] : 'active';

		if ( ! empty( $args['where']['orderby']['field'] ) ) {
			$query_args['orderby'] = $args['where']['orderby']['field'];
		}

		$query_args['order'] = ! empty( $args['where']['orderby']['order'] ) ? $args['where']['orderby']['order'] : 'DESC';

		// If $last is set, we need to reverse the order.
		if ( ! empty( $last ) ) {
			$query_args['order'] = 'DESC' === $query_args['order'] ? 'ASC' : 'DESC';
		}

		/**
		 * Set limit the highest value of $first and $last, with a (filterable) max of 100
		 */
		$query_args['limit'] = $this->one_to_one ? 1 : $this->get_query_amount() + 1;

		/**
		 * Set the before and after cursors. This will modify the query in CoreSchemaFilters::add_redirection_pagination_support()
		 */
		$query_args['graphql_cursor_compare'] = ! empty( $last ) ? '>' : '<';

		if ( ! empty( $args['after'] ) ) {
			$query_args['graphql_after_cursor'] = $this->get_after_offset();
		}

		if ( ! empty( $args['before'] ) ) {
			$query_args['graphql_before_cursor'] = $this->get_before_offset();
		}

		return $query_args;
	}

	/**
	 * {@inheritDoc}
	 */
	protected function query( array $query_args ) {
		$query = RMUtils::get_redirections( $query_args );

		// Prime the cache for each of the queried redirections.
		$loader = $this->get_loader();
		if ( isset( $query['redirections'] ) ) {
			foreach ( $query['redirections'] as $redirection ) {
				$loader->prime( $redirection['id'], $redirection );
			}
		}

		return $query;
	}

	/**
	 * {@inheritDoc}
	 */
	public function should_execute() {
		$query_args = $this->get_query_args();

		if ( isset( $query_args['status'] ) && 'active' === $query_args['status'] ) {
			return true;
		}

		return RMUtils::has_cap( 'redirections' );
	}

	/**
	 * {@inheritDoc}
	 */
	public function is_valid_offset( $offset ) {
		return ! empty( RMUtils::get_redirection_by_id( $offset ) );
	}

	/**
	 * {@inheritDoc}
	 */
	public function get_ids_from_query() {
		$ids     = [];
		$query   = $this->get_query();
		$queried = ! empty( $query['redirections'] ) ? $query['redirections'] : [];

		if ( empty( $queried ) ) {
			return $ids;
		}

		$ids = array_column( $queried, 'id' );

		// If we're going backwards, we need to reverse the array.
		$args = $this->get_args();
		if ( ! empty( $args['last'] ) ) {
			$ids = array_reverse( $ids );
		}

		return $ids;
	}
}

================
File: src/Modules/Redirection/Data/Cursor/RedirectionCursor.php
================
<?php
/**
 * The Redirection cursor.
 *
 * @package WPGraphQL\RankMath\Modules\Redirection\Data\Cursor;
 * @since 0.0.13
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Data\Cursor;

use WPGraphQL\RankMath\Utils\RMUtils;

/**
 * Class - RedirectionCursor
 */
class RedirectionCursor {
	/**
	 * Our current cursor offset.
	 * For example, the term, post, user, or comment ID.
	 *
	 * @var int
	 */
	public $cursor_offset;

	/**
	 * @var string|null
	 */
	public $cursor;

	/**
	 * The WP object instance for the cursor.
	 *
	 * @var mixed
	 */
	public $cursor_node;

	/**
	 * Copy of query_vars so we can modify them safely
	 *
	 * @var array<string,mixed>
	 */
	public $query_vars = [];

	/**
	 * Constructor
	 *
	 * @param array<string,mixed> $query_args The query args.
	 * @param string              $cursor The cursor.
	 */
	public function __construct( $query_args, $cursor = 'after' ) {
		$this->query_vars = $query_args;
		$this->cursor     = $cursor;

		// Get the cursor offset if any.
		$offset_key = 'graphql_' . $cursor . '_cursor';
		$offset     = $this->get_query_var( $offset_key );

		$this->cursor_offset = absint( $offset );

		$this->cursor_node = $this->get_cursor_node();
	}

	/**
	 * Get the WP Object instance for the cursor.
	 *
	 * This is cached internally so it should not generate additionl queries.
	 *
	 * @return ?array<string,mixed>
	 */
	public function get_cursor_node() {
		if ( ! $this->cursor_offset ) {
			return null;
		}

		// We don't want to reset the sql clauses.
		return RMUtils::get_redirection_from_db( $this->cursor_offset );
	}

	/**
	 * Get the direction pagination is going in.
	 *
	 * @return string
	 */
	public function get_cursor_compare() {
		return 'DESC' === $this->query_vars['order'] ? '<' : '>';
	}

	/**
	 * Ensure the cursor_offset is a positive integer and we have a valid object for our cursor node.
	 *
	 * @return bool
	 */
	protected function is_valid_offset_and_node() {
		if (
			! is_int( $this->cursor_offset ) ||
			0 >= $this->cursor_offset ||
			! $this->cursor_node
		) {
			return false;
		}

		return true;
	}

	/**
	 * Return the additional AND operators for the where statement
	 *
	 * @return array<string,mixed>
	 */
	public function get_where() {
		// If we have a bad cursor, just return an empty array.
		if ( ! $this->is_valid_offset_and_node() ) {
			return [];
		}

		$orderby          = $this->get_query_var( 'orderby' );
		$compare          = $this->get_cursor_compare();
		$comparison_value = $this->cursor_node[ $orderby ];

		if ( 'id' === $orderby ) {
			$comparison_value = (int) $comparison_value;
		}

		return [
			'column'   => $orderby,
			'operator' => $compare,
			'value'    => $comparison_value,
		];
	}

	/**
	 * Get the query variable for the provided name.
	 *
	 * @param string $name .
	 *
	 * @return mixed|null
	 */
	public function get_query_var( string $name ) {
		return ! empty( $this->query_vars[ $name ] ) ? $this->query_vars[ $name ] : null;
	}
}

================
File: src/Modules/Redirection/Data/Loader/RedirectionsLoader.php
================
<?php
/**
 * DataLoader - Redirections
 *
 * @package WPGraphQL\RankMath\Modules\Redirection\Data\Loader
 */

declare( strict_types = 1 );

namespace WPGraphQL\RankMath\Modules\Redirection\Data\Loader;

use GraphQL\Error\UserError;
use WPGraphQL\Data\Loader\AbstractDataLoader;
use WPGraphQL\RankMath\Modules\Redirection\Model\Redirection;
use WPGraphQL\RankMath\Utils\RMUtils;

/**
 * Class - RedirectionsLoader
 */
class RedirectionsLoader extends AbstractDataLoader {
	/**
	 * Loader name.
	 *
	 * @var string
	 */
	public static string $name = 'redirections';

	/**
	 * {@inheritDoc}
	 */
	protected function get_model( $entry, $key ): Redirection {
		return new Redirection( $entry );
	}

	/**
	 * {@inheritDoc}
	 *
	 * @throws \GraphQL\Error\UserError If a redirection does not exist.
	 */
	protected function loadKeys( array $keys ) {
		if ( empty( $keys ) ) {
			return $keys;
		}

		$table = RMUtils::get_redirections_table();

		$redirections = $table->where( 'id', 'IN', $keys )->get( ARRAY_A );

		$loaded = [];

		foreach ( $keys as $key ) {
			$index = array_search( $key, array_column( $redirections, 'id' ) );
			if ( ! isset( $redirections[ $index ] ) ) {
				throw new UserError(
					sprintf(
						// translators: %s is the redirection ID.
						esc_html__( 'Redirection with ID "%s" does not exist.', 'wp-graphql-rank-math' ),
						esc_html( (string) $key )
					),
				);
			}

			$loaded[ $key ] = $redirections[ $index ];
		}

		return $loaded;
	}
}
